"use strict";(self.webpackChunkpersonal_blog=self.webpackChunkpersonal_blog||[]).push([["8694"],{20229:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return c},frontMatter:function(){return s},metadata:function(){return r},toc:function(){return p}});var r=n(82945),a=n(85893),o=n(50065);let s={layout:"post",title:"Generate Single Page HTML Data Report Using Plotly in Python",date:new Date("2023-04-14T01:11:04.000Z"),"Last Edited":"2023-04-14T10:03","Date created":"2023-04-01T22:44",tags:["technology","data_visualization"],authors:["xigou"]},i="Background  & Requirements Definination",l={authorsImageUrls:[void 0]},p=[{value:"Requirements Clearify:",id:"requirements-clearify",level:2},{value:"Write the Interface and Testcase First",id:"write-the-interface-and-testcase-first",level:2},{value:"Implement the Core Function",id:"implement-the-core-function",level:2},{value:"Make It Self-contained",id:"make-it-self-contained",level:2},{value:"Glimpse of The Report Page",id:"glimpse-of-the-report-page",level:2}];function d(e){let t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"Someone said: the best way to write a blog is not just describe waht you did, but how you resolve a problem, to record how do you think about that at that moment."}),"\n"]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"I agree with this."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"We often need to generate some data reports, a typical senario is we got some data, and we want to generate a single page data report, so in this blog I will describe how to generate single page HTML data report using open source library Plotly in python."}),"\n",(0,a.jsx)(t.h2,{id:"requirements-clearify",children:"Requirements Clearify:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"the input is processed data, as an example, we assume that it is a combination of tabular data, time series data and barchart data;"}),"\n",(0,a.jsx)(t.li,{children:"we should generate charts one-by-one for each data source, and put them all into a single HTML file;"}),"\n",(0,a.jsx)(t.li,{children:"this is a tool component, we need to integrate it with other software, wo make the integration easier, make it self-contained is a good choice, that means the output file can be accessed in offline environment."}),"\n"]}),"\n",(0,a.jsx)(t.h1,{id:"implementation",children:"Implementation"}),"\n",(0,a.jsx)(t.h2,{id:"write-the-interface-and-testcase-first",children:"Write the Interface and Testcase First"}),"\n",(0,a.jsx)(t.p,{children:"TDD( Test Driven Developing ) is always a good practice in software developing, according to the TDD work flow, we should write the interface and test case first."}),"\n",(0,a.jsx)(t.p,{children:"First, let\u2019s build the project structure like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:".\n\u251C\u2500\u2500 Makefile\n\u251C\u2500\u2500 plotly_offline_report\n\u2502   \u251C\u2500\u2500 gen_report.py\n\u2502   \u251C\u2500\u2500 __init__.py\n\u2514\u2500\u2500 tests\n    \u251C\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_gen_report.py\n"})}),"\n",(0,a.jsxs)(t.p,{children:["In ",(0,a.jsx)(t.code,{children:"gen_report.py"}),", we define the structure ReportData as the source data of the report,  and the function ",(0,a.jsx)(t.code,{children:"gen_report()"})," to finish the report generating, we are not planning to implement it in this stage, so the function body is empty."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class ReportData:\n    tabular_data = None\n    time_series_data = []\n    bar_chart_data = []\n\nclass ReportGenerator:\n\n    def __init__(self, report_data, report_filename):\n        self._report_data = report_data\n        self._report_filename = report_filename\n\n    def gen_report_file(self):\n		pass\n"})}),"\n",(0,a.jsxs)(t.p,{children:["In ",(0,a.jsx)(t.code,{children:"test_gen_report.py"}),", we implement the GenReport Testcase, the testcase described what we need to do is get the report data  and call the gen_report() function on the report data to geneate a report file. The report file will be stored in the ",(0,a.jsx)(t.code,{children:"TMP_DIR"}),", and we can use ",(0,a.jsx)(t.code,{children:" python3 -m http.server --directory /tmp/plotly_gen_report/"})," to start a webserver on the directory, so we can easily open browser to check if it fullfilled our requirments mannually, TDD workflow makes the dev-test loop faster and accelerates the development."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import unittest\nimport tempfile\nimport os\nimport random\n\nfrom plotly_offline_report.gen_report import ReportGenerator, ReportData\n\nTMP_DIR = "/tmp/plotly_gen_report"\n\nclass TestGenReport(unittest.TestCase):\n    def setUp(self) -> None:\n        if not (os.path.exists(TMP_DIR) and os.path.isdir(TMP_DIR)):\n            os.mkdir(TMP_DIR)\n\n    def test_gen_report(self):\n        report_data = ReportData()\n        report_data.tabular_data = [["test_header" for i in range(10)]]\n        report_data.tabular_data.extend(\n            [[random.randint(1, 100) for i in range(10)] for j in range(5)]\n        )\n        report_data.bar_chart_data = [(i, random.randint(1, 100)) for i in range(10)]\n        report_data.time_series_data = [random.randint(1, 100) for i in range(1000)]\n        test_report_file = tempfile.NamedTemporaryFile(\n            dir=TMP_DIR, delete=False, suffix=".html"\n        )\n        ReportGenerator(report_data, test_report_file.name)\n\nif __name__ == "__main__":\n    unittest.main()\n'})}),"\n",(0,a.jsxs)(t.p,{children:["In  ",(0,a.jsx)(t.code,{children:"Makefile"}),", we defined the test step and clean up step of the project."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-makefile",children:".PHONY: test\ntest:\n	python3 -m unittest tests/test_gen_report.py\n\n.PHONY: clean\nclean:\n	rm -rf /tmp/plotly_gen_report\n"})}),"\n",(0,a.jsx)(t.h2,{id:"implement-the-core-function",children:"Implement the Core Function"}),"\n",(0,a.jsx)(t.p,{children:"To make the post more clear, I will just put some code snipets to demostrate the core structure of the implementation, full version of code can be accessed at github repo:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"https://github.com/XiGou/plotly_gen_offline_report",children:"https://github.com/XiGou/plotly_gen_offline_report"})}),"\n",(0,a.jsxs)(t.p,{children:["In ReportGenerator class, we use 3 functions to plot the figure or table by plotly and pandas library, and got the HTML string, and use ",(0,a.jsx)(t.code,{children:"gen_report_html_str()"})," to compose them all and filled into ",(0,a.jsx)(t.code,{children:"_report_html_template"})," and got the final html string. At lase we write it into an HTML file."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'from plotly.offline.offline import get_plotlyjs\nimport pkgutil\nimport pandas as pd\nimport plotly.express as px\n\nclass ReportData:\n    tabular_data = None  # [["header"], [1]]\n    time_series_data = []  # [{"timestamp":1, "value": 1}]\n    bar_chart_data = []  # [{"value":1, "count": 1}]\n\nPKG_NAME = "plotly_offline_report"\n\nclass ReportGenerator:\n    _report_html_template = """\n		# defined the basic html wrapper to display the report\n		"""\n\n    def __init__(self, report_data, report_filename):\n        self._report_data: ReportData = report_data\n        self._report_filename = report_filename\n        self._report_sections = []\n\n    def _gen_report_html_str_for_ts_data(self):\n        data = self._report_data.time_series_data\n				# plot line figure using plotly\n        return f"""\n            <h3> Time Series Data </h3>\n            {fig.to_html(full_html=False, include_plotlyjs=False)}\n        """\n\n    def _gen_report_html_str_for_barchart_data(self):\n        data = self._report_data.bar_chart_data\n        data.sort(key=lambda x: x["value"])\n        # plot barchart using plotly\n        return f"""\n            <h3> Bar Chart Data </h3>\n            {fig.to_html(full_html=False, include_plotlyjs=False)}\n        """\n\n    def _gen_report_html_str_for_tabular_data(self):\n        data = self._report_data.tabular_data\n        # compose the pandas dataframe\n        return f"""\n            <h2> Tabular Data </h2>\n            {df_stylers.to_html()}\n        """\n\n    def gen_report_html_str(self):\n				...\n\n    def gen_report_file(self):\n        with open(self._report_filename, "w", encoding="utf-8") as f:\n            f.write(self.gen_report_html_str())\n'})}),"\n",(0,a.jsx)(t.h2,{id:"make-it-self-contained",children:"Make It Self-contained"}),"\n",(0,a.jsx)(t.p,{children:"The key point of this project is to make the report self-contained, so it can be opened in enviroment without internet."}),"\n",(0,a.jsxs)(t.p,{children:["In the ",(0,a.jsx)(t.code,{children:"function call to_html(full_html=False, include_plotlyjs=False)"})," of plotly, we set ",(0,a.jsx)(t.code,{children:"full_html=False"})," to generate just an html div instead of a complete HTML file include the hearder and body. we set  ",(0,a.jsx)(t.code,{children:"include_plotlyjs=False"})," because we need to include multple figure in one report HTML, we don\u2019t want it to appear multiple time in one page, and each plotly js script make our file few MBs bigger."]}),"\n",(0,a.jsxs)(t.p,{children:["the implementation of ",(0,a.jsx)(t.code,{children:"gen_report_html_str()"})," is below, we make the bootstrap and plotly js/css as static assets of our project, we use bootstrap here to build a grid layout and make our page looks better, and we include these contents directly into the ",(0,a.jsx)(t.code,{children:"_report_html_template"})," then we got a full version of our report."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'def gen_report_html_str(self):\n        self._report_sections = [\n            self._gen_report_html_str_for_tabular_data(),\n            self._gen_report_html_str_for_barchart_data(),\n            self._gen_report_html_str_for_ts_data(),\n        ]\n        plotlyjs_script = f"""\n        {self._window_plotly_config}\n        <script type="text/javascript">{get_plotlyjs()}<\/script>\n        """\n        bootstrapjs = f"""<script>{pkgutil.get_data(f"{PKG_NAME}.assets", "bootstrap.bundle.min.js").decode("utf-8")}<\/script>"""\n        bootstrapcss = f"""<style>{pkgutil.get_data(f"{PKG_NAME}.assets", "bootstrap.min.css").decode("utf-8")}</style>"""\n        return self._report_html_template.format(\n            report_sections=self._compose_report_sections(),\n            style=bootstrapcss,\n            scripts=f"{plotlyjs_script}\\n{bootstrapjs}",\n        )\n'})}),"\n",(0,a.jsx)(t.h2,{id:"glimpse-of-the-report-page",children:"Glimpse of The Report Page"}),"\n",(0,a.jsx)(t.p,{children:"It looks morden, elegant, and it is interative."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Web capture_14-4-2023_05713_192.168.75.183.jpeg",src:n(54459).Z+"",width:"456",height:"1024"})})]})}function c(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},54459:function(e,t,n){n.d(t,{Z:function(){return r}});let r=n.p+"assets/images/rxpfH1h-5c457df4d6bbd62273805aa0c1987f85.jpeg"},50065:function(e,t,n){n.d(t,{Z:function(){return i},a:function(){return s}});var r=n(67294);let a={},o=r.createContext(a);function s(e){let t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:t},e.children)}},82945:function(e){e.exports=JSON.parse('{"permalink":"/blog/2023/03/23/gen-report-plotly","source":"@site/blog/2023-03-23-gen-report-plotly.md","title":"Generate Single Page HTML Data Report Using Plotly in Python","description":"Someone said: the best way to write a blog is not just describe waht you did, but how you resolve a problem, to record how do you think about that at that moment.","date":"2023-04-14T01:11:04.000Z","tags":[{"inline":true,"label":"technology","permalink":"/blog/tags/technology"},{"inline":true,"label":"data_visualization","permalink":"/blog/tags/data-visualization"}],"readingTime":4.655,"hasTruncateMarker":true,"authors":[{"name":"XiGou","title":"Software Developer","url":"https://github.com/XiGou","imageURL":"https://avatars.githubusercontent.com/u/20839871?s=400&u=362e4a7ba8a851d17b434dc784fbef454d94170c&v=4","key":"xigou","page":null}],"frontMatter":{"layout":"post","title":"Generate Single Page HTML Data Report Using Plotly in Python","date":"2023-04-14T01:11:04.000Z","Last Edited":"2023-04-14T10:03","Date created":"2023-04-01T22:44","tags":["technology","data_visualization"],"authors":["xigou"]},"unlisted":false,"prevItem":{"title":"\u897F\u897F\u5F17\u795E\u8BDD- \u5929\u95E8\u5C71\u56DB\u4EBA\u96C6\u4F53\u81EA\u6740\u4E8B\u4EF6","permalink":"/blog/2023/04/15/le-myth-de-sysyphes-4-suicide-in-tianmenshan"},"nextItem":{"title":"\u300A\u7B2C\u4E8C\u6027\u300B\u8BFB\u540E\u611F","permalink":"/blog/2023/02/05/The-Second-Sex"}}')}}]);