<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>你好, 我是一个乐子人 Blog</title>
        <link>https://xigou.github.io/blog</link>
        <description>你好, 我是一个乐子人 Blog</description>
        <lastBuildDate>Sun, 05 Feb 2023 09:35:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-CN</language>
        <item>
            <title><![CDATA[《第二性》读后感]]></title>
            <link>https://xigou.github.io/blog/2023/02/05/The-Second-Sex</link>
            <guid>https://xigou.github.io/blog/2023/02/05/The-Second-Sex</guid>
            <pubDate>Sun, 05 Feb 2023 09:35:04 GMT</pubDate>
            <description><![CDATA[波伏娃是1908年出生于法國的作家、存在主義哲學家、政治活動家、女權主義者、社會主義者和社會理論家。我倾向于认为她是与我们同一时代的人，小时候保护过我免于挨揍的我的曾祖父出生于1917年，2008年去世，波伏娃如果足够长寿，也许能够与我的人生有时间上的交叠。1955年波伏娃和他的情人萨特应邀访问中国，与建国初期茫然四顾的中国人民一同欢度国庆，留下了这张令中国人倍感亲切的照片。]]></description>
            <content:encoded><![CDATA[<p>波伏娃是1908年出生于法國的作家、存在主義哲學家、政治活動家、女權主義者、社會主義者和社會理論家。我倾向于认为她是与我们同一时代的人，小时候保护过我免于挨揍的我的曾祖父出生于1917年，2008年去世，波伏娃如果足够长寿，也许能够与我的人生有时间上的交叠。1955年波伏娃和他的情人萨特应邀访问中国，与建国初期茫然四顾的中国人民一同欢度国庆，留下了这张令中国人倍感亲切的照片。</p><p><img loading="lazy" src="https://imgur.com/jKVYO7U.jpg" alt="220px-Simone_de_Beauvoir_&amp;_Jean-Paul_Sartre_in_Beijing_1955.jpg" class="img_ev3q"></p><p>波伏娃最出名的八卦事件，就是她与萨特的开放关系，没有阅读波伏娃的著作之前，我就已经主观地对这段关系下了定论: 萨特是法国富裕家庭的独子，同时也是存在主义哲学家，一个富有而有智慧的男人，没有女人会不喜欢他。而萨特患有眼疾，长相略显丑陋，波伏娃也和现在的那些颜控女孩一样因此拒绝与他结婚。读完了她的著作之后，再看我这个想法实在是过于幼稚。</p><h1>我阅读《第二性》的动机</h1><p>这本书被称为是女权主义的圣经，就和文学界的《百年孤独》一样，时常被提及，很少被阅读，主要原因是他是一本严肃的学术著作，同时篇幅达到了70万字，文化快餐化的今天，除了起点中文网的用户，没有多少人愿意读这么长的内容。最近这些年，女权主义在中国的发展迅速，90年代以后出生的几乎没有人不知道这个词汇，女权主义本身也成为了互联网上的流量密码。</p><p>这本书已经躺在我的待阅列表里面数年之久，最近我终于选择了将它读完，是因为在去年发生的一些与女权主义毫不相关社会运动当中，中国的女权主义者积极的参与其中，这让我看到了中国女权主义的超越性的显现，她们不再是消极的抱怨，而是选择了主动出击，战场也不局限于女权主义本身而是遍地开花，这激发了我强烈的兴趣。同时男性和女性的矛盾在今后的很长一段时间都会存在。这个矛盾无法被强制力量压制，因为这个矛盾和美国人压迫少数族裔不一样，他是7亿人和7亿人之间的斗争；同时这个矛盾又和德国人压迫犹太人不一样，不能通过一方完全战胜另一方或者毁灭另一方来达成目的，男性和女性是相互依存的，除了在西游记里面之外，男性和女性从来没有真正意义上的分开建立过互相斗争和抗衡的男国和女国；此外女性还掌握着在远古时期被崇拜着的关乎人类存续的生育的力量。</p><h1>书籍整体介绍</h1><p>存在主义哲学是西方现代哲学的一个非理性的分支，这里的非理性并不是胡说八道，而是他不基于严格的逻辑推理来描述事情，更加强调人主观的看法。这个主观的看法又和我们平时看着天花板的空想不一样，他是哲学家在广泛的阅读和思考之后发表的见解，所以阅读这样的东西自然是非常有价值的。我阅读中体验到它和现在流行的社会学书籍的区别在于，书中的观点没有严格的论证，没有数据，没有调查问卷，但是读上去又会让你深以为然。书里面的很多观点，如果你要认真的去反驳的话，甚至可以写一本比这本书更长的书出来，所以不要带着吹毛求疵的态度来读这本书。</p><p>总体而言，这本书是质量很高的一本书，作为一本长篇著作，读起来偶尔也会发现里面总是有一些车轱辘话来回说的重复与枯燥，但那些枯燥的部分，仔细读着也是一次精神的深度按摩。考虑到作者能够承受写出这么多文字的痛苦，我阅读这么多文字的枯燥就算不上什么了。如果想要跳过一部分，那么我推荐跳过第一卷第3部—迷思，因为这一部分主要是对文学家及其作品的分析与批判，批判这些文学家创造的思维产物，对于以认识社会为目的的阅读来讲重要性相对较低。如果你的时间更加紧迫，那么我推荐直接阅读第二卷第4部—走向解放，它大约相当于《共产党宣言》在共产主义中的地位。如果短视频和社交网络已经让你失去了阅读长篇大论的兴趣，我将会在这篇文章的底部，附上我摘录的一些经典语句，你可以在地铁上、在马桶上阅读其中的一句然后细细品味，也能领会到书中的很多精神与趣味。</p><h1>女性为什么会成为第二性</h1><p>这本书的第一部分，作者就详细的分析了男性和女性生理上的差异，但是在对比的大自然当中雌性动物和雄性动物的关系之后，自然而然的发现生理差异并不是导致男性对女性长期压迫的原因。这样的一种长期的不平等，是整个社会有意识的造就的，在这个过程当中男性承担主要责任，而女性则是帮凶。</p><p>在男性的意识当中，自己是征服世界的主体，女性是一种特殊的客体，和自然界当中的动植物以及死物不一样，她是一个拥有意识的人；而女人又和其他的男人不一样，她是可以被占有被同化的人。结婚证是一个宣告这种占有关系的证件，婚礼是宣告这种占有关系的仪式，这种意识指导了男性在面对女性时的所有行为。女性对于这种占有则是快乐地接受，因为选择独立就意味着要自己承担风险。当男性正在为自己达成占有的目的而沾沾自喜的时候，丝毫没有发觉他已经掉入了圈套之中:</p><blockquote><p>后来婚姻也奴役了男人；他落入了大自然设下的陷阱里：男人为了想要拥有青春正盛的年轻女孩，落得后来必须一辈子赡养丰满肥厚的老女人，或是干瘪赢弱的老太太；本来是用来妆点女人的金珠宝玉， 到头来反而成了丑陋的负担。</p></blockquote><p>女性是这种压迫的帮凶，是因为在她们的意识里面男性是人，自己则是矮化了的男人，她们需要依靠男性这个他者来定义自我。比如世界上最出名的80后金正恩同志的夫人李雪主，如果你向她询问她是谁，她肯定会回答她是金正恩的夫人，如果你再继续追问她到底是谁，她很可能会哑口无言。男性则不一样，在深圳科兴科学园楼下的饭馆里有很多青年男性，如果你问他们是谁，他们可能会回答自己是互联网公司的程序员，也可能是会回答自己是金融公司的基金经理，甚至不需要你询问，他们将工卡塞进裤兜，而让工卡的带子飘扬在外面，上面印刷着的 Tencent 或者 TIMI 的字样就足以向你介绍他们是谁。这里的一个主要的区别就是男性并没有依靠女性来定义自己。</p><p>男性对女性的态度是占有，他可能并不爱她，但是他也不恨她，而女性则不然，女性天生对其他的女性带有敌意。在一个家庭当中，关系最为紧绷的就是婆媳和妯娌。婆婆总是热衷于教导媳妇如何成为一个合格的妻子，并且总是会在她的身后露出嘴角向下的意味深长的表情。这让我想起一个曾经亲眼见到的非常有趣的场景，婆婆和媳妇坐在一起讨论另一个媳妇，她们像古希腊的哲学家一样你一言我一语不断地质疑那个不在场的媳妇，语气越来越高亢，韵脚也压得越来越准，就好像两个  Rapper 正在 Battle。而婆婆作为身经百战的老江湖，自然是最懂得抽象的，她的唱词里面抽象出了媳妇 A 和媳妇 B 的一些共有属性，在另一个下午，她又可以用同一套唱词和那个之前不在场的媳妇一起再唱一次。现在这一代人独生子女成为主流，如果我不记录下来，大家应该很难再见到这样精彩的戏码了。</p><h1>男性对于女权主义的态度: 敌视或者捧杀</h1><p>最近两年，中国有两个忽然出现的顶流明星: 谷爱凌和丁真，然而他们却在互联网上受到了群嘲，网民们乐此不疲地制作了很多“一眼丁真”的表情包，夜以继日扒出谷爱凌的众多“黑料”。仔细观察一下就会发现这些网友多半都是男性，所以分析这件事情，大致可以了解到男性对女权主义崛起的态度。首先说说丁真，这些男性声称自己黑他的主要原因是他大字不识一个，单靠漂亮的脸蛋就登上了央视和联合国的讲台，总结起来就是一个德不配位。但是这种说法不过是这些男性自欺欺人罢了，在我们的社会上，有很多小学学历、初中学历就成为大企业家或者身居高位的人，在面对这些人的时候，他们往往会说“读书不是衡量一个人能力的唯一标准，很多硕士博士读书读呆了还不如初中生”。丁真受到男性群体的攻击，更本质的原因是他的出现让男性从改变世界的主体矮化成了一个供女性观赏玩乐的客体，他没有自己的思想，但是他有迎合女性的漂亮脸蛋，从这个意义上讲丁真就是男性群体当中的叛徒，男性自然会群起而攻之。再来说说谷爱凌，她拥有闪亮的履历，热爱的事业，勇敢无畏的冒险精神，同时她又拥有家族巨额财富的继承权，她没有乖乖地做一个被观赏的被占有的客体，而是把自己“拔高”成为主体侵占了这些传统意义上男性专属的美德和权利，对于这样一个“富有攻击性”的人，男性群体不攻击她才是不科学的。从这个案例便可以窥见男性对女权主义崛起的敌视。</p><p>为了让女权主义赶紧销声匿迹，足智多谋的男性除了直接表现出仇视之外，还有另一种态度就是捧杀。这里我就不得不提我的家乡蜀国，在蜀国的婚姻习俗当中，“耙耳朵”（蜀国方言，代表怕老婆）是大部分蜀国男人的人设，跪搓衣板、挨骂、上交工资卡、向妻子讨钱买烟是他们生活当中的常态。这种男性的形象让那些不能上桌吃饭的山东女人直呼羡慕，而我现在看到这些男人，真的想一脚把他们踢到粪坑里，并不是我害怕他们助长的这些风气会让我也难逃跪搓衣板的厄运，而是因为我看穿了他们的阴谋，这种看起来非常滑稽的表达对妻子的爱的方式，实际上是阴险的捧杀。</p><blockquote><p>巴尔札克表示：「已婚妇女是个必须把她扶到王位上的奴隶。」在无关紧要的小事上，男人要抹除自我，要以女人的意见为意见， 把她摆在第一位.</p></blockquote><p>他们在无关紧要的小事上面吹捧顺从自己的妻子，让她飘飘然忘乎所以，而使得她们在真正的大事上面则是疏忽大意或者心怀歉意地放弃了自己的发言权。同时这也使得女性被塑造成了蛮不讲理的形象(点名央视春晚)，进而导致社会舆论偏向于男性的一方，当一个蜀国女人被打得鼻青脸肿在外面哭哭啼啼的时候，周围总会有人说“我看他平时那么温柔一个人，是不是你话说重了”。</p><h1>未来社会的畅想</h1><p>在今天的中国，女性的境遇相对于波伏娃年轻的时候已经有了一定的改善，人为选择胎儿性别已经被法律禁止，明面上的男女同工不同酬已经消失，越来越多的女性能够靠着自己的工作过上独立自主的生活。但是暗地里的同工不同酬依然存在，这其中最主要的一个因素就是女性的生育行为。《圣经》断言：“你生产儿女必多受苦楚”，这种生产本身的痛苦因为麻醉药的广泛使用一定程度上被消除，但是生育后的女性本身需要很长时间的恢复，才能重返工作岗位；而照料出生的幼儿则需要花费女性长达数年的大部分精力；这两点让女性在工作上面投入的精力大大减少，做出成绩也是难上加难，企业也会因此而偏向于拒绝给女性提供工作机会。</p><p>生育是对于整个国家有重要意义的事情，那么自然而然的国家应该为此而付费。所以知名左派媒体人马前卒曾经多次提及要建立国家级别的社会化抚养体系，女性生下孩子后，不需要耗费精力养育他，而是把他送到社会抚养机构里面，自己则可以继续专注于自己的工作和事业。这样一个方案听起来是美好的，将养育孩子这样一个事情交给专业的人士去做，养育出来的后代也许会有更高的质量，这种细化的分工也是在提高整个社会的运行效率。但是它也可能会导致传统家庭关系的瓦解，父母和孩子之间不会再有亲近的情感，考虑到我们是社会主义国家，而家庭是私有制财产的最小单位，瓦解家庭一直都是马克思同志的梦想，所以这个方案很可能会在未来成为现实。</p><p>有了社会化的抚养机构之后，女性唯一面临的痛苦就是生育对自己身体造成的伤害。正如历史上洗衣机、电饭锅等等电器的发明把女性从繁杂耗时的家务当中解放出来一样，要解决这一个问题，自然可以发明一个“生娃机”出来。未来的人类生育过程很有可能是通过试管制造受精卵，然后放入一个循环流动着营养液的塑料袋里面，受精卵将会在这个塑料袋里，经历鱼、蝌蚪、爬行类、哺乳类的形态变化，在时间到达 40 孕周的时候通过中国邮政邮寄到父母的家中，而这些父母则使用剪刀剪开塑料袋，拍摄一个开箱视频发在哔哩哔哩上面，庆祝新生命的到来。这多少会让人担忧因此而出现的众多的伦理危机，比如我们会模糊一个婴儿和一个真空包装的麻辣兔头之间的界限，但是有这种担忧并不意味着那一天就不会到来，就好像你爷爷担忧的事情很多都正在发生一样。</p><h1>精彩句子摘录</h1><p>第二性 合卷本 - 波伏娃</p><p>───────────────</p><p>◆ 引言</p><p>▪ 某一类的人在一段或长或短的期间全然统辖另一类的人，这样的事例也是有的。这种不平等常常是由彼此数量上的差距造成，人口占多数的族群会强制少数族群遵行它的法则， 或是多数会迫害少数。可是女人并不属于少数族群，和美国的黑人，或是和犹太人的情况不一样。女人和男人在这世界的人数几乎相同</p><p>▪ 「男人—封建君王」会在物质上保障「女人—忠君之臣」的需求，而且会让女人的存在具有正当性；这使女人避开了经济上的风险，也避开了自由独立要冒的形上风险，因为自由独立必须自行构想其目的，不会有外援</p><p>▪ 主宰阶层会多少发自内心的满口颂赞「好黑人」的美德是天真无邪、孩子气、满脸笑容，是做个顺服的黑人，而「真正的女人」的美德是，肤浅、稚气、没责任感，做个只对男人事事顺服的女人。</p><p>▪ 幸福这个字并没有确切的意涵，更看不出来它有什么真正的价值；我们根本没有办法衡量别人幸不幸福，更何况， 要强迫别人处在某境地时，总是会很轻松地向对方说：那样会很幸福；尤其是对那些被迫处在停滞状态中的人， 有人总会以「幸福就是安稳、没有变动」为借口，说他们过得快乐、满足。</p><p>◆ 第一章 生物学的基本论据</p><p>▪ 如果说身体不是物， 那么它就是一种处境——处境也就是意味着，我们对这个世界的探取，是对我们的存在的初步构思；而女人比男人柔弱， 她的肌耐力没有男人强壮， 红血球比较少，肺活量比较小；她跑得比较慢，只能举起比较轻的东西，几乎是不管哪种体力竞赛， 女人都无法与男人匹敌。</p><p>◆ 第三章 历史唯物论的观点</p><p>▪ 「和其他男人发生私情」是已婚女人唯一的防卫之道，以反抗她在家庭中身为奴隶的处境。</p><p>▪ 「女人的解放只有大规模参与生产活动、让家庭劳务成为微不足道之事才可能。</p><p>▪ 如果人类意识之中没有「他者」这个内在固有的范畴、没有支配「他者」这种内在固有的心理意图，使用青铜器物并不会导致女人受压迫。</p><p>▪ 那么要让女人生育，唯一可行之计就是将女人幽禁在某些境地中， 让生育成为她唯一的出口；譬如以法律、风俗迫使女人不得不走入婚姻， 婚后， 又不准她避孕、不准她堕胎，也不容许离婚。</p><p>◆ 第三章</p><p>▪ 只要有私有财产的存在， 就会把妻子的不贞看做是对夫家严重的背叛。</p><p>▪ 只要家庭和私有财产是社会不可动摇的基础，女人便会一直彻底受到异化。</p><p>▪ 在这里，我们注意到了在整个历史发展中都会发现的一个重要事实，就是抽象的法律条文并不足以界定女人的真实处境，女人的处境主要取决于她在经济上扮演的角色，甚至，抽象的自由与具体的权利经常是此消彼长。</p><p>◆ 第四章</p><p>▪ 促使父权家庭过渡到真正的夫妻共治家庭的，比较是源自肇始于中世纪的农奴制。农奴和他的妻子家无恒产，他们唯一共同拥有的是住屋， 和家用器物的使用权；因此丈夫没有任何理由成为妻子的主宰。</p><p>▪ 对工人阶级的女人来说， 资产阶级对她们经济上的压迫事态更为重大，以致遮盖了性别不平等的问题， 而且经济上的压迫，也让个人丧失了所有的机会。</p><p>◆ 第五章</p><p>▪ 巴尔札克表示：「已婚妇女是个必须把她扶到王位上的奴隶。」在无关紧要的小事上，男人要抹除自我，要以女人的意见为意见， 把她摆在第一位.</p><p>▪ 女人的历史完全是男人造成的。</p><p>▪ 所以我们必须先描绘男人梦想中的女性形象， 因为这个「为男人而存在」的女性形象是影响女人现实处境的一个重要因素。</p><p>◆ 第一章</p><p>▪ 她在男人眼中是最恰当的中介，介于他的同类与异类之间，她一方面等同于他，另一方面又如同大自然一样，与他有别</p><p>▪ 有些女人是奴隶，但是历史上也一直都有自由的女人，这指的便是那些因为宗教信仰、因为社会地位而受到尊崇的女人，但这些女人尽管拥有自由，她们还是承认男人的主权，男人并不觉得她们会起而反抗他、威胁他，转而将他设立为客体。女人也就因此一直是非本质者，永远不可能回返为本质者，她永远是绝对的「他者」，没有转化的余地。</p><p>▪ 男人一直有个梦想，就是将女人 「打上烙印」，让她永远属于他所有；不过就连最自傲的男人都很清楚，女人最终只会在他心里留下回忆，最真实的感官滋味之代价往往是：即使记忆中最炙烈的影像到头来都只成冰冷。整个文学都在述说男人这种挫败。</p><p>▪ 因此对于女人，不管她是情人，或是母亲，男人最珍视与最痛恶的是，她始终带有动物性的一面，她的存在始终和不可或缺的基本生存有关，而这也使得她注定是有限性之存有，注定要死亡。</p><p>▪ 在她是属于他所有时，他爱她，但在她是「他者」时，他畏惧她；不过就因为她是可畏的「他者」，男人更加想要将她据为己有；正因为这样，男人会渐次将女人提升为一个有尊严的人，并承认她和他是同类。</p><p>▪ 富有的男人会以毛裘、珠宝来装扮自己的妻子；小康之家的男人会夸说自己的妻子贤良有德，持家有方；而贫穷的男人如果能有个女人服侍他， 就会认为自己在世上也拥有一点财物。</p><p>▪ 男人彻底奴役了女人，不过如此一来也一并剥除了她身上那种让人想要拥有她的魅力。女人并入家庭、社会以后，她的神奇魔力并没有化为其他的面貌，反而可以说是散失殆尽；女人这时被贬抑为女仆，不再被看做是未驯服的猎物，或是蕴含在大自然中各种宝藏的化身。</p><p>▪ 不过我们掌控在手中的往往会反过头来支配我们，所以后来婚姻也奴役了男人；他落入了大自然设下的陷阱里：男人为了想要拥有青春正盛的年轻女孩，落得后来必须一辈子赡养丰满肥厚的老女人，或是干瘪赢弱的老太太；本来是用来妆点女人的金珠宝玉， 到头来反而成了丑陋的负担；苏格拉底的老婆赞西佩始终是男人最畏惧的女人典型 (注一三七(原注) 在古希腊和中世纪时期，许多悲哀叹息都以此为主题。)。</p><p>▪ 只有婚姻制度不存在了，在婚姻之外的情事才会随之消失。因为婚姻的目的多少是在于，让男人对 「自己的」妻子免疫， 不过其他女人在他眼中仍然具有强烈的吸引力；他自然会将焦点转移到其他女人身上。</p><p>▪ 女人必须保持神祕低调、陌生而未知，以便男人将她当做是远方国度的公主爱慕她。</p><p>◆ 第一节 蒙特朗，以憎恶为粮</p><p>▪ 一个人自以为很了不起时，还真是有理由可以鄙视他人!只要审查他人、疵议他人，就足以让他觉得自己和自己谴责的人有所不同；只要指出他人的毛病，就可以让自己轻轻松松变清白。蒙特朗一生是多么陶醉在鄙视他人这件事上! 只要说别人是愚蠢的，就足以让他认为自己是聪明的，说别人是懦弱的，就足以让他认为自己很勇敢。</p><p>◆ 第二卷 实际经验</p><p>▪ 身为女人真是不幸！然而女人自己一点也不会意识到这是个不幸
——齐克果</p><p>女人半是受害者，半是共犯，一如所有的人。
——沙特</p><p>◆ 第二章 少女</p><p>▪ 她会穿低胸的衣服、袒露大腿,但只要有人看她,她便会羞红脸,生起气来。她会故意去挑逗男人,但一发现自己在他身上引起了欲望,她又会非常厌恶, 远远避开。男人的欲望对她是恭维, 同时也是冒犯。</p><p>▪ 她有欲望的肉体不再是污秽不洁的,它是欢愉, 是美。与天空与原野融为一体的她是激发万物、鼓动万物的那一缕气息,她也是欧石南每一株岔生的茎;她深深植根于大地的个体,是永无止限的意识,她既是 「精神」又是 「生命」;她的存在是必然的,是带着胜利之姿的 ,一如大地。</p><p>▪ 她很诚实地表示, 她再也不会跟以前的女性朋友那么要好,因为对那些太丑太笨的,她讨厌, 对那些太漂亮的,她有戒心。</p><p>◆ 第七章 社会上的人际往来</p><p>▪ 男人与男人交流是个体与个体各自以个人的想法、计划进行交流;女人与女人则是封闭在女人命运的普遍概括性中,彼此带着存在内向性的默契结合在一起。一开始,她们在对方身上寻找的是,确立她们共同拥有的世界。她们不会争议各自不同的观点,她们只会交换心事,分享食谱;她们要联合起来创造一个「对反的世界」,这个对反世界的价值要胜过男性世界的价值</p><p>▪ 不过女人之间的情谊很少成为真真正正的友谊;虽然,女人和女人更能自发地团结在一起，比男人和男人为甚,但是在这种团结一气中,个个女人都不是往另外一个女人超越,而是一起转向</p><p>▪ 女人之间的关系不是建立在自我个体的独特性上,而是直接在广泛概括性中经历,因此女人往往会对其他女人有敌意。</p><p>▪ 总之,婚外私情、朋友情谊、人际往来只不过是婚姻生活中的插曲,既无法帮助女人承担起婚姻中的束缚,也无法解开这层束缚。这些都不过是逃避,无法让女人将自己的命运真正掌握在自己手中。</p><p>◆ 第八章 妓女与交际名媛</p><p>▪ 在战争期间,没有人会像高级妓女这么激切地展示爱国心;她们自以为有高贵情操,希望藉此行动让自己表现得像公爵夫人一样。她们在公共议题上发表的言论,在在是俗见、成见、陈腔滥调,连表达的情感都很俗套,往往心底连一丝真诚都没有。她要不就谎话连篇,要不就夸夸其谈,内容完全没意义。交际名媛一辈子都活在自我炫耀里,她的谈话、她的模仿行为目的不在表达她的想法,而是为了制造效果。</p><p>◆ 第九章 从熟龄到老年</p><p>▪ 老妇人的智慧无论是让人愉悦的或是辛酸苦涩的,仍然是负面消极的,因为这些智慧都带着抗议、指责、拒绝的性质,是一种结不出果实的智慧。</p><p>◆ 第十章 女人的处境与特征</p><p>▪ 大家所谓的「女人的敏感」有一部分是源自于女性迷思,另一部分则来自于女人故做姿态;不过女人比男人更留意自己,也更留意世界,所以会更敏感,这也是真的。</p><p>◆ 第十二章 恋爱中的女人</p><p>▪ 通常,她寻求的是确立了男性优势地位的男人;她很快就会发现很多男人一样是随机偶发的、属于凡尘的,让人可悲</p><p>▪ 男人幸运之处在于,从小到大,他都必须走上一条艰苦的道路,但这却也是一条最可靠、稳当的道路;女人不幸之处在于,种种难以抗拒的诱惑总是园绕在她身边,事事物物都诱使她走上最轻省的道路;大家总是跟她说,只要让自己随波逐流,就可以到达极乐天堂,而从来不曾要她为自己的人生奋斗;当她发现婚姻只是一场幻影时,已经来不及了;她已经在婚姻这场冒险中耗尽了力气。</p><p>▪ 在许多女人的爱情中都带有这种童年之梦;女人很喜欢情人称她是「小女孩」、「我心爱的孩子」;男人都懂得这些讨好的话:「你看起来像个小女孩」,这种话最容易打动女人心。</p><p>▪ 她总爱问男人:你爱我吗?和昨天一样爱吗?你会永远爱我吗?这等于是迫使男人对她撒谎。</p><p>◆ 第十四 章独立的女人</p><p>▪ 二十年来的等待、梦想和希望,早已使男人是解救者的迷思深植年轻女人心中,其后,她虽然从工作里得到独立自主,但这并不足以消除她想要弃绝自我的欲望。</p><p>◆ 结语</p><p>▪ 婚姻也会是建立在你情我愿上,而且任一方都能随时提出离婚;生儿育女也会是出于自由意愿的抉择,也就是说避孕、堕胎都是合法的,而且无论是结婚生子的母亲或是未婚妈妈、无论是婚生子女或是非婚生子女都享有同等的权利;工作妇女会享有支薪的产假,会有公立机构负起照顾幼儿的责任,但这并不表示要从父母身上夺走孩子,而是不让育儿的责任完全推卸给父母。</p><p>▪ 人的责任是让自由意识来统辖他所属的这个既定世界;而为了赢得这个终极的胜利,最不可或缺的是:男人、女人要超越性别的自然差异,彼此切切实实地携手建立友爱情谊。</p><h1>Refs</h1><p><a href="http://rdbk1.ynlib.cn:6251/Qw/Paper/453187" target="_blank" rel="noopener noreferrer">他者-中国人民大学复印报刊资料</a></p><p><a href="https://m.huanqiu.com/article/9CaKrnJkq02" target="_blank" rel="noopener noreferrer">1955年，存在主义大师萨特在北京过国庆</a></p>]]></content:encoded>
            <category>philosophy</category>
        </item>
        <item>
            <title><![CDATA[赛里斯春节哲学: 回埃及记、逼婚、三劝进]]></title>
            <link>https://xigou.github.io/blog/2023/01/19/lunar-new-year-philosophy</link>
            <guid>https://xigou.github.io/blog/2023/01/19/lunar-new-year-philosophy</guid>
            <pubDate>Thu, 19 Jan 2023 09:35:04 GMT</pubDate>
            <description><![CDATA[前注：之前有部分读者向我询问赛里斯是什么意思，所以有必要解释一下，赛里斯代表的是丝绸，和瓷器一样是古代的中国最重要的贸易物资，所以赛里斯也指代中国，是一个比瓷器更优雅的名称。使用赛里斯指代中国, 最大的好处就是让自己获得了一个第三人称的视角, 在使用“中国”这个词汇的时候, 你潜意识内总会不忍心批判它, 生怕批判的火焰烧到自己的身上.]]></description>
            <content:encoded><![CDATA[<blockquote><p>前注：之前有部分读者向我询问赛里斯是什么意思，所以有必要解释一下，赛里斯代表的是丝绸，和瓷器一样是古代的中国最重要的贸易物资，所以赛里斯也指代中国，是一个比瓷器更优雅的名称。使用赛里斯指代中国, 最大的好处就是让自己获得了一个第三人称的视角, 在使用“中国”这个词汇的时候, 你潜意识内总会不忍心批判它, 生怕批判的火焰烧到自己的身上.</p></blockquote><p>再过几天，就是赛里斯人民最盛大的春节了，数亿的出生于乡村的赛里斯人会从四面八方回到自己的家乡，这些在城市里被异化了一整年的人，如果没有好的思想武器武装自己，回到那片土地，多半只能瞪大了眼睛好奇地打量周围的世界，多少有点格格不入。所以我想从几个最典型的议题入手，找出赛里斯乡村生活当中的一些形而上的东西，帮助大家武装自己的思想，从那些乡村生活中的瞬间体味出当中的趣味。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="归途-赛里斯人的回埃及记">归途: 赛里斯人的“回埃及记”<a href="#归途-赛里斯人的回埃及记" class="hash-link" aria-label="归途: 赛里斯人的“回埃及记”的直接链接" title="归途: 赛里斯人的“回埃及记”的直接链接">​</a></h2><p>对于许多人来讲，在春节期间回到家乡的路程，是遥远的、艰难的、痛苦的。数百到数千公里不等的路程，由硬座火车，飞机，高铁，黑车甚至是摩托车等一种或者多种交通工具接力完成，当然还少不了在寒风中等待下一程白天和夜晚。最近这些年由于家庭汽车保有量的上升，许多人甚至选择亲自驾车数千公里回家，这样的毅力确实让人佩服。</p><p>以色列人出走埃及是为了到达流着奶和蜜的土地，而赛里斯人踏上这么一段艰苦的旅程，却是为了到达一个更加贫瘠而无趣的地方，其中的很重要的一个原因就是被称为孝道的一种思想在指引着他们。这一思想让他们把那个一年只能居住七天的地方称为家，而过年需要回到家则是他们那绝对权威的父亲给他们下达的任务。即使他们回到家里也不过就是像蚂蚁一样漫无目的窜来窜去，和并不熟悉的亲戚尴尬的聊天，无休无止的暴饮暴食，绞尽脑汁搜刮着脑袋里为数不多的词汇拼凑出几句违心的并没有什么作用的冠冕堂皇的话语。沉浸其中的人，或许会时而兴奋时而沮丧，时而信心满满，时而坐立难安。而观察着这些的局外人，则如同看着一台喇叭坏掉的电视机里面的节目一般，感到滑稽。</p><p>但是回到家乡过年就真的一无是处吗？也不尽然。仔细观察位于农村的“家”: 有带庭院的房子、人与自然和谐相处的广阔空间、静谧的夜晚、过分热情而没有边界感的”土著居民“… 这一切和美国人在夏威夷购买的度假别墅是那么的相像. 所以只要你把这里也当成是属于你的夏威夷, 一切就变得充满趣味.  </p><p><img loading="lazy" src="https://imgur.com/1MvZBid.png" alt="Imgur" class="img_ev3q"></p><blockquote><p>图： 笔者在夏威夷山区度假</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="逼婚-浅论赛里斯的婚姻习俗">逼婚: 浅论赛里斯的婚姻习俗<a href="#逼婚-浅论赛里斯的婚姻习俗" class="hash-link" aria-label="逼婚: 浅论赛里斯的婚姻习俗的直接链接" title="逼婚: 浅论赛里斯的婚姻习俗的直接链接">​</a></h2><p>赛迪斯人的婚姻要分两个层面来看，一个是社会意义上的婚姻，使用婚礼作为其隐喻是再恰当不过的；另一个则是小家庭意义上的婚姻。</p><p>赛里斯人对于婚礼非常讲究，古代有三媒六聘、八抬大轿，吃席有几酥几扣凑出来的“十大碗”，处处都是讲究。现代社会以来，随着经济的发展，婚礼变得越来越浮夸，有搞得像演唱会一样的婚庆，就是为了满足那些从小看台湾偶像剧长大的女性脑袋里的不切实际的幻想；有游街示众的豪车车队，即使自己只买得起马自达，车队领头也必须是 BBA, 车辆的数目必须是双数, 在数公里甚至数十公里的迎亲的路上， 车队必须以小于交通法规规定的最小跟车距离紧紧跟着， 防止别人加塞，因为那样寓意着婚姻里第三者的出现。照着这个趋势发展下去，在未来的星际时代，一个平凡的午后， M78 星云的奥特曼家族正在吃着火锅唱着歌， 忽然来了八个 Space X 牌火箭， 箭头紧贴着前方火箭焰尾呼啸着冲过去，奥特曼家族如临大敌正准备发射光波武器反制，接通无线电信号后才发现是赛里斯人结婚了。</p><p><img loading="lazy" src="https://imgur.com/r8DPyKY.png" alt="Imgur" class="img_ev3q"></p><blockquote><p>图： 星际时代的赛里斯迎亲队伍概念图</p></blockquote><p>赛里斯人结婚的仪式这么讲究，那他们结婚之后一定很幸福吧？其实不然，因为他们对结婚的仪式很讲究，而对婚姻本身却没有太多的思考。</p><p>对于政治家来讲，美满的婚姻是树立自己良好公众形象的工具，所以有很多的政治家在自己的婚姻里面三心二意，却不愿意离婚；有个别的政治家因为特殊原因离婚了，也会想尽办法控制媒体，不允许报道他离过婚的消息。对很多随波逐流的普通人来讲，婚姻可以是人生的一个不容置疑的必须的任务；可以是“门当户对，强强联合，勇攀高峰，再创辉煌”的财富整合；对无数的父亲母亲来讲，子女的婚姻则是让他们免于遭受嘲笑的“防嘲垫”。在赛里斯人的眼里，婚姻是工具而不是目的，它可以是很多东西，但无论如何都不是婚姻本身。</p><p>每次一到春节前夕，所有的互联网媒体，都充斥着各种逼婚的段子或者新闻，也有不少人能够亲身经历父母的逼婚。为什么赛里斯的父母会这么热衷于逼婚？有很多种说法，诸如“惧怕被老伙计们嘲笑”、“想要传宗接代”之类的俗套的观点本文暂且不谈，我是一个不走寻常路的人，所以我今天就要来搞点歪理邪说，好好的剖析一下这里面的人物心理。</p><p>首先分析一下在逼婚这个行为当中父母的动机。父母实质上和子女的婚姻关系并不大，并不会从中收获太多正面的影响，很多父母在孩子的婚姻当中往往是出钱出力，最终被挂在豆瓣群组里面批判一番；有部分父母还会因为”掏空六个钱包“这类的社会新风潮而大亏一笔。为什么他们还热衷于这样一件吃力不讨好的事情？要弄清这个问题的答案，还得从赛里斯的传统文化入手，有句古话“养儿方知父母恩”，这句话含义非常丰富，首先他暗示了父母是带着希望你感恩他们的目的而生下你；其次等子女有了后代之后自然就会深刻的体会到父母的恩情。所以父母的逼婚，很可能是希望你尽快感恩。</p><p>养儿方知父母恩作为逼婚的理论基础这个观点，还有两个疑点。第一点是，为什么父母想让你报恩不是选择直截了当的告诉你，而是要拐弯抹角的通过逼你结婚这样一个大动作，来让你主动的感恩。这其实不难理解，赛里斯的文化永远在教导人们要被动地等待自己的幸福，而不是主动去追求，在赛里斯的西南地区有一句民间谚语叫“不请自来客”，描述的就是在别人没有邀请你的时候你就去吃席的场景，是一种很丢脸的行为。</p><p>第二个疑点是为什么子女在有了自己的后代之后，就会深知父母的恩情呢？要探究它的原因，首先我要追问的是一个人从不知道感恩到知道感恩这样一个转换发生的具体时间。“养儿”这一个词语是一个时间非常模糊的词汇，他指的到底是受精卵开始发育、胎儿分娩完成、还是指的小孩上幼儿园或者上了大学？这每一个时刻看起来都没有和知道感恩父母之间有什么非常强的关联。在苦苦思索很久之后，我才发现时间并不是这个转换的关键，养儿这样的一个词语，蕴含着一个身份的变化，当一个儿子结婚生子之后，他将会拥有一个父亲的身份 。而从不知道感恩转换到知道感恩的奇妙变化，就发生在这个新身份出现的时刻，在自己已经成为父亲之后，没有理由不去支持一个把感恩父亲作为纲领的理论。但同时又有一些奇怪的现象，这些同时拥有父亲和儿子两个身份的人，在作为父亲的时候，则满口是仁义道德三纲五常；在作为儿子的时候，就患上了失忆症，不再提感恩这样形而上的东西。在意识形态上，我们经常会提起一个词语叫“马克思主义的赛里斯化”，但事实上，应该是马克思主义来到赛里斯过后，大声地感慨“他乡遇故知”，这对立统一的思想，在赛里斯早就已经存在了数千年之久。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="三劝进赛里斯春节的至高哲学">三劝进：赛里斯春节的至高哲学<a href="#三劝进赛里斯春节的至高哲学" class="hash-link" aria-label="三劝进：赛里斯春节的至高哲学的直接链接" title="三劝进：赛里斯春节的至高哲学的直接链接">​</a></h2><p>在赛里斯的封建时代，有许多贵族想称孤道寡，但是又不好意思明说。一些善于揣摩上意的人，就会上劝进表。如果某人一收到劝进表就称帝，这样也会显得过于刻意，所以劝人当皇帝，有严格的程序，要三劝三辞，最终是盛情难却、万不得已才当了皇帝。我们用“三劝进”这个词语来代指这种有趣的现象。</p><p>那这个位于庙堂之上的“三劝进”，对于解释处江湖之远的老百姓的生活到底又有什么指导意义呢？如果社会是一个庞大的结构，那我愿意用分形几何来比喻它，分形是数学当中的一种美妙图形（也可以是基于集合论的更抽象的结构），它的特点是不管你如何放大，它的结构都是相似重复的。而我们的社会也是这样，大的层面上皇帝登基需要三劝进，再往下省长，县长，村长以及每一个个体都在践行这样一个至高哲学。</p><p><img loading="lazy" src="https://imgur.com/p8PS7Ws.gif" alt="Imgur" class="img_ev3q"></p><blockquote><p>图： The Mandelbrot Fractal， 被称为“上帝的指纹”的曼德勃罗集</p></blockquote><p>小时候，过年走亲戚的时候，明明我的父母在出发之前就已经盘算好了对方大概会给多少红包。但真到了给红包的时候，父母却教育我要再三的推辞最后收下。这几个来回的假惺惺的推辞和拉扯，和我直接欣然接受相比结果是完全一样的，但是过程上却浪费了无数的 ATP （一种细胞内能源物质）, 不知道得吃几口大米饭才能补回来。这对于整个社会来讲都是一个不经济的行为，而春节期间会集中爆发数十亿次的此类行为，如果把这些能量都节约下来，造一艘航母估计不成问题。</p><p>在赛里斯春节的饭桌上，有美酒有美食，在这个美好欢乐的氛围当中，小酌两杯是在所难免的。当开出一瓶好酒来的时候，大家明明都非常想认认真真品品它的味道，但是他们却不甘于共同举杯庆祝，而是要在这个餐桌上分出个三六九等，形成一个桌子上的帝国体系，等待着别人来敬酒。当别人倒酒的时候，无论你酒量如何，你都要不断的说 “够了够了够了，不要再倒了”，即使你知道最终还是会倒上满满的一杯，因为赛里斯有一句古谚语叫“酒满敬人，茶满欺人”。如何接受敬酒又是一门大学问，你要先皱着眉头说“你这话说的不好听，我不跟你喝”，等话语纠正过来又说“你这事儿做的不对，我不跟你喝”，最终来来回回推辞数次，两杯酒下肚，这场令人尴尬的表演才算结束。不过这一招只能对在家庭这个帝国当中处于你下级的人使用，如果你对位于你之上的人使用，那你就离被逐出家门不远了。</p><p>在上一个逼婚的话题当中，我尚未分析被催婚的人，也就是作为子女的到底是什么样的心态。一开始我以为他们对于逼婚是深恶痛绝，但是在看到互联网上发布的那么多的配着欢快的音乐，同时里面的人还嬉皮笑脸的短视频，我就知道事情不是那么简单。赛里斯人最大的一个特点就是口是心非，比起主动表达自己的意图，他们倾向于选择永远等待着别人来“三劝进”，他们用信奉不婚主义来掩饰着自己没有被爱的尴尬，他们在社交网站上留下“期待入室抢劫的爱情”这样搞笑的签名。而逼婚这个行为对于他们来讲就是劝进，想要主动去追求自己的爱情害怕被辜负，想要被爱又没有足够好的运气，年龄增大、朋友的减少和内心的贫瘠让他们困顿于孤独之中。对着父母的劝进，实际上他们是期待着的，期待着能够从天而降一个父母体制内、孩子开大奔、省城有套房的理想对象。但是在这从天而降的幸福到来之前，自己不能显得太配合太渴望，一定要遵循劝进哲学中的三劝三辞的基本原则。对于这种奇怪的现象，我这边建议过春节的时候还是多吃点菜，不要光喝酒。</p><p>Refs：</p><p><a href="https://zhuanlan.zhihu.com/p/157233723" target="_blank" rel="noopener noreferrer">"十大碗"最正牌的做法</a></p><p><a href="https://theconversation.com/spacex-vs-nasa-who-will-get-us-to-the-moon-first-heres-how-their-latest-rockets-compare-154199" target="_blank" rel="noopener noreferrer">SpaceX vs Nasa: who will get us to the Moon first? Here's how their latest rockets compare</a></p><p><a href="https://zh.m.wikipedia.org/zh-sg/%E5%88%86%E5%BD%A2" target="_blank" rel="noopener noreferrer">分形 - 维基百科，自由的百科全书</a></p><p><a href="https://chinadigitaltimes.net/chinese/564560.html" target="_blank" rel="noopener noreferrer">知乎专栏｜马伯庸：穿越回古代怎么写好一份劝进表</a></p>]]></content:encoded>
            <category>abstract</category>
        </item>
        <item>
            <title><![CDATA[2022年底随想]]></title>
            <link>https://xigou.github.io/blog/2023/01/02/annual-review</link>
            <guid>https://xigou.github.io/blog/2023/01/02/annual-review</guid>
            <pubDate>Mon, 02 Jan 2023 09:35:04 GMT</pubDate>
            <description><![CDATA[2022年结束了，我想我也应该写一点什么，纪念一下。比起那些年轻有为的人，我列不出长长的一串书单，一系列的项目成果，一堆的人生大事来展示自己这一年的精彩，我的人生过得颇为平淡，以至于我拿起笔的时候都不知道应该写什么东西。所以就这样吧，让我的思维随机游走，回忆一下自己这一年的一些思想碎片吧。]]></description>
            <content:encoded><![CDATA[<p>2022年结束了，我想我也应该写一点什么，纪念一下。比起那些年轻有为的人，我列不出长长的一串书单，一系列的项目成果，一堆的人生大事来展示自己这一年的精彩，我的人生过得颇为平淡，以至于我拿起笔的时候都不知道应该写什么东西。所以就这样吧，让我的思维随机游走，回忆一下自己这一年的一些思想碎片吧。</p><p>今年我辞去了我的第1份工作，从北京搬到了深圳。相对于北京，深圳有着更好的空气，更温暖的环境，更明媚的自然景色， 这一点令我很是喜欢。北方的冬天是漫长的，天空是阴霾的, 在小半年的时间只能看见枯黄的草和光秃秃的树枝，仿佛抽根烟就能把整个北京点了。这样的天气总是会让人感到压抑苦闷，来到深圳之后，我住在离海边只有一两公里的地方，每当无聊的时候我就会去看看海，金色的夕阳总是会让我感到放松。工作方面我并没有做出什么漂亮的成绩，我只能给自己打50分，希望以后能够更加努力一些吧。</p><p><img loading="lazy" src="https://imgur.com/UdBg2f7.jpg" alt="fore_bay_sunset" class="img_ev3q"></p><p>今年因为结石病，我体验了人生第一次全麻手术，一举达成了最高等级的孤独成就：独自一人做手术。其实也不完全是独自完成， 我的好友得知以后专程去医院照顾我， 但是因为核酸过期而被关在门外，手术后他新做的核酸结果出来了，得以进入病房陪伴了我一段时间，我真的真的非常感谢他，我会永远爱他。在医院排队等待手术的时候，由于止痛药的剂量不够，疼痛依然在折磨着我，而当时我已经一天一夜没有好好睡觉，处于崩溃的边缘。所以那是我今年第1次大哭，后来护士小姐姐给我加了更多的药，我才安稳的睡了一晚。那一刻我觉得我仿佛回到了婴儿的状态，只是单纯想要通过哭泣来表达自己的意图，我也意识到了，人在病痛面前会变得不堪一击。其实全麻手术的体验还是挺好的，麻醉药物进入静脉以后很快人就会和死去一样完全失去知觉，等再度醒来的时候，医生就已经完成手术了。在被麻醉之前，我一直在想，如果我不会再醒来的话，会因为什么而遗憾呢？想来想去也没有想到什么答案，药物生效让我停止了这个无聊的想法。</p><p>刚刚工作了一年多的我，生活就已经开始在痛苦和无聊之间反复摇摆了，今年一整年，我在steam平台只玩过两款游戏， CSGO和星露谷物语，游戏时长也非常的少，总体上我几乎没有怎么玩过游戏。每天的生活都是在重复，无休无止的重复，起床、上班、下班、睡觉，唯一能让我觉得完全属于我的时间，就是在上班和下班过程当中塞上耳机，听着自己喜欢的音乐的时刻。我的生活已经开始程式化了，我有一双鞋坏了，我就从网上直接下单购买了另一双一模一样的，感到最难受的时刻就是打开自己的购物记录里面发现曾经买过的衣服下架了，我又不得不花时间再去寻找一款自己喜欢的颜色布料的衣服。</p><p>在通信方式上面，我尽量减少了对社交网络的依赖，不再去频繁的更新朋友圈，因为发朋友圈就是为了满足自己的一个分享的欲望，这个行为可以粗略分为把信息发出去和信息被别人看到这两个阶段，实际上我的分享欲望在我把信息发出去的一刻就已经满足了，而科技公司把我分享的东西推送给不知道是否愿意看的人，这个过程不是我能掌控的。所以我选择开了一篇<a href="https://xigou.simple.ink/moments-c16c997ac14a42a4aefb108a081b9b7d" target="_blank" rel="noopener noreferrer">笔记</a>，来记录我任何想分享的碎片信息，我只完成分享这样一个动作，而别人是否看见，别人的反应是如何？我不再在乎。我最近重拾了邮件作为联系方式，交了一些能够通过邮件联系的朋友，我很喜欢这种方式，比起加好友、查户口、约吃饭、索然无味、删除...这种被科技催化加速的沟通方式，邮件让人与人之间的沟通变得慢了下来。发送邮件这么一个过程中产生的信息都是经过一定程度的思考的，在思考如何组织文字的过程当中，也是在整理自己的思绪，这样的交流比起一秒10条掺杂着表情包的即时通讯信息有着更高的质量。</p><p>今年必须记录的事情, 就是众所周知的荒谬大事件。在做了整整八个月的核酸之后, 我打算好好写写日记, 准备整个系列文章出来记录一下这些生活里的美好细节, 为此我还专门修理好了我的博客，收集了很多可以好好写写的素材, 结果刚发了没几篇, 我所乘坐的大巴车就来了个361度漂移大转弯, 而我则如同加缪一样因为没系安全带被甩出了车外（1960年1月4日，46岁的加缪没有系安全带被甩出车外，因车祸死亡） . 我曾经问朋友: 假设你对面是一个不了解荒谬为何物的人, 能不能用我这个理科生熟悉的三段论, 定义一下加缪所说的荒谬是什么? 他告诉我不能抱着这样的过分的理性思维来阅读加缪. 而在今天这个问题显然已经得到了完美的解决, 倒不是说我想出了一个绝妙的答案, 而是这一通操作已经让荒谬的观念深入人心, 在赛里斯已经找不到不懂得荒谬为何物的人了, 这个问题的前提已经不成立了, 自然就失去了讨论的价值.</p><p>今年我彻彻底底的爱上了加缪，因为我从小到大对于自己的生活一直都有着一种奇怪的不自在的感觉，我一直不知道应该如何描述那种感觉。现在我知道了，那就是生活的荒诞，那也是因为我是自己生活完完全全的局外人。我几乎无法真正地融入任何圈子，我总是觉得自己是孤独的，即使和很多人在一起的时候，我也觉得自己是孤独的。当我第一眼看见加缪的照片的时候，我就爱上了他的眼神，如果让我许愿的话，我希望某一天我也能够拥有他那样的眼神。</p><p><img loading="lazy" src="https://imgur.com/OjsczN0.jpg" alt="Camus" class="img_ev3q"></p><p>生活不会因为新的一年开始就自动做出任何改变，在过去的一年当中感受到的那些荒诞，新的一年依然会重复。客观世界的重复就像一台巨大的运转着的机器，其实我没有办法去作出什么改变，也许我应该从自己的意识入手，改造改造自己的思想，试着从这重复和单调的世界当中去看出点有趣的东西，更应该有意识地留下更多自己的思考的痕迹，随着年龄的增大，我越来越害怕自己这个自己生活的局外人，完全忘记了自己的生活，回忆的时候只能看见一片空白。</p>]]></content:encoded>
            <category>Annual Review</category>
        </item>
        <item>
            <title><![CDATA[长者死了, 我的青年时代也死了]]></title>
            <link>https://xigou.github.io/blog/2022/11/30/jiangzemin-dead</link>
            <guid>https://xigou.github.io/blog/2022/11/30/jiangzemin-dead</guid>
            <pubDate>Wed, 30 Nov 2022 09:35:04 GMT</pubDate>
            <description><![CDATA[今日下午, 我如往常一样正在麻木地搬着砖, 天气阴沉着, 因此砖头给我的手带来的触感有些许凉爽, 忽然传来长者死了的消息, 我放下砖头, 坐到一旁怅然若失。]]></description>
            <content:encoded><![CDATA[<p>今日下午, 我如往常一样正在麻木地搬着砖, 天气阴沉着, 因此砖头给我的手带来的触感有些许凉爽, 忽然传来长者死了的消息, 我放下砖头, 坐到一旁怅然若失。</p><p>你们听到的消息也许是“敬爱的、伟大的、逝世” 等颇具政治高度的词汇,  而对于我来讲, 他和这个地球上任何智慧生灵必须经历的完全一样: 神经系统失去感知能力, 组织器官逐渐失效, 微生物开始分解他的躯体, 他一点点地变成了各种气体、液体、固体, 回到孕育他的大自然。简单来说他就是“死”了。  对于一个唯物主义者、一个共产主义战士, 你给他加再多华丽的头衔都不如实事求是地描述一件事情能够令他感到欣慰。</p><p>江泽民先生一生都在追求平等。 中国在他的统治之下, 从计划经济转变为市场经济, 农民可以自由地进入城市,  属于中国人特有的种姓制度一定程度上被废除; 他发起了“三年大下岗”活动, 减少了铁饭碗的配额, 一鲸落而万物生, 此后的中国民营经济百花齐放, 体制内外获得了更进一步的平等;  在军事外交上, 与世界主要大国和睦相处、互惠共赢, 带领中国加入了 WTO , 致力于中国人民和世界人民的平等。 1986年, 在面对集会抗议的学生时, 他当众背诵了美国总统林肯在葛底斯堡发表的著名演说, 而那一句 “ All Man Created Equal ”则暗示了他已经将平等当成了他一生的追求。 今天, 这个追求平等的人的一生画上了圆满的句号, 因为法国作家维克多·雨果曾说过“死亡是伟大的平等,也是伟大的自由”, 无论一个人的一生是成功或是失败、是幸福还是痛苦, 死亡对于他来讲都是平等的、无法避免的。</p><p>江泽民先生是我整个青年时代的精神导师, 他的视频我倒背如流, 他的书籍和语录早已经在我的大脑中形成了特定结构的神经突触, 他在我的人生中担任了某种类似教父的角色。 在大学时期, 比起名气更响亮的肯德基和麦当劳, 我吃快餐只会去华莱士, 因为他说过 “美国的华莱士, 比你们不知高到哪里去了”;  电子游戏方面, 我只玩超级玛丽, 因为只有这里面的游戏角色能把裤腰带提到胳肢窝; 在阅读专业技术文献的时候, 我会尽量阅读英文原版, 因为在1999年12月31日，江泽民在组织家族聚会欢度千禧年时，对家人提出了要求: 所有人, 不论长幼都必须会说英语。人们总以为我这些类似行为艺术的行为, 是在调侃他, 讥讽他, 只有我自己才知道, 这一切都源于我对他深沉的爱。</p><p>我爱他的幽默风趣, 自信豁达 。 不管你是一个政治家还是一个打工仔, 你总会有被质疑的时候, 当江泽民在面对香港记者张宝华的质疑他钦定香港特首时, 他没有像其他的政治家那样顾左右而言他或者用假大空的官话傲慢回应, 而是用中文、英文、粤语、手语四种语言做出了精彩的陈辞, 香港记者在听完后心服口服。 关于英语学习，他曾说 “ I think I speak very poor English, but anyway I dare to say. This is very important”，每次在我因为自己的农民英文口音而不敢开口说话时，他说出这句话时自信的笑容总是能够激励我大胆地说出来。在出访夏威夷的时候, 为了活跃酒会的气氛, 他主动请缨弹奏起了夏威夷吉他, 我看完资料片后, 不能说是听到了什么天籁之音, 只能说是听了个响, 但是这却让我更加喜欢他了, 在一个世界名流组成的酒局里面, 他没有害怕出糗, 而是开心地用不太熟悉的弹奏技术为大家助兴, 这体现了他的风趣、自信, 这正是近年风靡全球的日本心理学畅销书籍《嫌われる勇気》中所推崇的人生态度。</p><p>我爱他大公无私, 心系苍生。 1998年, 中国发生了大洪水, 无数的中国人民的生命和财产处在威胁之中, 他本可以学习那些腐败的西方国家的政治家, 在电视上发表一次精心准备的虚情假意的演讲, 然后派出消防部门象征性地营救几天, 自己则作壁上观, 继续享受荣华富贵。  但是他没有, 他冒着生命危险奔赴一线， 亲自指挥部署抗洪救灾， 在大雨中， 在泥泞的大坝上， 没有补光灯没有音响和麦克风， 他拿着现在你只能在收废品的三轮车上看到的简陋的扩音喇叭， 发表了振奋人心的演说：</p><blockquote><p>我们要坚决地坚持到底，坚持奋战，坚持再坚持！我们就一定能够取得最后的胜利。</p><p>我们中华民族是有着很强的凝聚力，任何的困难都压不倒我们。中国人民是不可战胜的！</p></blockquote><p>文字或许读起来很普通， 但是在我听过了那一段录音以后， 那个声音就一直在我脑海里回荡， 每当我学习生活中遇到困难， 这些话总是在激励着我前进。</p><p>我爱他博学多识, 求知若渴，他精通八国语言， 出访世界各地的时候， 总是能够用当地语言向当地人民送去问候， 向世界展示了一个包容的中国形象，他还录制了美国新闻节目 60 Minutes，在节目中与著名记者华莱士对答如流；上海任职期间，他在少年宫里谈论莫扎特和舒曼，和中学生讨论蒙娜丽莎和莫奈的光线， 有人批评他学习西方文化是“放洋屁”，意指他应该推崇中国文化而不是西方文化， 但是我认为他接纳一切优秀文化的态度， 恰恰展现了中国文化最自信的一面。2008年，已经卸任国家领导职位的江泽民，在中文核心期刊《上海交通大学学报》分别发表了两篇学术论文《对中国能源问题的思考》和《新时期我国信息技术产业的发展》，其中一篇强调了清洁能源的重要性，另一篇则指出了中国信息产业在芯片方面的先天残疾， 如今 A 股的芯片和新能源两条赛道的火热、华为事件、中美贸易战无一不印证了其高瞻远瞩， 即使是瑞典环保主义者 Greta Thunberg 在他面前也只能说一句： Sir, You Deserve It !</p><p>他死了, 我也变成了一个年近三十的麻木不仁的中国人, 现在的我看到美国马里兰州大巴侧翻受伤的27人、那些在澳大利亚山火中死去的许多只考拉、那些在拉面店里被食客夹出来丢弃在桌子上的香菜, 看到他们被抛弃被伤害，我再也没有想为他们做点什么的冲动了。我开始向生活中的荒诞屈服， 因为我没有江泽民先生那么幸运, 一生怀着热血和赤子之心, 我只是一个在时代的洪流中随波逐流自身难保的废物,  我的青年时代和我周围世界的青年时代, 都随着他一起死掉了。 </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="refs">Refs：<a href="#refs" class="hash-link" aria-label="Refs：的直接链接" title="Refs：的直接链接">​</a></h2><p><a href="https://www.hndnews.com/p/534152.html" target="_blank" rel="noopener noreferrer">美国马里兰州一大巴车发生侧翻 导致27人受伤</a></p><p><a href="https://github.com/yehwaipak/moha" target="_blank" rel="noopener noreferrer">https://github.com/yehwaipak/moha</a></p><p><a href="https://www.youtube.com/watch?v=8btQ8jbTJ-0" target="_blank" rel="noopener noreferrer">【罕见】江泽民视察上海：和中学生探讨莫奈的画作，达芬奇《蒙娜丽莎》提出光线透视【唯一完整版本】长者考察上海浦东</a></p><p><a href="https://www.youtube.com/watch?v=Yn5Kgk8LYNs" target="_blank" rel="noopener noreferrer">江泽民主席 『不是莫扎特 是舒曼』</a></p><p><a href="https://www.dswxyjy.org.cn/n1/2019/0228/c425426-30909749.html" target="_blank" rel="noopener noreferrer">从两篇论著看江泽民关于能源和信息技术的战略思考</a></p><p><a href="https://zh.m.wikiquote.org/zh-sg/%E6%B1%9F%E6%B3%BD%E6%B0%91" target="_blank" rel="noopener noreferrer">江泽民 - 维基语录，自由的名人名言录</a></p><p><a href="https://www.youtube.com/watch?v=tU5OIVEv0wg" target="_blank" rel="noopener noreferrer">【2022高清重置】江泽民主席怒斥香港记者，图样图森破，NAIVE, TOO YOUNG TOO SIMPLE 身经百战，和华莱士谈笑风生 #江泽民 #长者 #膜蛤 江泽民香港发飙</a></p><p><a href="https://www.youtube.com/watch?v=20VGUzUPwCw" target="_blank" rel="noopener noreferrer"></a></p><p><a href="https://www.youtube.com/watch?v=h_a_X9N_jhY" target="_blank" rel="noopener noreferrer">時任中共上海市委書記江澤民，在上海電視台英文台現場。用英語向觀眾講話（諸位覺得長者的英語如何）</a></p><p><a href="https://www.youtube.com/watch?v=pLXAVRFDZb8" target="_blank" rel="noopener noreferrer">江泽民长者的人生十大巅峰时刻！！ 姿势水平高 谈笑风生 身经百战 见得多了 #膜蛤 #蛤丝</a></p>]]></content:encoded>
            <category>Politics</category>
        </item>
        <item>
            <title><![CDATA[Open Source Project Review: Convert command line to Web App with Wooey]]></title>
            <link>https://xigou.github.io/blog/2022/11/19/convert-cmd-web-wooey</link>
            <guid>https://xigou.github.io/blog/2022/11/19/convert-cmd-web-wooey</guid>
            <pubDate>Sat, 19 Nov 2022 09:35:04 GMT</pubDate>
            <description><![CDATA[There is a problem always annoying the software developer: How to deliver your software to your user?]]></description>
            <content:encoded><![CDATA[<p>There is a problem always annoying the software developer: How to deliver your software to your user? </p><p>Recently, I wrote a tool for internal use,  It is implemented in Python , and packaged as a command line program, I think it is esay enough for me to use, but the reality is cruel,  not all the target user have technical background, the feedback is they all think it is hard to use it. when they need to use it, they would definitely asking me to support them again and again,  so the software I developed became a nightmare of mine.</p><p>I have to think about what is best way to deliver software to end user, if you are working om a big project you don't need to think about this, because their softwares are complicated and have a very mature deploy or delivery pipeline, you just working on a narrow stage of this  pipeline. But I have to, now.</p><h1>What Makes Command Line Tool Hard to Use?</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="complicated-dependencies">Complicated Dependencies<a href="#complicated-dependencies" class="hash-link" aria-label="Complicated Dependencies的直接链接" title="Complicated Dependencies的直接链接">​</a></h2><p>Some colleagues cannot even install it, because the user enviroment are different, and my tool depends on a Python3.7 and some Pypi packages, cause Python3.7 is not the default python version for most linux distributions, so the user need to install it by themselves, it is a hard task for user without a technical background.
This issue is easy to resolve, docker is a powerful weapon deal with the dependencies, I packaged my tool into a docker image with all the dependencies in, then I just need to told the user how to download the image and run it.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="has-no-graphical-user-interface">Has No Graphical User Interface<a href="#has-no-graphical-user-interface" class="hash-link" aria-label="Has No Graphical User Interface的直接链接" title="Has No Graphical User Interface的直接链接">​</a></h2><p>It's already 21st century now, Most people living in this century don't have a chance to use the command line. Many software deliver with a cross platform and user-friendly GUI, Software as-a Service is the main-stream delivery pattern, you don’t even need to install a software, you can just open a Web page and start to use it.  So the best choice is to provide a GUI with my command line tool, It would be better to provide my Command Line as-a Service.</p><h1>How to Convert Command Line to Web App</h1><p>So what we need to do now is clear: Convert command line to Web App.</p><p>But how to do it? As experienced software engineer, you may open your flowchart drawing software and the start to design the architecture of a backend and front-end separated software architecture, you should choose a database: relational or documentary oriented, you must choose a backend programming language: Node.js or Python, you need to write a restful API by youself, finally you also need to implement a GUI As a Single-paged WebApp or Desktop GUI.</p><p>It sounds like a struggling work, and I refuse to do this, I need to find an easy way to achieve this goal: convert our command line to a web application, and the user can just click to set the arguments of the command line and the click submit button to run the tool. The most important thing is we don’t need to write too much code.</p><h1>Wooey: A Script Server Matches All Our Needs</h1><p>I searched on the internet and tried many projects. Finally I found it, it's Wooey.</p><p><a href="https://github.com/wooey/wooey" target="_blank" rel="noopener noreferrer">https://github.com/wooey/wooey</a></p><p>The command line tool is something like this, you can run it through the shell with specified arguments, and you can press Enter to execute it, the program will run for sometime and generate some file or print something to the console.</p><p>Firstly we package it into a docker image, just makes the command line can run anywhere, and the user don't need to worry about the dependencies</p><p>The Wooey introduced itself as “a simple web interface to run command line Python scripts”, through Python we have the ability to run any command line program which installed inside operating system, if we write a script as wrapper for our command line and upload it to the wooey server, it will automatically transform our script to a Web App, that is what we all need!</p><h1>Step By Step Solution</h1><p>To keep things simple, assume your command line tool is equivalent to shell commands below:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">sleep</span><span class="token plain"> </span><span class="token number">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token builtin class-name" style="color:rgb(189, 147, 249)">echo</span><span class="token plain"> </span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">$text</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">touch</span><span class="token plain"> </span><span class="token variable" style="color:rgb(189, 147, 249);font-style:italic">$file</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>the arguments are text and file, this “command line” will sleep 10 second, then echo the text and create an empty file.</p><p>We write a simple script to wrap it as a Python command line program:</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)"># file name is wooey_entry_cmd.py</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> argparse</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> subprocess</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> sys</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">parser </span><span class="token operator">=</span><span class="token plain"> argparse</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ArgumentParser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">description</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"my cmd tool."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">parser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">add_argument</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"--text"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">help</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"anything"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">type</span><span class="token operator">=</span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> default</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"nothing"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">parser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">add_argument</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"--output"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">help</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"file name"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">type</span><span class="token operator">=</span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> default</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"output"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">main</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    args </span><span class="token operator">=</span><span class="token plain"> parser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">parse_args</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    subprocess</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">run</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"sleep"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"10"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    subprocess</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">run</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"echo"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> args</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    subprocess</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">run</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"touch"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> args</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">output</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> __name__ </span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"__main__"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    sys</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">exit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Then we write the Dockerfile to package our command line tool and the wooey project toghter as a docker image, and convert our Python script to a Web App through the wooey provided tool.</p><div class="language-Dockerfile codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-Dockerfile codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">FROM python:3.7 as cmd</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"># install you command tool here</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"># we use linux pre installed command, skip this</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">FROM cmd as wooey_ui</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">WORKDIR /cmd2web_wooey</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">RUN pip3.7 install wooey \</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    &amp;&amp; wooify -p cmd2web_wooey</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">COPY ./wooey_entry_cmd.py ./cmd2web_wooey/wooey_entry_cmd.py</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">COPY ./start_wooey.sh ./cmd2web_wooey/start_wooey.sh</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">RUN cd cmd2web_wooey \</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    &amp;&amp; sed -i "s/ALLOWED_HOSTS = \[\]/ALLOWED_HOSTS = \[\'\*\'\]/" ./cmd2web_wooey/settings/django_settings.py \</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    &amp;&amp; python3.7 manage.py addscript ./wooey_entry_cmd.py</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">WORKDIR /cmd2web_wooey/cmd2web_wooey</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ENTRYPOINT ./start_wooey.sh</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"># port 8000 listening inside container</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In the Dockerfile, we specified the entrypoint as ./start_wooey.sh, and it is used to start the wooey project, it is just copied from the wooey document. The content of it is below:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token shebang important">#! /bin/bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">nohup</span><span class="token plain"> celery -A cmd2web_wooey worker -c </span><span class="token number">3</span><span class="token plain"> --beat -l info </span><span class="token operator">&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">python3.7 manage.py runserver </span><span class="token number">0.0</span><span class="token plain">.0.0:8000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>I must point out that I run celery inside the same docker container with the wooey server, and I changed the setting of Django project to accept any host, these are all bad practices and not safe at all. Considering my command line tool is for internal use, I don’t care about security issues.  </p><p>The docker image building command is:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">docker</span><span class="token plain"> build -f Dockerfile --target wooey_ui -t cmd2web_wooey </span><span class="token builtin class-name" style="color:rgb(189, 147, 249)">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>That’s all we need to do, we now have a docker image provide our Command Line as-a Service. We can run a container from this image as a daemon server through command bellow:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">docker</span><span class="token plain"> run -d -p </span><span class="token number">8000</span><span class="token plain">:8000 cmd2web_wooey:latest</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now we can assess our Command Line WebUI in browser through http://IP:8000</p><p><img loading="lazy" src="https://imgur.com/JlRaGqx.png" alt="Imgur" class="img_ev3q"></p><p>Click the “wooey_entry_cmd” script, that is the name of our python command line script, then set the arguments through the WebUI, click “submit” to run the command.</p><p><img loading="lazy" src="https://imgur.com/OiGSCKa.png" alt="Imgur" class="img_ev3q"></p><p>Wait a moment, and we can get the console output and the generated empty file from the result.</p><p><img loading="lazy" src="https://imgur.com/ykgGckZ.png" alt="Imgur" class="img_ev3q"></p><p>code of this post are published on: </p><p><a href="https://github.com/XiGou/cmd2web_wooey" target="_blank" rel="noopener noreferrer">https://github.com/XiGou/cmd2web_wooey</a></p><p>Refs:</p><ol><li><a href="https://wooey.readthedocs.io/en/latest/running_wooey.html" target="_blank" rel="noopener noreferrer">https://wooey.readthedocs.io/en/latest/running_wooey.html</a></li><li><a href="https://github.com/adamkewley/jobson" target="_blank" rel="noopener noreferrer">https://github.com/adamkewley/jobson</a></li></ol>]]></content:encoded>
            <category>Software Practice</category>
        </item>
        <item>
            <title><![CDATA[真正的核酸爱好者：一天做五次]]></title>
            <link>https://xigou.github.io/blog/2022/11/13/finish-5-covid-test-in-one-day</link>
            <guid>https://xigou.github.io/blog/2022/11/13/finish-5-covid-test-in-one-day</guid>
            <pubDate>Sun, 13 Nov 2022 09:35:04 GMT</pubDate>
            <description><![CDATA[Vlog-I Finished 5 Covid Test in One Day!]]></description>
            <content:encoded><![CDATA[<p><a href="https://youtu.be/zQoC9WkE0TE" target="_blank" rel="noopener noreferrer">Vlog-I Finished 5 Covid Test in One Day!</a></p><p>在西方世界的视角中， 人是由细胞构成的， 所以新冠病毒会损害你的身体健康。</p><p>但是在我们的视角中，根据伟大导师马克思的观点，人是一切社会关系的总和， 如果你感染了新冠病毒，你的社会关系被被毁灭。你的生活方式将会被放在网上被批判，你必须离开自己的家， 坐上大巴去隔离营地。</p><p>综上所述， 新冠病毒是一个令人恐惧的病毒。</p><p>但是好消息是， 我们有对抗病毒的强大武器： 核酸检测。但是我最近观察到互联网上有很多抱怨核酸检测的声音， 很多人不愿意做核酸，真是令人遗憾的消息。</p><p>我非常喜欢做核酸， 我可以三个月不吃战斧牛排， 但是我不能一天不做核酸，所以我决定一天完成五次核酸检测，来鼓励大家爱上做核酸。</p><p>In the view of Western world, human are made up of cells, so the Coronavirus can damage your health.</p><p>But in our perspective, according to the great teacher Marx, man is the ensemble of all social relations, so if you get infected by the Coronavirus, your social relations will be destroyed. Your lifestyle will be criticized on the internet, you have to leave your home, get on a bus and be sent to a quarantine camp.</p><p>So, the Coronavirus is a horrible virus.</p><p>The good news is that we have a powerful weapon in the fight against the virus: covid test. But I've recently observed a lot of complaints on the Internet about covid test, and it's sad news that many people don't want to do it.</p><p>I love doing covid test so much,  that I can spend three months without eating a Tomahawk steak, but I can't spend a day without doing civid test, so I've decided to complete five covid test in one day to encourage people to fall in love with covid test.</p><p>生活中充满着失望，有太多你很努力去做又没有得到结果的事情， 相比起来，做核酸检测就是一件美好到极致的事情，只要你做， 就一定有结果。所以当你不知道做什么的时候，就去做核酸吧！</p><p>Life is full of disappointments，There are so many things in life that you try very hard to do and don't get results, but compared to that, covid test is a wonderful thing, if you do it, you will get result. When you don't know what to do, just do COVID Test !</p>]]></content:encoded>
            <category>abstract</category>
        </item>
        <item>
            <title><![CDATA[现代生活中的规训与惩罚]]></title>
            <link>https://xigou.github.io/blog/2022/11/05/Foucault-Discipline-and-Punish</link>
            <guid>https://xigou.github.io/blog/2022/11/05/Foucault-Discipline-and-Punish</guid>
            <pubDate>Sat, 05 Nov 2022 12:36:04 GMT</pubDate>
            <description><![CDATA[自从离开学校之后, 我的耐心越来越少了, 没有了大把的自由而无用的时间, 我很久都没有看过一本人文书籍、完整地看完一部电影, 甚至是我曾经省吃俭用买来的游戏也不曾打开来仔细品味. 近来在友人的推荐之下, 耗费了一个周末, 阅读了这本米歇尔·福柯的《惩罚与规训》.  作为一本近代著名哲学家所著的书籍， 要为其写一篇严肃的读后感可能要达到一篇本科毕业论文的工作量， 此外已经有很多人做过类似的事情， 我就不再重复了，我想结合自己生活中的所见所闻谈谈书中的一些内容。]]></description>
            <content:encoded><![CDATA[<p>自从离开学校之后, 我的耐心越来越少了, 没有了大把的自由而无用的时间, 我很久都没有看过一本人文书籍、完整地看完一部电影, 甚至是我曾经省吃俭用买来的游戏也不曾打开来仔细品味. 近来在友人的推荐之下, 耗费了一个周末, 阅读了这本米歇尔·福柯的《惩罚与规训》.  作为一本近代著名哲学家所著的书籍， 要为其写一篇严肃的读后感可能要达到一篇本科毕业论文的工作量， 此外已经有很多人做过类似的事情， 我就不再重复了，我想结合自己生活中的所见所闻谈谈书中的一些内容。</p><p><img loading="lazy" src="https://imgur.com/0iMw8C8.jpg" alt="1974年时的福柯" class="img_ev3q"></p><p><em>1974年时的福柯</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="从车裂到注射死刑酷刑为什么消失">从车裂到注射死刑：酷刑为什么消失？<a href="#从车裂到注射死刑酷刑为什么消失" class="hash-link" aria-label="从车裂到注射死刑：酷刑为什么消失？的直接链接" title="从车裂到注射死刑：酷刑为什么消失？的直接链接">​</a></h2><p>在这本书的开篇就细致地描述了一个残忍的酷刑场面：</p><blockquote><p>行刺国王的达米安“被送到格列夫广场，那里将搭起行刑台，用烧红的铁钳撕开他的胸膛和四肢上的肉，用硫磺烧焦他持着试君凶器的右手，再将熔化的铅汁、沸滚的松香、蜡和硫磺浇入撕裂的伤口，然后四马分肢，最后焚尸扬灰”。</p></blockquote><p>在如今，再也没有了在人声鼎沸的菜市口砍下一个鲜活的头颅的场面，资本主义国家认为这是人性的胜利，基督教徒认为是神的博爱也惠及犯罪的人，社会主义国家认为这是社会主义制度以人为本的优越性。这些观点都是唯心的片面的，福柯在他的书里面仔细剖析了这其中的原因。</p><p>上述酷刑有两个比较关键的特点，第一个是惩罚过程是公开的，而第二个则是惩罚的目标是肉体，而在现代的刑罚当中这两点都消失了。</p><p>关于“公开”的消失, 作者提到了一个非常滑稽、令我实在是绷不住而又深有体会的原因：君主选择公开执行残酷的刑罚，为的是向人们彰显自己的权力。但是罪犯在明知道自己即将死亡的时候，往往会肆无忌惮的咒骂君王，而有很多人来围观这一场残忍的行动，就是为了在这个时刻发出响亮的喝彩，来表达对君王的不满。这个时候,这个被公开处决的死刑犯,成为了那些心怀不满的人民的“嘴替”。 所以当权者企图让人民更自己一起谴责挑战权力的犯罪行为是危险的， 相比而言让他们忘记是一种更安全的选择。</p><p> 这一点在我们的社会上是可以真真切切的感受到的，例如近年发生的欧金中灭门案件，因为在村子里长期受到基层官员亲友团体的欺压，欧选择了杀掉邻居一家。案件发生以后互联网上面的声音是值得玩味的，人们称呼犯下杀人罪的欧为勇士。当地政府发动大量的人员漫山遍野的寻找他的踪迹，互联网上所有人都在祈祷他还活着，想听他站出来向公众诉说他的冤屈。最终欧的尸体被找到时，网友们一致表示当地政府官员都松了一口气。其实我作为一个旁观者我也不知道欧到底是一个好人还是一个坏人，但是在当前的语境之下他是什么人完全不重要，我从当中看到的是大多数人认为欧杀死横行霸道的基层官员亲戚，是侠义之举，大多数人都在借着欧的行为，或者是他们想象出来的欧的行为，来表达自己对于基层管理者的不满。由此可见，让人们聚在一起公开讨论犯罪行为是一件多么危险的事情。后续发生的唐山打人事件，同样在互联网上掀起了巨大的讨论热潮，人们谈论的其实并不是唐山，而是那些小城市看不见的角落里黑暗的事情。这一次的不同之处是罪犯没有死亡，后续进行了审理判决等司法的流程，但是比较异常的是热度如此之高的一件事情，发出来的媒体报道确实非常少的。媒体对于如此受到大众关注的事情，自然是应该投入更多的精力去报导的，如果没有特殊的力量去干预而呈现出这样的现象，那显然是不合理的。其实他们很聪明，他们知道让你们忘记比让你们讨论更安全，正如1984里面那句经典的名言“无知即力量”，这里的无知不是没文化，他对应的英文单词是ignorance， 翻译成“忽视即力量”也许是更贴切的.</p><p>而关于“肉体”的消失, 是因为随着社会生产关系的变革，社会需要自由的肉体，所以国家这个暴力机器它的统治对象也逐渐的从肉体变成了精神，惩罚的对象自然也从肉体之间的转换成了精神。关于这一点书中的原文给出了非常精辟的表述：</p><blockquote><p>愚蠢的暴君用铁链束缚他的奴隶，而真正的政治家则用奴隶自己的思想锁链更有力地约束他们。最坚固的帝国的不可动摇的基础就建立在大脑的软纤维组织上。</p></blockquote><p>统治你的思想最有效的方式就是规训，规训是本书最核心的专业名词，他通过各种各样巧妙的手段，让你自认为自己的思想是自由的，但你早已进入他的圈套之中，被他们成功规训和统治。</p><p>了解了这一点之后，你就更加理解为什么你一会需要学习这个精神，一会就需要学习那个精神，明明你根本就没有在学，明明你就只知道那个精神的名字，明明你的会议感悟都是从网上抄的，你交上去也不会有人看，但他们依然要你这样做，因为他们深知统治精神的重要，但是又苦于科技所限没能发明出精神注射器，才不得已而为之。抖音、今日头条这些“奶头乐”的信息流的出现， 让人类离发明精神注射器这样一个伟大的东西又近了一步，有学者认为群体是无意识的， 但是有了这样的精神注射器之后，只需要在你的信息流当中按比例的添加一些左倾的信息，你就会变成一个左人；我给你加点向右的信息,你就会变成一个右人；你以为你的想法很重要，但你不过是推荐算法的奴隶而已。这警醒了我们在获取信息的过程当中“主动”的重要性。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="全景敞视主义我们大多数人都生活在监狱里">全景敞视主义：我们大多数人都生活在监狱里<a href="#全景敞视主义我们大多数人都生活在监狱里" class="hash-link" aria-label="全景敞视主义：我们大多数人都生活在监狱里的直接链接" title="全景敞视主义：我们大多数人都生活在监狱里的直接链接">​</a></h2><p>既然惩罚的方式从野蛮的屠杀变成了文明的监狱，那么如何设计一座监狱建筑则是一个需要讨论的话题。监狱绝对不是随意建造成任何形式都可以的，不然你可以闭上眼睛想象一下在监狱里面盖上老北京的四合院、日本的一户建和美国的前后草坪小别墅，那画面多少有一些抽象。建立监狱的目的是为了规训犯人，那什么样的建筑能够更好的完成规训呢？在书中提到了一种英国哲学家杰里米·边沁设计的完美监狱，在四周修建一个圆形的建筑关押犯人，而监狱的中心是一座高塔。这个看起来丑陋而失败的建筑，其设计核心在于监视，坐在高塔里的人可以监视每一个犯人，而犯人不知道自己是否正在被监视，但他确切的知道高塔上的人可以监视自己，这样一种被监视的阴影促使他规范自己的行为，也就是被规训。这一建筑的设计理念是：</p><blockquote><p>纪律的实施必须有一种借助监视而实行强制的机制。在这种机制中，监视的技术能够诱发出权力的效应，反之，强制手段能使对象历历在目。</p></blockquote><blockquote><p>权力应该是可见的但又是无法确知的</p></blockquote><p><img loading="lazy" src="https://imgur.com/jMWPAp9.png" alt="在**古巴**青年岛特区新赫罗纳的圆形监狱" class="img_ev3q"></p><p><em>在<strong>古巴</strong>青年岛特区新赫罗纳的圆形监狱</em></p><p>仔细审视我们自己的生活，我们的学校、我们工作的写字楼, 虽然外观上和书里提到的那种造型奇特的监狱不一样，但它的功能上却是相似的。老师站在高出地面几十厘米的讲台上，为的就是能够监视到每一个人；在赛里斯的国企和政府单位当中，职位高标志就是拥有独立办公室，这些企业和单位都知道被监视是一种痛苦，而职位的升高可以让你拥有豁免这种监视的福利；在使用互联网的时候，并没有规定什么词语是不能使用的，但一旦你使用了那一个词语，你就会被封号禁言处罚，这就像你不知道那个中心高塔里的人是否正在看你一样，如果你知道他什么时候在看着你，那你只需要在他看着你的时候规范自己的行为就足够了，而当你不知道他什么时候在看着你，你笼罩在被监视的阴影之下一刻也不敢放松。</p><p>我还想举出一个特别的例子，就是网络摄像头在赛里斯学校的妙用。我记得在我上物联网课程的时候，网络摄像头被认为是物联网诞生的标志性发明之一。但是现在有很多的教师认为建筑形式产生的外在的、物理层面的、潜移默化的监视依然不足够，于是他们在教室的内部安装了联网的监控摄像头，他们显然没有精力去24小时盯着监控摄像头监视学生的一举一动，但是这个网络摄像头就相当于全景敞视的监狱里面的高塔，学生们知道监控摄像头的存在，也知道监控摄像头一定可以监视自己，但他们不知道自己是否被监视，他们在被监视的阴影之下压抑自己的本性。这样的一个小小的监控摄像头，的确让教育工作变得更简单，但这样的教育是压抑的，等到他们长大走进社会，拥有一块不被监控的空间的时候，他们会是什么样子的呢？</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="瘟疫中的规训方案此时此刻的显学">瘟疫中的规训方案：此时此刻的显学<a href="#瘟疫中的规训方案此时此刻的显学" class="hash-link" aria-label="瘟疫中的规训方案：此时此刻的显学的直接链接" title="瘟疫中的规训方案：此时此刻的显学的直接链接">​</a></h2><blockquote><p>根据17世纪末颁布的一道命令，当一个城市出现瘟疫时，应采取下列措施：首先，实行严格的空间隔离：封闭城市及其郊区，严禁离开城市、违者处死，捕杀一切乱窜的动物；</p></blockquote><blockquote><p>瘟疫引出了种种规训方案。它不是要求将大批的人群一分为二，而是要求进行复杂的划分、个人化的分配、深入地组织监视与控制、实现权力的强化与网络化。</p></blockquote><p>书中所描述的17世纪应对瘟疫的方案，仿佛就是今天的日记或者社会新闻，虽然在这期间经历了两次工业革命以及信息化的浪潮，但是人类社会治理人的方法还是没有本质的改变。也许所有的政治家都会有一个建立乌托邦社会的梦想，但是实现起来却是阻力巨大的，而瘟疫这样一个令人恐惧的东西，恰恰让这样强有力的控制变得正当，是一味绝佳的药引子。如果单纯读到这部分内容可能会令人绝望，也许我们当下的困境永远也走不出去，但是好消息是福柯描述这些瘟疫时期的控制方式不过是为了指出它的落后，它就是抛砖引玉里面的砖头而已， 象征着野蛮和粗鄙，当然不排除有人读书读一半一知半解就开始当说明书实行。这种由瘟疫带来的严格的控制，只是在特定的时间空间下进行的一种尝试，注定是要被取代的。听到他会被取代你又开始充满希望？那令人遗憾的消息就到来了，严格的控制会消失，但是在这一场关于规训的社会实验当中积攒下来的经验，探索出来的新发明，都会永远伴随着我们，他会像高塔、监控摄像头、像空气一样的融入我们的生活当中，它会让你心甘情愿的接受，它会让你认为你是自由自主地选择了这些。</p><p>你好，美丽的新世界！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="refs">Refs:<a href="#refs" class="hash-link" aria-label="Refs:的直接链接" title="Refs:的直接链接">​</a></h2><ol><li>《规训与惩罚：监狱的诞生》，米歇尔·福柯</li><li><a href="https://zh.m.wikipedia.org/wiki/%E6%AC%A7%E9%87%91%E4%B8%AD%E6%A1%88" target="_blank" rel="noopener noreferrer">https://zh.m.wikipedia.org/wiki/欧金中案</a></li><li><a href="https://zh.m.wikipedia.org/zh-hans/%E5%9C%86%E5%BD%A2%E7%9B%91%E7%8B%B1" target="_blank" rel="noopener noreferrer">https://zh.m.wikipedia.org/zh-hans/圆形监狱</a></li></ol>]]></content:encoded>
            <category>philosophy</category>
        </item>
        <item>
            <title><![CDATA[保安，中国新兴的实权角色]]></title>
            <link>https://xigou.github.io/blog/2022/10/22/new-powerful-role-security-guard</link>
            <guid>https://xigou.github.io/blog/2022/10/22/new-powerful-role-security-guard</guid>
            <pubDate>Sat, 22 Oct 2022 13:19:04 GMT</pubDate>
            <description><![CDATA[一位红遍中国互联网的青年保安陈义曾经说过: 如果2019年你还没有从事保安，那你就真的out了! 这句话从陈义那表情夸张的脸上的口中说出来有一股自嘲的味道, 但是在今天这个时间复述这句话, 却是意味深长而又富有远见的观点.]]></description>
            <content:encoded><![CDATA[<p>一位红遍中国互联网的青年保安陈义曾经说过: 如果2019年你还没有从事保安，那你就真的out了! 这句话从陈义那表情夸张的脸上的口中说出来有一股自嘲的味道, 但是在今天这个时间复述这句话, 却是意味深长而又富有远见的观点.</p><p><img loading="lazy" src="https://imgur.com/MQIcqBp.jpg" alt="Imgur" class="img_ev3q">
<a href="https://youtu.be/1hX4QdwiFBI" target="_blank" rel="noopener noreferrer">青年保安陈义发表对职业的见解</a></p><h1>人口密集的大城市：权力的真空</h1><p>在当今的中国青年当中, 非常流行一种价值观：宁愿在大城市做牛马, 也不愿意回到老家做公仆. 虽然并不是每一个人都同时拥有这两个选项. 但总体上在年轻人的心中大城市绝对是优于小城市的, 即使在小城市可以很容易地成家立业, 过上下班陪着家人买菜做饭这样的现代“瓦尔登湖”式的生活；而在大城市只能蜗居在合租房内, 挤着地铁996, 有时间赚钱却没有时间去消费. 我询问过一些人的看法, 他们基本上都会提到在大城市拥有更多行为和思想上的自由, 做任何事情不会受到他人的凝视和批判, 大家都没有关系可找, 总体相对公平.</p><p>为什么他们在大城市能够获得这样的“自由”？作为一位民间社会科学家（民科）, 我认为这样的自由来源于在大城市生活的年轻人处于一个“权力的真空”之中. 这里说说的权力包含上帝的权力、凯撒的权力以及父亲的权力.</p><p>中国人心目中的上帝就是封建时代被尊为圣人的各位思想家, 他们为统治者设计出来用于愚弄百姓的封建礼教, 千年以后仍然在禁锢着大多数中国人的思想. 而在城市, 商品经济发达, 资本家迫切的需要把人教育成一个消费的机器, 这其中最主要的手段就是用新的思想和价值观来让人们放弃陈腐的封建礼教. 在这样的时代潮流之下, 上帝的权力在大城市完全失灵.</p><p>在西部的一个几百人的村庄里, 村长、村长的亲戚、村长的朋友、村长的女人这一伙人加起来基本上就占了一个村的半壁江山, 在这样的地方生存而你又不是他们的一份子, 这个时候你将会如坐针毡、如芒刺背. 在大城市里面一个街道的人口会比有些小县城比整个县的人还要多, 但是里面仍然有着跟小城市几乎一样的政府架构, 每一个政府机构需要管辖的居民人数相对于小城市要多得多. 所以在在大城市里面政府的存在感相对较低, 换句话说权力根本没空搭理这些盲目流入城市的年轻人, 这样他们就感受到了权力真空中的自由.</p><p>在大城市生活, 远离了你的父辈祖辈, 远离了那些逐渐习得“爹味”的朋友, 没有了倚老卖老向你灌输自己狭隘观点的”父亲”, 没有“父亲”让你学习敬酒和送礼的学问, 也没有人能从敬酒和送礼这样的伟大科学中获利, 你不会被裹挟着进入这样的浊流之中, 你的生活自然是过的更轻松.</p><p>每一枚硬币都有两面, 这个真空, 对于你来讲是夹缝中的自由, 但是对于权力来讲则是失控的隐忧.</p><h1>瘟疫肆虐：权力下放及其寻租模式</h1><p>瘟疫的大流行, 让这个问题浮出水面.  我们需要精细的社会防控, 那就有很多的工作需要做: 贴封条、分发蔬菜、组织做核酸、检查健康码; 这些看似简单的工作, 对于那些手下管着几万人的干部而言, 变成了不可能完成的任务.  雇佣人员是一个可能的方案, 但是对于一场和瘟疫之间的持久战, 雇佣人员必然会导致执政成本的飙升, 基层很快就会因为资金问题放弃防疫, 这对于人民群众的健康将会是个巨大的威胁.  最后本来就已经深入社区, 从事社区管理工作的保安, 进入了官员的视野, 他们逐渐将社区管控的权力下放到保安头上.  这样的权力下放起初并不顺利, 因为一个人有权回到自己的家, 这是天经地义的, 现在把这样的一个权力下放到了一个没有爵位与官阶的保安手中, 群众自然不会买账.  同时这种权力的下放是很暧昧的, 不是可以大张旗鼓发布红头文件公开授权的, 于是保安和群众时常发生冲突, 直到后来通过官方媒体强行推送了大量蓝底白字的对于和保安发生冲突的人员的处罚行为, 这个权力的下放关系才变相得到了官方的认证.</p><p>知乎大V 马前卒曾经断言: 防控政策带来了额外的管理成本, 相关人员身上多了一份责任, 却没有相应的收益, 这样的模式必然很快就会崩溃.  但是马老师忽略了权力的附加价值, 决定你能过进入小区大门这样一丁点的权力, 就像是一个充满魔力的指环, 使得这些保安疯狂地去踮起脚尖投射出觊觎的目光.</p><p>瘟疫时期的某一天下午, 我在小区门口看见一个外卖员询问是否可以将快餐外卖送进小区内, 门口的保安如日本战国时期的大名一般伸展着手肘坐在那因为瘟疫而为他们搭建起来的营帐内, 他的身子一半在亮处一半在暗里, 指了指旁边的铁架子, 用君王般不怒自威的神情和语调, 大声呵斥:“放这里!”.  那一刻我愕然了, 外卖员和保安, 本来是是能够在疲乏的工作之余互相递上一根 “大前门” 香烟, 一起寒暄闲谈的阶级友人, 但是此刻的保安有了这样一点能够决定他人是否可以进入小区的权力, 就让这份革命友谊荡然无存.</p><p>鲁迅曾说奴才觉出美来了那便是十恶不赦了，我只能说鲁迅对奴才的认识比起我来还是不够深刻。当奴才必然是痛苦的，当奴才的同时要表演得不痛苦那更是痛苦中的痛苦，而他们仍然要心甘情愿的去做奴才， 是因为只要你在此处奴才做得漂亮，那必然有另外一处能够让你过一把做君王的瘾。</p><p>没有寻租模式的权力毫无价值, 保安也不例外, 而保安偶然获得的这份不知何时收回的权力, 其价值显然不如传统意义上的权力那样高. 传统寻租学说当中常用的茅台、华子、甚至是美色姻亲用于保安属于是亏本生意, 没有人会愿意做这笔买卖. 作为长期被忽视被压迫的保安, 他们对于追求精神层面价值的愿望要比其他的阶层更加迫切, 所以在他向你宣告他手中的权力的时候，你露出一个谄媚的微笑；在他展示自己大权在握的威风时，你表现出绝对的服从，这对他来讲比跳进茅台的酵池中舔舐池底的酵泥还要香114514倍. </p><h1>后瘟疫时代：保安能否继续参与权力的游戏?</h1><p>这场瘟疫迟早要结束, 但是我们永远面临着危机, 随着中国经济的发展, 迎接着中国的将会是一次又一次的阵痛, 那些发达国家面临的问题, 我们照样无法避免.  后瘟疫时代, 我们还有可能面临着恐怖主义、非法移民等问题, 核酸检测和健康码会消失, 但是我们可能还需要使用“恐怖码”和爆炸检测来保障社区的安全.</p><p>为了社会的安定, 我们依然需要那些更加精细的管理制度, 这些制度的执行离不开更多的人.  那谁是合适的人选呢? 比起熟读政治经济、国际关系、马恩列毛, 却从来未曾去菜市场和小贩谈笑风生的大学生, 保安无疑是更加合适的人选.  论业务能力, 保安比任何有编制的书记、街道办工作人员都要懂基层, 他们知道小区里面哪一个老太太儿子在做官, 他们知道哪一个业主在附近的小区还有别的房产, 他们知道一个业主的车子出现在小区门口的时候应该以什么样的姿态和速度去开门.  论工作资历, 保安已经在瘟疫大流行中已经展现了其非凡的管理能力, 即使是一件吃力不讨好的事情也会认真做好, 这样的耿耿忠心比起精致利己的大学生, 要胜出好几筹.  让保安成为新的基层管理者是一条可靠、可行之路.</p><p>这场瘟疫和任何历史事件一样, 终将结束, 在那之后, 这些在瘟疫中登上历史舞台的保安, 面临的将会是被无情抛弃还是被看见、被认可、被重视呢?  我没有预知未来的能力, 所以这个问题我无法回答, 大家一起拭目以待吧!</p><p>注: 本文纯属胡说, 性质为虚构创作, 图一乐</p><p>Refs:</p><p><a href="https://www.thepaper.cn/newsDetail_forward_6421742" target="_blank" rel="noopener noreferrer">带篮子是个保安，也会是迷茫青年的精神图腾<em>澎湃号·湃客</em>澎湃新闻-The Paper</a></p>]]></content:encoded>
            <category>abstract</category>
        </item>
        <item>
            <title><![CDATA[核酸检测的数学原理]]></title>
            <link>https://xigou.github.io/blog/2022/10/19/covid-test-and-math</link>
            <guid>https://xigou.github.io/blog/2022/10/19/covid-test-and-math</guid>
            <pubDate>Wed, 19 Oct 2022 00:19:04 GMT</pubDate>
            <description><![CDATA[肖申克看守所著名的劳改犯安迪·杜弗伦曾经说过：]]></description>
            <content:encoded><![CDATA[<p>肖申克看守所著名的劳改犯安迪·杜弗伦曾经说过：</p><blockquote><p>这些墙很有趣。刚入狱的时候，你痛恨周围的高墙；慢慢地，你习惯了生活在其中；最终你会发现自己不得不依靠它而生存。</p></blockquote><p>自从 COVID-19 于武汉爆发三年以来，我已经做了无数次的核酸检测，光是今年2月份至今的八个月里，我就已经做了几百次。</p><p>一开始我抗拒核酸检测，后来我习惯了检测，而如今核酸检测已经成了我生命的一部分，离开他我将不能呼吸。我像西西弗斯一样，做核酸、等待他过期、再做核酸，无限重复着这一个循环，但是我没有西西弗是那样强大的精神力量，所以我会忍不住的去思考我为什么要这样做。</p><h1>拓扑学与核酸检测</h1><blockquote><p>自我所有權（英語：Self-ownership），或稱個人主權（英語：Individual sovereignty），是一種個人主義概念，主張個人擁有對其自身或生命的最高控制权和最终主權。</p></blockquote><p>一开始我不喜欢核酸检测，因为我认为这是对我的自我所有權的一种侵犯。</p><p>圣经中有“以牙还牙、以眼还眼”的描述，从这里可以看出侵犯他人的自我所有权在古典时期就已经是违法行为，但是在这个时期, 对于罪犯而言其自我所有权是不受保障的，在中国古代也有有宫刑、髌刑等典型的侵害自我所有权的刑罚。在人类进入现代文明之后，就连罪犯的自我所有权也会得到充分的保障，所以从自我所有权的视角来看，要求我做核酸检测是不可接受的。</p><p>但是现在回想我当时的想法实在是幼稚可笑的，当时的我太年轻太简单，没有将核酸检测与拓扑学一起思考，所以得出了那些荒谬的结论，说来实在是惭愧。</p><p>人是一个非常复杂的对象，在几何学当中想要用各种方程曲面来描述一个人几乎是不可能的，在拓扑学当中我们只关注物体的拓扑性质，将研究对象转化成另一个结构更为简单的对象，就能够让问题的思考变得简单。同胚就是这样一个有力的思考工具，大致地说，拓扑空间是一个几何物体，同胚就是把物体连续延展和弯曲，使其成为一个新的物体， 这个新的物体和原物体拥有相同的拓扑性质，在这个新物体上思考得出的结论对于原物体也依然有效。</p><p>我们可以把人简化成一个球体，从嘴巴到肛门之间的消化道穿透了人的整个身体，所以人实际上是等价于一个穿孔的球体，再进一步的将中间的穿孔变大，我们可以得出最终的结论：人实际上等价于一个甜甜圈。</p><p><img loading="lazy" src="https://i.imgur.com/Knk8mRt.png" alt="Imgur" class="img_ev3q"></p><p>而核酸检测实际上是在甜甜圈圈的内侧轻轻的擦拭，这和你的母亲对你眼角的泪水的轻柔拂拭、你的父亲给你的温暖的拥抱、以及你的爱人给你的深情一吻一样, 是一种合理且必要的身体接触，核酸检测是我们那如父母一般的祖国对我们的爱，而不是一种对自我所有权的侵犯。</p><p>这一刻我顿悟了，我如同波德莱尔一样忧郁地走在巴黎的街头：</p><p>大街上我的周围震耳欲聋地喧嚣，喧嚣的内容是：健康码看一下，打开常规核酸码，大规模不给做；</p><p>走过一位穿着重孝、显出严峻的哀愁，瘦长苗条的妇女，我像渴望拥抱一样渴望着核酸检测；</p><p>她伸出一只美丽的手，用咽拭子亲吻了我的扁桃体。</p><p>  <img loading="lazy" src="https://imgur.com/RMhTTvH.jpg" alt="一位穿着重孝、显出严峻的哀愁、瘦长苗条的妇女" class="img_ev3q">
<em>一位穿着重孝、显出严峻的哀愁、瘦长苗条的妇女</em></p><h1>无休止的核酸检测: 核酸检测与统计学</h1><p>医学检测和电门检测有着本质的区别，当你想知道一个电门是不是有电，你只需要摸一摸，如果你麻了他就是有电，只要你不是高位截瘫，这种检测的准确率是百分之百。而医学检测（下文特指核酸检测）它是一个概率性的问题，因为人体是一个动态平衡的系统，假如你感染了新冠病毒，新冠病毒在你体内是随着时间变化的，这里面可能有许多种的变化规律，如果你的免疫系统正常，它会先大量繁殖，然后被免疫系统消灭，总体是一个先增后减的过程；如果你的免疫性能低下，他有可能会不受控制的上涨，直到超过你身体的承载能力。</p><p>核酸检测则是随意抽取一个时间点，在这个时间点对你体内的新冠病毒浓度进行检查，假设你感染了新冠病毒，而这个随机抽取的时间点可能位于你的病程的任意阶段，得到的病毒浓度自然也是随机分布的。</p><p>下图就体现了这样的一个规律，其中上半部分的钟形曲线代表的是新冠病毒感染者（阳性）的核酸检测结果的浓度分布，下半部分的钟形曲线则代表了非新冠患者（阴性）的检测结果的浓度分布。我们可以看到感染者的检测结果总体上数值是要大于非感染者的，但是二者还是有一个重叠部分，这个时候就需要我们人为划定截点线，将截点线右侧的部分都认为是阳性。显然在我们检测结果标定为阳性的个例当中依然有有人实际上是阴性的，被称为假阴性；相对应的在检测结果为阴性的部分依然有一些人实际上是阳性的，称为假阴性。这和概率没有出现之前的科学是完全不同的，他和“摸电门”这样古典的科学不同的是，这里不是非黑即白的，而是有一个由概率和统计学定义的中间地带，在新的科学里面 <strong>0</strong> 和 <strong>1</strong> 这样完美的数字已经成为历史。</p><p><img loading="lazy" src="https://i.imgur.com/bHsQu8e.gif" alt="Imgur" class="img_ev3q"></p><p>而如何划定这样一个截点线，则需要具体问题具体分析。他有时候是一个科学问题，我们可以根据假阴性和假阳性的危害确定划分策略，假设我们回到了中世纪，需要检测的是能够毁灭人类的鼠疫，那任何一个假阴性都可能导致一整座城市的灭亡，我们倾向于不容忍假阴性的存在，所以我们可以选取下图中的截点线2， 这样一来我们可以将所有检测结果为阳性的人全都转移到远离罗马的深山中，并对他们下一剂去疴的猛药。这样显然具有一些“无辜的人”本来没什么事，却被来回折腾并且还会因为猛药受到身体伤害，但是考虑到这一疾病本身较为凶险，这样做总体是值得的，也是符合群体利益的。而对于一些危害较小的疾病，这样做就相当于化疗治感冒，得不偿失了。有时候这个截点线的选取又是一个政治问题，它取决于你的领导希望看到什么样的结果。</p><p>所以我们需要不断的做核酸检测的原因之一则与上述的假阴性相关，检测方法本身无法避免假阴性，也就是说假阴性的概率 p ，这个 p 必然是大于0的。假设你是一个天选之子，把新冠病毒从阿尔法到奥密克戎全都感染了一遍，我们把多次的检测当成互相独立的事件，那你在这几百次检测当中结果都是阴性的可能性就是几百个p相乘，这个位于(0, 1)之间的概率无论怎么乘它只会越来越小，但它永远不会等于零，也就是说你依然有可能在几百次的检测当中结果都是阴性。</p><p>这与圣经留给我们的启示不谋而合，我们生来就有罪，而真正的审判日来临之前，没有任何人可以宣称自己已经赎清所有的罪孽。</p><p>我们为什么要给核酸检测设定一个过期的时限呢？圣经中也早已给出了答案：</p><blockquote><p>不要为明日自夸，因为一日要生何事，你尚且不能知道。</p><p>— 箴言, 27:1</p></blockquote><p>正如神所言，核酸检测的结果只能代表你接受检测那一个时刻的病毒水平，而在检测之后的一日，你可能会去抽烟喝酒、蹦迪烫头，也可能看见青蛙雨从天而降，甚至可能从埃及出走到达迦南美地，在进入流着奶与蜜的地之前，重新做一次核酸检测是十分必要的。</p><hr><p>[1][What is the diagnostic accuracy of antibody tests for the detection of infection with the COVID-19 virus?]<!-- -->(<a href="https://www.cochrane.org/zh-hans/CD013652/INFECTN_kang-ti-ce-shi-jian-ce-covid-19bing-du-gan-ran-de-zhen-duan-zhun-que-xing-ru-he" target="_blank" rel="noopener noreferrer">https://www.cochrane.org/zh-hans/CD013652/INFECTN_kang-ti-ce-shi-jian-ce-covid-19bing-du-gan-ran-de-zhen-duan-zhun-que-xing-ru-he</a>)</p><p>[2][了解医学检查和检查结果, 默沙东中国]<!-- -->(<a href="https://www.msdmanuals.cn/professional/special-subjects/clinical-decision-making/understanding-medical-tests-and-test-results" target="_blank" rel="noopener noreferrer">https://www.msdmanuals.cn/professional/special-subjects/clinical-decision-making/understanding-medical-tests-and-test-results</a>)</p><p>[3][自我所有權， wikepedia]<!-- -->(<a href="https://zh.m.wikipedia.org/zh/%E8%87%AA%E6%88%91%E6%89%80%E6%9C%89%E6%AC%8A" target="_blank" rel="noopener noreferrer">https://zh.m.wikipedia.org/zh/%E8%87%AA%E6%88%91%E6%89%80%E6%9C%89%E6%AC%8A</a>)</p><p>[4]<!-- --> 给一位交臂而过的妇女, 波德莱尔（法国）, 收录于诗集 &lt;巴黎的忧郁&gt;</p>]]></content:encoded>
            <category>abstract</category>
        </item>
        <item>
            <title><![CDATA[为你写诗]]></title>
            <link>https://xigou.github.io/blog/poetry</link>
            <guid>https://xigou.github.io/blog/poetry</guid>
            <pubDate>Fri, 21 Jan 2022 14:35:04 GMT</pubDate>
            <description><![CDATA[不许伸着脖子偷看]]></description>
            <content:encoded><![CDATA[<p>不许伸着脖子偷看</p><hr><p>不要因为害怕失望</p><p>而放弃追逐太阳</p><p>它的光芒之下有繁星</p><p>Don't give up chasing the sun</p><p>for fear of disappointment,</p><p>There are stars under its light.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">        -- Xi 2022.01.21 仿泰戈尔</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr>]]></content:encoded>
            <category>poetry</category>
        </item>
        <item>
            <title><![CDATA[[Literature Reading] Modern Code Review: A Case Study at Google]]></title>
            <link>https://xigou.github.io/blog/Modern-Code-Review-A-Case-Study-at-Google</link>
            <guid>https://xigou.github.io/blog/Modern-Code-Review-A-Case-Study-at-Google</guid>
            <pubDate>Tue, 14 Dec 2021 21:35:04 GMT</pubDate>
            <description><![CDATA[Recently, after called some code review meetings in my daily work, I got interested about code review practice, so I read this excellent article on the weekend.]]></description>
            <content:encoded><![CDATA[<p>Recently, after called some code review meetings in my daily work, I got interested about code review practice, so I read this excellent article on the weekend. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hisroty-of-code-review-practice">Hisroty of code review practice<a href="#hisroty-of-code-review-practice" class="hash-link" aria-label="Hisroty of code review practice的直接链接" title="Hisroty of code review practice的直接链接">​</a></h2><ol><li>Code Inspections</li></ol><p>It's a very  structured process style code review, when developers finished code, they shoud working on planning, overview, preparation, inspection meeting, reworking, and follow-up for code review, reviewers and code authors will sitting in the same room, and they can talk with the author face to face to understand the code and find the defects.</p><ol start="2"><li>Asynchronous review via email</li></ol><p>Until the late 2000s, most large OSS projects adopted a form of remote, asynchronous reviews, relying on patches sent to communication channels such as mailing lists and issue tracking systems. So this method broke the limitations of "sitting toghter" and authors don't need to do a presentation to explain the code, instead they should explain the code in the length of one email.</p><ol start="3"><li>Tool-based review</li></ol><p>The main-streamd code review practice nowdays is tool-based, the representative of review systems are Gerrit, CodeFlow, ReviewBoard and Phabricator.</p><p><em>Typical workflow of tool-based review</em>:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">1. author submit code patch to review system,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">2. reviewers review code and post comment on specific lines of code,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">3. authors reply comments or submit new patch to review system,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">4. repeat step 2-3 until all reviewers or specific role of your team think the patch is ready for testing or merging.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="4"><li>Pull-based development model</li></ol><p>Mainly used in Github or similar code repo website, very similar to Tool-based review.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="this-research-answered-three-research-questions-about-code-review">This research answered three Research Questions about code review:<a href="#this-research-answered-three-research-questions-about-code-review" class="hash-link" aria-label="This research answered three Research Questions about code review:的直接链接" title="This research answered three Research Questions about code review:的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rq1-what-are-the-motivations-for-code-review-at-google">RQ1: What are the motivations for code review at Google?<a href="#rq1-what-are-the-motivations-for-code-review-at-google" class="hash-link" aria-label="RQ1: What are the motivations for code review at Google?的直接链接" title="RQ1: What are the motivations for code review at Google?的直接链接">​</a></h3><blockquote><p>Finding 1. Expectations for code review at Google do not center around problem solving. Reviewing was introduced at Google to ensure code readability and maintainability. Today’s developers also perceive this educational aspect, in addition to maintaining norms, tracking history, gatekeeping, and accident prevention. Defect finding is welcomed but not the only focus.</p></blockquote><p>This is in line with my daily experience, when fixing bug it very useful to search for a similar bugfix patch in review system, and the review system contains some auto process to do static check and testing.</p><p>Besides, The most important aim in business view is to grab out the knowledge out of the brain of the developer and make others easy to learn it, this makes every piece of code at least read by 2-3 employee inside organization, when some empolyee leave the organization, negative impact will be small.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rq2-what-is-the-practice-of-code-review-at-google">RQ2: What is the practice of code review at Google?<a href="#rq2-what-is-the-practice-of-code-review-at-google" class="hash-link" aria-label="RQ2: What is the practice of code review at Google?的直接链接" title="RQ2: What is the practice of code review at Google?的直接链接">​</a></h3><blockquote><p>Finding 3. The Google code review process is aligned with the convergent practice of being lightweight and flexible. In contrast to other studied systems, however, ownership and readability are explicit and play a key role. The review tool includes reviewer recommendation and code analysis result</p></blockquote><p>The most impressive part for me is: In Google, every code directory has owner(a set of people), when you change the code of that directory, owner should review and approve the code. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="something-interesting">Something interesting<a href="#something-interesting" class="hash-link" aria-label="Something interesting的直接链接" title="Something interesting的直接链接">​</a></h2><blockquote><p>At Google, over 35% of
the changes under consideration modify only a single file and
about 90% modify fewer than 10 files. Over 10% of changes
modify only a single line of code, and the median number of
lines modified is 24. The median change size is significantly
lower than reported by Rigby and Bird for companies such as
AMD (44 lines), Lucent (263 lines), and Bing, Office and SQL
Server at Microsoft (somewhere between those boundaries),
but in line for change sizes in open source projects.</p></blockquote><p>Even in big and fast-developing company like Google, most of the code modification is "small", when you usually need to change hundreds lines of code, that means something wrong with your company, please start to post your resume as soon as possible. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="write-at-the-end">Write at the end<a href="#write-at-the-end" class="hash-link" aria-label="Write at the end的直接链接" title="Write at the end的直接链接">​</a></h2><p>In my team now, I'd rather define the code review process as "Tool-based Code Inspections", we are using Gerrit to track code patch for review, but almost nobody will post comments or reply on it,  the reviewer have no interest to read others' code, developer should call a meeting and do a presentation to explain the code to reviewers, then reviewers will propose some comments in the meeting. </p><h1>Refs</h1><div id="refer-anchor-1"></div>- [1] Caitlin Sadowski, Emma Söderberg, Luke Church, Michal Sipko and Alberto Bacchelli. 2018. Modern Code Review: A Case Study at Google. In Proceedings of 40th International Conference on Software Engineering: Software Engineering in Practice Track, Gothenburg, Sweden, May 27-June 3, 2018 (ICSE-SEIP ’18), 10 pages. DOI: 10.1145/3183519.3183525]]></content:encoded>
            <category>Software Engineering</category>
        </item>
        <item>
            <title><![CDATA[Wireshark experements of Computer Networks: Top-Down Approach]]></title>
            <link>https://xigou.github.io/blog/Computer-Networks-Top-Down-Approach-s-wireshark-experements copy</link>
            <guid>https://xigou.github.io/blog/Computer-Networks-Top-Down-Approach-s-wireshark-experements copy</guid>
            <pubDate>Sat, 04 Sep 2021 21:35:04 GMT</pubDate>
            <description><![CDATA["Tell me and I forget. Show me and I remember. Involve me and I understand."]]></description>
            <content:encoded><![CDATA[<blockquote><p>"Tell me and I forget. Show me and I remember. Involve me and I understand."<br>
<em>Chinese proverb</em></p></blockquote><p>I read the <em>Computer Networks: Top-Down Approach</em> about 3 years ago preparing for my CN-GRE, after read this book, I learned a lot about computer network, the reading helped me to fill in the blanks on the test paper, but I don't have the confidence to tell others I know the principles behind computer network, expecially after years of forgetting process.</p><p>So I decide to do a wireshark homework in this weekend.</p><h1>Experiments</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="basic-skill-capturing-packets-using-wireshark">Basic skill: capturing packets using Wireshark<a href="#basic-skill-capturing-packets-using-wireshark" class="hash-link" aria-label="Basic skill: capturing packets using Wireshark的直接链接" title="Basic skill: capturing packets using Wireshark的直接链接">​</a></h2><p><em>Wiresharks</em> is a powerful tools to capture, mastering it needs much time, but I think knowing three steps below is enough to start these labs:</p><ol><li>select an interface, and click the "shark fin" icon to start capturing packets;</li><li>do something can trigger the protocal you want to observe;</li><li>click stop icon to stop capturing and start research.</li></ol><p>Need to know more, just go to reference<a href="#refer-anchor-1"><sup>1</sup></a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="http">HTTP<a href="#http" class="hash-link" aria-label="HTTP的直接链接" title="HTTP的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-basic-http-getresponse-interaction">The Basic HTTP GET/response interaction<a href="#the-basic-http-getresponse-interaction" class="hash-link" aria-label="The Basic HTTP GET/response interaction的直接链接" title="The Basic HTTP GET/response interaction的直接链接">​</a></h3><p>What I did:
Open Microsoft Edge browser and open this url:  <a href="http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html" target="_blank" rel="noopener noreferrer">http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html</a>.</p><p>Captured packets:</p><table><thead><tr><th>"No."</th><th>"Time"</th><th>"Source"</th><th>"Destination"</th><th>"Protocol"</th><th>"Length"</th><th>"Info"</th></tr></thead><tbody><tr><td>"370872"</td><td>"899.553481"</td><td>"192.168.1.3"</td><td>"128.119.245.12"</td><td>"HTTP"</td><td>"581"</td><td>"GET /wireshark-labs/HTTP-wireshark-file1.html HTTP/1.1 "</td></tr><tr><td>"372140"</td><td>"899.824395"</td><td>"128.119.245.12"</td><td>"192.168.1.3"</td><td>"HTTP"</td><td>"540"</td><td>"HTTP/1.1 200 OK  (text/html)"</td></tr></tbody></table><p>Detail of packets:
Request:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 370872: 581 bytes on wire (4648 bits), 581 bytes captured (4648 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Micro-St_06:62:ec (00:d8:61:06:62:ec), Dst: Fiberhom_35:92:b1 (74:5d:68:35:92:b1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 192.168.1.3, Dst: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 17536, Dst Port: 80, Seq: 1, Ack: 1, Len: 527</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Hypertext Transfer Protocol</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    GET /wireshark-labs/HTTP-wireshark-file1.html HTTP/1.1\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Host: gaia.cs.umass.edu\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Connection: keep-alive\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Cache-Control: max-age=0\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Upgrade-Insecure-Requests: 1\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36 Edg/93.0.961.38\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Encoding: gzip, deflate\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [HTTP request 1/1]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Response in frame: 372140]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Response:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 372140: 540 bytes on wire (4320 bits), 540 bytes captured (4320 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Fiberhom_35:92:b1 (74:5d:68:35:92:b1), Dst: Micro-St_06:62:ec (00:d8:61:06:62:ec)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.1.3</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 80, Dst Port: 17536, Seq: 1, Ack: 528, Len: 486</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Hypertext Transfer Protocol</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    HTTP/1.1 200 OK\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Date: Sun, 05 Sep 2021 09:03:10 GMT\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.22 mod_perl/2.0.11 Perl/v5.16.3\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Last-Modified: Sun, 05 Sep 2021 05:59:01 GMT\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ETag: "80-5cb393aaf07a9"\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Ranges: bytes\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Content-Length: 128\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Keep-Alive: timeout=5, max=100\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Connection: Keep-Alive\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Content-Type: text/html; charset=UTF-8\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [HTTP response 1/1]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Time since request: 0.270914000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Request in frame: 370872]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    File Data: 128 bytes</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Line-based text data: text/html (4 lines)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    &lt;html&gt;\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Congratulations.  You've downloaded the file \n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file1.html!\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    &lt;/html&gt;\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Q&amp;As:</p><ol><li><p>Is your browser running HTTP version 1.0, 1.1, or 2?  What version of HTTP is the server running?
From the header of request packet, I can see the HTTP version of my browser and server are both HTTP/1.1.</p></li><li><p>What languages (if any) does your browser indicate that it can accept to the server?
It is in the "Accept-Language" of the request packet.</p></li><li><p>What is the IP address of your computer?  What is the IP address of the gaia.cs.umass.edu server?
The Internet Protocal layer indicates my IP(Src) is 192.168.1.3, IP of gaia.cs.umass.edu server(Dst) is 128.119.245.12.</p></li><li><p>What is the status code returned from the server to your browser?
200 OK.</p></li><li><p>When was the HTML file that you are retrieving last modified at the server?
Last-Modified: Sun, 05 Sep 2021 05:59:01 GMT\r\n</p></li><li><p>How many bytes of content are being returned to your browser?
540 bytes.</p></li><li><p>By inspecting the raw data in the packet content window, do you see any headers within the data that are not displayed in the packet-listing window?  If so, name one.
Content-Length.</p></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-http-conditional-getresponse-interaction">The HTTP CONDITIONAL GET/response interaction<a href="#the-http-conditional-getresponse-interaction" class="hash-link" aria-label="The HTTP CONDITIONAL GET/response interaction的直接链接" title="The HTTP CONDITIONAL GET/response interaction的直接链接">​</a></h3><p>Operations:</p><ul><li>Enter the following URL into your browser
<a href="http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html" target="_blank" rel="noopener noreferrer">http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html</a>
Your browser should display a very simple five-line HTML file. </li><li>Quickly enter the same URL into your browser again (or simply select the refresh button on your browser)</li></ul><p>Captured packets:</p><table><thead><tr><th>"No."</th><th>"Time"</th><th>"Source"</th><th>"Destination"</th><th>"Protocol"</th><th>"Length"</th><th>"Info"</th></tr></thead><tbody><tr><td>"142"</td><td>"6.368786"</td><td>"192.168.1.3"</td><td>"128.119.245.12"</td><td>"HTTP"</td><td>"555"</td><td>"GET /wireshark-labs/HTTP-wireshark-file2.html HTTP/1.1 "</td></tr><tr><td>"183"</td><td>"6.633550"</td><td>"128.119.245.12"</td><td>"192.168.1.3"</td><td>"HTTP"</td><td>"784"</td><td>"HTTP/1.1 200 OK  (text/html)"</td></tr><tr><td>"237"</td><td>"8.389410"</td><td>"192.168.1.3"</td><td>"128.119.245.12"</td><td>"HTTP"</td><td>"667"</td><td>"GET /wireshark-labs/HTTP-wireshark-file2.html HTTP/1.1 "</td></tr><tr><td>"268"</td><td>"8.655003"</td><td>"128.119.245.12"</td><td>"192.168.1.3"</td><td>"HTTP"</td><td>"293"</td><td>"HTTP/1.1 304 Not Modified "</td></tr></tbody></table><p>Detail of packets:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 142: 555 bytes on wire (4440 bits), 555 bytes captured (4440 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Micro-St_06:62:ec (00:d8:61:06:62:ec), Dst: Fiberhom_35:92:b1 (74:5d:68:35:92:b1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 192.168.1.3, Dst: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 1053, Dst Port: 80, Seq: 1, Ack: 1, Len: 501</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Hypertext Transfer Protocol</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    GET /wireshark-labs/HTTP-wireshark-file2.html HTTP/1.1\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Host: gaia.cs.umass.edu\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Connection: keep-alive\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Upgrade-Insecure-Requests: 1\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36 Edg/93.0.961.38\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Encoding: gzip, deflate\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [HTTP request 1/2]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Response in frame: 183]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Next request in frame: 237]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 183: 784 bytes on wire (6272 bits), 784 bytes captured (6272 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Fiberhom_35:92:b1 (74:5d:68:35:92:b1), Dst: Micro-St_06:62:ec (00:d8:61:06:62:ec)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.1.3</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 80, Dst Port: 1053, Seq: 1, Ack: 502, Len: 730</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Hypertext Transfer Protocol</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    HTTP/1.1 200 OK\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Date: Sun, 05 Sep 2021 12:49:23 GMT\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.22 mod_perl/2.0.11 Perl/v5.16.3\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Last-Modified: Sun, 05 Sep 2021 05:59:01 GMT\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ETag: "173-5cb393aaefbf1"\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Ranges: bytes\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Content-Length: 371\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Keep-Alive: timeout=5, max=100\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Connection: Keep-Alive\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Content-Type: text/html; charset=UTF-8\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [HTTP response 1/2]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Time since request: 0.264764000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Request in frame: 142]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Next request in frame: 237]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Next response in frame: 268]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    File Data: 371 bytes</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Line-based text data: text/html (10 lines)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    &lt;html&gt;\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Congratulations again!  Now you've downloaded the file lab2-2.html. &lt;br&gt;\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    This file's last modification date will not change.  &lt;p&gt;\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Thus  if you download this multiple times on your browser, a complete copy &lt;br&gt;\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    will only be sent once by the server due to the inclusion of the IN-MODIFIED-SINCE&lt;br&gt;\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    field in your browser's HTTP GET request to the server.\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    &lt;/html&gt;\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 237: 667 bytes on wire (5336 bits), 667 bytes captured (5336 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Micro-St_06:62:ec (00:d8:61:06:62:ec), Dst: Fiberhom_35:92:b1 (74:5d:68:35:92:b1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 192.168.1.3, Dst: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 1053, Dst Port: 80, Seq: 502, Ack: 731, Len: 613</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Hypertext Transfer Protocol</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    GET /wireshark-labs/HTTP-wireshark-file2.html HTTP/1.1\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Host: gaia.cs.umass.edu\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Connection: keep-alive\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Cache-Control: max-age=0\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Upgrade-Insecure-Requests: 1\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36 Edg/93.0.961.38\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Encoding: gzip, deflate\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    If-None-Match: "173-5cb393aaefbf1"\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    If-Modified-Since: Sun, 05 Sep 2021 05:59:01 GMT\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [HTTP request 2/2]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Prev request in frame: 142]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Response in frame: 268]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 268: 293 bytes on wire (2344 bits), 293 bytes captured (2344 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Fiberhom_35:92:b1 (74:5d:68:35:92:b1), Dst: Micro-St_06:62:ec (00:d8:61:06:62:ec)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.1.3</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 80, Dst Port: 1053, Seq: 731, Ack: 1115, Len: 239</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Hypertext Transfer Protocol</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    HTTP/1.1 304 Not Modified\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Date: Sun, 05 Sep 2021 12:49:25 GMT\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.22 mod_perl/2.0.11 Perl/v5.16.3\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Connection: Keep-Alive\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Keep-Alive: timeout=5, max=99\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ETag: "173-5cb393aaefbf1"\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [HTTP response 2/2]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Time since request: 0.265593000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Prev request in frame: 142]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Prev response in frame: 183]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Request in frame: 237]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file2.html]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Q&amp;As:
8.	Inspect the contents of the first HTTP GET request from your browser to the server.  Do you see an “IF-MODIFIED-SINCE” line in the HTTP GET?
No.</p><ol start="9"><li><p>Inspect the contents of the server response. Did the server explicitly return the contents of the file?   How can you tell?
Yes, in the File Data field of the response packet.</p></li><li><p>Now inspect the contents of the second HTTP GET request from your browser to the server.  Do you see an “IF-MODIFIED-SINCE:” line in the HTTP GET ? If so, what information follows the “IF-MODIFIED-SINCE:” header?
Yes,  "If-Modified-Since: Sun, 05 Sep 2021 05:59:01 GMT\r\n".</p></li><li><p>What is the HTTP status code and phrase returned from the server in response to this second HTTP GET?  Did the server explicitly return the contents of the file?   Explain.
Status code is 304(Not Modified), server didn't return the contents of the file explicitly,  because the browser keep a copy of this file last modified at  "Sun, 05 Sep 2021 05:59:01 GMT", and put this timestamp in “IF-MODIFIED-SINCE:” header field to inform the server no need to return the file didn't modified after the timestamp.</p></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="retrieving-long-documents">Retrieving Long Documents<a href="#retrieving-long-documents" class="hash-link" aria-label="Retrieving Long Documents的直接链接" title="Retrieving Long Documents的直接链接">​</a></h3><p>Operations:</p><ul><li>Enter the following URL into your browser
<a href="http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file3.html" target="_blank" rel="noopener noreferrer">http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file3.html</a>
Your browser should display the rather lengthy US Bill of Rights.</li></ul><p>Packets Captured:</p><table><thead><tr><th>"No."</th><th>"Time"</th><th>"Source"</th><th>"Destination"</th><th>"Protocol"</th><th>"Length"</th><th>"Info"</th></tr></thead><tbody><tr><td>"146"</td><td>"4.150099"</td><td>"192.168.1.3"</td><td>"128.119.245.12"</td><td>"HTTP"</td><td>"555"</td><td>"GET /wireshark-labs/HTTP-wireshark-file3.html HTTP/1.1 "</td></tr><tr><td>"176"</td><td>"4.411527"</td><td>"128.119.245.12"</td><td>"192.168.1.3"</td><td>"HTTP"</td><td>"679"</td><td>"HTTP/1.1 200 OK  (text/html)"</td></tr></tbody></table><p>Packets Details:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 146: 555 bytes on wire (4440 bits), 555 bytes captured (4440 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Micro-St_06:62:ec (00:d8:61:06:62:ec), Dst: Fiberhom_35:92:b1 (74:5d:68:35:92:b1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 192.168.1.3, Dst: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 1028, Dst Port: 80, Seq: 1, Ack: 1, Len: 501</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Hypertext Transfer Protocol</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    GET /wireshark-labs/HTTP-wireshark-file3.html HTTP/1.1\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        [Expert Info (Chat/Sequence): GET /wireshark-labs/HTTP-wireshark-file3.html HTTP/1.1\r\n]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Request Method: GET</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Request URI: /wireshark-labs/HTTP-wireshark-file3.html</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Request Version: HTTP/1.1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Host: gaia.cs.umass.edu\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Connection: keep-alive\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Upgrade-Insecure-Requests: 1\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36 Edg/93.0.961.38\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Encoding: gzip, deflate\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file3.html]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [HTTP request 1/1]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Response in frame: 176]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 176: 679 bytes on wire (5432 bits), 679 bytes captured (5432 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Fiberhom_35:92:b1 (74:5d:68:35:92:b1), Dst: Micro-St_06:62:ec (00:d8:61:06:62:ec)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Destination: Micro-St_06:62:ec (00:d8:61:06:62:ec)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Source: Fiberhom_35:92:b1 (74:5d:68:35:92:b1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Type: IPv4 (0x0800)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.1.3</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 80, Dst Port: 1028, Seq: 4237, Ack: 502, Len: 625</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[4 Reassembled TCP Segments (4861 bytes): #172(1412), #173(1412), #175(1412), #176(625)]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Frame: 172, payload: 0-1411 (1412 bytes)]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Frame: 173, payload: 1412-2823 (1412 bytes)]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Frame: 175, payload: 2824-4235 (1412 bytes)]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Frame: 176, payload: 4236-4860 (625 bytes)]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Segment count: 4]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Reassembled TCP length: 4861]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Reassembled TCP Data: 485454502f312e3120323030204f4b0d0a446174653a2053756e2c203035205365702032…]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Hypertext Transfer Protocol</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    HTTP/1.1 200 OK\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        [Expert Info (Chat/Sequence): HTTP/1.1 200 OK\r\n]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Response Version: HTTP/1.1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Status Code: 200</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        [Status Code Description: OK]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Response Phrase: OK</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Date: Sun, 05 Sep 2021 13:12:00 GMT\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.22 mod_perl/2.0.11 Perl/v5.16.3\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Last-Modified: Sun, 05 Sep 2021 05:59:01 GMT\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    ETag: "1194-5cb393aaeb1b8"\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Ranges: bytes\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Content-Length: 4500\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Keep-Alive: timeout=5, max=100\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Connection: Keep-Alive\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Content-Type: text/html; charset=UTF-8\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [HTTP response 1/1]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Time since request: 0.261428000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Request in frame: 146]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Request URI: http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file3.html]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    File Data: 4500 bytes</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Line-based text data: text/html (98 lines)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Q&amp;As:</p><ol start="12"><li><p>How many HTTP GET request messages did your browser send?  Which packet number in the trace contains the GET message for the Bill or Rights?
Only one, packet 146.</p></li><li><p>Which packet number in the trace contains the status code and phrase associated with the response to the HTTP GET request?
Packet 176.</p></li><li><p>What is the status code and phrase in the response?
200(OK).</p></li><li><p>How many data-containing TCP segments were needed to carry the single HTTP response and the text of the Bill of Rights?</p></li><li></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="html-documents-with-embedded-objects">HTML Documents with Embedded Objects<a href="#html-documents-with-embedded-objects" class="hash-link" aria-label="HTML Documents with Embedded Objects的直接链接" title="HTML Documents with Embedded Objects的直接链接">​</a></h3><p>Operations:</p><ul><li>Enter the following URL into your browser
<a href="http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file4.html" target="_blank" rel="noopener noreferrer">http://gaia.cs.umass.edu/wireshark-labs/HTTP-wireshark-file4.html</a>
Your browser should display a short HTML file with two images. These two images are referenced in the base HTML file.  That is, the images themselves are not contained in the HTML; instead the URLs for the images are contained in the downloaded HTML file. As discussed in the textbook, your browser will have to retrieve these logos from the indicated web sites.   Our publisher’s logo is retrieved from the gaia.cs.umass.edu web site.   The image of our 8th edition cover (one of our favorite covers) is stored at a server in France. </li></ul><p>Packets Captured:</p><table><thead><tr><th>"No."</th><th>"Time"</th><th>"Source"</th><th>"Destination"</th><th>"Protocol"</th><th>"Length"</th><th>"Info"</th></tr></thead><tbody><tr><td>"28"</td><td>"2.033457"</td><td>"192.168.1.3"</td><td>"128.119.245.12"</td><td>"HTTP"</td><td>"581"</td><td>"GET /wireshark-labs/HTTP-wireshark-file4.html HTTP/1.1 "</td></tr><tr><td>"41"</td><td>"2.304704"</td><td>"128.119.245.12"</td><td>"192.168.1.3"</td><td>"HTTP"</td><td>"1355"</td><td>"HTTP/1.1 200 OK  (text/html)"</td></tr><tr><td>"42"</td><td>"2.338977"</td><td>"192.168.1.3"</td><td>"128.119.245.12"</td><td>"HTTP"</td><td>"501"</td><td>"GET /pearson.png HTTP/1.1 "</td></tr><tr><td>"47"</td><td>"2.530706"</td><td>"192.168.1.3"</td><td>"178.79.137.164"</td><td>"HTTP"</td><td>"468"</td><td>"GET /8E_cover_small.jpg HTTP/1.1 "</td></tr><tr><td>"55"</td><td>"2.609925"</td><td>"128.119.245.12"</td><td>"192.168.1.3"</td><td>"HTTP"</td><td>"841"</td><td>"HTTP/1.1 200 OK  (PNG)"</td></tr><tr><td>"58"</td><td>"2.695694"</td><td>"178.79.137.164"</td><td>"192.168.1.3"</td><td>"HTTP"</td><td>"225"</td><td>"HTTP/1.1 301 Moved Permanently "</td></tr></tbody></table><p>Packets Details:
...</p><p>Q&amp;As:
16.	How many HTTP GET request messages did your browser send?  To which Internet addresses were these GET requests sent?
Totally 3 GET requests, 2 to 128.119.245.12 to get html file and pearson.png, 1 to 178.79.137.164 for the 8E_cover_small.jpg.</p><ol start="17"><li>Can you tell whether your browser downloaded the two images serially, or whether they were downloaded from the two web sites in parallel?  Explain.
In parallel.</li></ol><p>{% mermaid sequenceDiagram %}
participant Browser
participant Server
Browser -&gt;&gt; Server: GET /pearson.png time:2.338977
Browser --&gt;&gt; Server: GET /8E_cover_small.jpg time:2.530706
Server -&gt;&gt; Browser: pearson.png time:2.609925
Server --&gt;&gt;Browser: 8E_cover_small.jpg time:2.695694
{% endmermaid %}</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="http-authentication">HTTP Authentication<a href="#http-authentication" class="hash-link" aria-label="HTTP Authentication的直接链接" title="HTTP Authentication的直接链接">​</a></h3><p>Operations:</p><ul><li>Enter the following URL into your browser
<a href="http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wireshark-file5.html" target="_blank" rel="noopener noreferrer">http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wireshark-file5.html</a>
Type the requested user name and password into the pop up box.  The username is “wireshark-students” (without the quotes), and the password is “network” (again, without the quotes).</li></ul><p>Packets Captured:</p><table><thead><tr><th>No.</th><th>Time</th><th>Source</th><th>Destination</th><th>Protocol</th><th>Length</th><th>Info</th></tr></thead><tbody><tr><td>125</td><td>5.558621</td><td>192.168.1.3</td><td>128.119.245.12</td><td>HTTP</td><td>597</td><td>GET /wireshark-labs/protected_pages/HTTP-wireshark-file5.html HTTP/1.1</td></tr><tr><td>140</td><td>5.823233</td><td>128.119.245.12</td><td>192.168.1.3</td><td>HTTP</td><td>771</td><td>HTTP/1.1 401 Unauthorized  (text/html)</td></tr><tr><td>726</td><td>26.553076</td><td>192.168.1.3</td><td>128.119.245.12</td><td>HTTP</td><td>656</td><td>GET /wireshark-labs/protected_pages/HTTP-wireshark-file5.html HTTP/1.1</td></tr><tr><td>737</td><td>26.823450</td><td>128.119.245.12</td><td>192.168.1.3</td><td>HTTP</td><td>544</td><td>HTTP/1.1 200 OK  (text/html)</td></tr></tbody></table><p>Packets Details:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 125: 597 bytes on wire (4776 bits), 597 bytes captured (4776 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Micro-St_06:62:ec (00:d8:61:06:62:ec), Dst: Fiberhom_35:92:b1 (74:5d:68:35:92:b1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 192.168.1.3, Dst: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 28007, Dst Port: 80, Seq: 1, Ack: 1, Len: 543</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Hypertext Transfer Protocol</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    GET /wireshark-labs/protected_pages/HTTP-wireshark-file5.html HTTP/1.1\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        [Expert Info (Chat/Sequence): GET /wireshark-labs/protected_pages/HTTP-wireshark-file5.html HTTP/1.1\r\n]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Request Method: GET</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Request URI: /wireshark-labs/protected_pages/HTTP-wireshark-file5.html</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Request Version: HTTP/1.1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Host: gaia.cs.umass.edu\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Connection: keep-alive\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Cache-Control: max-age=0\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Upgrade-Insecure-Requests: 1\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36 Edg/93.0.961.38\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Encoding: gzip, deflate\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wireshark-file5.html]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [HTTP request 1/1]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Response in frame: 140]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 726: 656 bytes on wire (5248 bits), 656 bytes captured (5248 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Micro-St_06:62:ec (00:d8:61:06:62:ec), Dst: Fiberhom_35:92:b1 (74:5d:68:35:92:b1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 192.168.1.3, Dst: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 1028, Dst Port: 80, Seq: 1, Ack: 1, Len: 602</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Hypertext Transfer Protocol</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    GET /wireshark-labs/protected_pages/HTTP-wireshark-file5.html HTTP/1.1\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        [Expert Info (Chat/Sequence): GET /wireshark-labs/protected_pages/HTTP-wireshark-file5.html HTTP/1.1\r\n]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Request Method: GET</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Request URI: /wireshark-labs/protected_pages/HTTP-wireshark-file5.html</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Request Version: HTTP/1.1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Host: gaia.cs.umass.edu\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Connection: keep-alive\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Cache-Control: max-age=0\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Authorization: Basic d2lyZXNoYXJrLXN0dWRlbnRzOm5ldHdvcms=\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        Credentials: wireshark-students:network</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Upgrade-Insecure-Requests: 1\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36 Edg/93.0.961.38\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Encoding: gzip, deflate\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    \r\n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Full request URI: http://gaia.cs.umass.edu/wireshark-labs/protected_pages/HTTP-wireshark-file5.html]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [HTTP request 1/1]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Response in frame: 737]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Q&amp;As:</p><ol start="18"><li>What is the server’s response (status code and phrase) in response to the initial HTTP GET message from your browser?</li></ol><p>401 Unauthorized.</p><ol start="19"><li>When your browser’s sends the HTTP GET message for the second time, what new field is included in the HTTP GET message?
Authorization: Basic d2lyZXNoYXJrLXN0dWRlbnRzOm5ldHdvcms=\r\n</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dns">DNS<a href="#dns" class="hash-link" aria-label="DNS的直接链接" title="DNS的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="trace-dns-from-web-browser">Trace DNS from web browser<a href="#trace-dns-from-web-browser" class="hash-link" aria-label="Trace DNS from web browser的直接链接" title="Trace DNS from web browser的直接链接">​</a></h3><p>Operations:</p><ul><li>Clear DNS cache by 'ipconfig' command</li><li>Open the following URL into your browser
<a href="http://gaia.cs.umass.edu/kurose_ross/index.php" target="_blank" rel="noopener noreferrer">http://gaia.cs.umass.edu/kurose_ross/index.php</a></li></ul><p>Captured packets:</p><table><thead><tr><th>No.</th><th>Time</th><th>Source</th><th>Destination</th><th>Protocol</th><th>Length</th><th>Info</th></tr></thead><tbody><tr><td>20</td><td>4.898665</td><td>fe80::604d:b1a2:55ef:5877</td><td>fe80::1</td><td>DNS</td><td>97</td><td>Standard query 0xcba9 A gaia.cs.umass.edu</td></tr><tr><td>29</td><td>4.908337</td><td>fe80::1</td><td>fe80::604d:b1a2:55ef:5877</td><td>DNS</td><td>113</td><td>Standard query response 0xcba9 A gaia.cs.umass.edu A 128.119.245.12</td></tr></tbody></table><p>Detail of packets:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 20: 97 bytes on wire (776 bits), 97 bytes captured (776 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Micro-St_06:62:ec (00:d8:61:06:62:ec), Dst: Fiberhom_35:92:b1 (74:5d:68:35:92:b1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 6, Src: fe80::604d:b1a2:55ef:5877, Dst: fe80::1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">User Datagram Protocol, Src Port: 61277, Dst Port: 53</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Domain Name System (query)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Transaction ID: 0xcba9</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x0100 Standard query</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Questions: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Answer RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Authority RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Additional RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Queries</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        gaia.cs.umass.edu: type A, class IN</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Name: gaia.cs.umass.edu</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            [Name Length: 17]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            [Label Count: 4]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Type: A (Host Address) (1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Class: IN (0x0001)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Response In: 29]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 29: 113 bytes on wire (904 bits), 113 bytes captured (904 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Fiberhom_35:92:b1 (74:5d:68:35:92:b1), Dst: Micro-St_06:62:ec (00:d8:61:06:62:ec)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 6, Src: fe80::1, Dst: fe80::604d:b1a2:55ef:5877</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">User Datagram Protocol, Src Port: 53, Dst Port: 61277</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Domain Name System (response)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Transaction ID: 0xcba9</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x8180 Standard query response, No error</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Questions: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Answer RRs: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Authority RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Additional RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Queries</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        gaia.cs.umass.edu: type A, class IN</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Name: gaia.cs.umass.edu</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            [Name Length: 17]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            [Label Count: 4]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Type: A (Host Address) (1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Class: IN (0x0001)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Answers</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        gaia.cs.umass.edu: type A, class IN, addr 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Request In: 20]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Time: 0.009672000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Q&amp;As:</p><ol><li>Locate the first DNS query message resolving the name gaia.cs.umass.edu. What is the packet number  in the trace for the DNS query message?  Is this query message sent over UDP or TCP?</li></ol><p>20, UDP.</p><ol start="2"><li>Now locate the corresponding DNS response to the initial DNS query. What is the packet number in the trace for the DNS response message?  Is this response message received via UDP or TCP?   </li></ol><p>29, UDP.</p><ol start="3"><li>What is the destination port for the DNS query message? What is the source port of the DNS response message?</li></ol><p>53 .</p><ol start="4"><li>To what IP address is the DNS query message sent? </li></ol><p>fe80::1.</p><ol start="5"><li>Examine the DNS query message. How many “questions” does this DNS message contain? How many “answers” answers does it contain?</li></ol><p>Questions: 1
Answer RRs: 0</p><ol start="6"><li>Examine the DNS response message to the initial query message. How many “questions” does this DNS message contain? How many “answers” answers does it contain?</li></ol><p>Questions: 1
Answer RRs: 1</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="trace-dns-from-nslookup">Trace DNS from nslookup<a href="#trace-dns-from-nslookup" class="hash-link" aria-label="Trace DNS from nslookup的直接链接" title="Trace DNS from nslookup的直接链接">​</a></h3><p>Operations:</p><ul><li>Clear DNS cache by 'ipconfig' command</li><li>Do an nslookup on <a href="http://www.cs.umass.edu" target="_blank" rel="noopener noreferrer">www.cs.umass.edu</a></li></ul><p>Captured packets:</p><table><thead><tr><th>No.</th><th>Time</th><th>Source</th><th>Destination</th><th>Protocol</th><th>Length</th><th>Info</th></tr></thead><tbody><tr><td>56</td><td>10.981691</td><td>fe80::604d:b1a2:55ef:5877</td><td>fe80::1</td><td>DNS</td><td>96</td><td>Standard query 0x7a54 A <a href="http://www.cs.umass.edu" target="_blank" rel="noopener noreferrer">www.cs.umass.edu</a></td></tr><tr><td>57</td><td>10.981916</td><td>fe80::604d:b1a2:55ef:5877</td><td>fe80::1</td><td>DNS</td><td>96</td><td>Standard query 0xd102 AAAA <a href="http://www.cs.umass.edu" target="_blank" rel="noopener noreferrer">www.cs.umass.edu</a></td></tr><tr><td>58</td><td>11.232144</td><td>fe80::1</td><td>fe80::604d:b1a2:55ef:5877</td><td>DNS</td><td>96</td><td>Standard query response 0xd102 AAAA <a href="http://www.cs.umass.edu" target="_blank" rel="noopener noreferrer">www.cs.umass.edu</a></td></tr><tr><td>59</td><td>11.255062</td><td>fe80::1</td><td>fe80::604d:b1a2:55ef:5877</td><td>DNS</td><td>112</td><td>Standard query response 0x7a54 A <a href="http://www.cs.umass.edu" target="_blank" rel="noopener noreferrer">www.cs.umass.edu</a> A 128.119.240.84</td></tr></tbody></table><p>Detail of packets:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 56: 96 bytes on wire (768 bits), 96 bytes captured (768 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Micro-St_06:62:ec (00:d8:61:06:62:ec), Dst: Fiberhom_35:92:b1 (74:5d:68:35:92:b1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 6, Src: fe80::604d:b1a2:55ef:5877, Dst: fe80::1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">User Datagram Protocol, Src Port: 51185, Dst Port: 53</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Domain Name System (query)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Transaction ID: 0x7a54</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x0100 Standard query</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Questions: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Answer RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Authority RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Additional RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Queries</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        www.cs.umass.edu: type A, class IN</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Name: www.cs.umass.edu</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            [Name Length: 16]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            [Label Count: 4]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Type: A (Host Address) (1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Class: IN (0x0001)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Response In: 59]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 59: 112 bytes on wire (896 bits), 112 bytes captured (896 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Fiberhom_35:92:b1 (74:5d:68:35:92:b1), Dst: Micro-St_06:62:ec (00:d8:61:06:62:ec)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 6, Src: fe80::1, Dst: fe80::604d:b1a2:55ef:5877</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">User Datagram Protocol, Src Port: 53, Dst Port: 51185</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Domain Name System (response)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Transaction ID: 0x7a54</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x8180 Standard query response, No error</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Questions: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Answer RRs: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Authority RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Additional RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Queries</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        www.cs.umass.edu: type A, class IN</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Name: www.cs.umass.edu</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            [Name Length: 16]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            [Label Count: 4]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Type: A (Host Address) (1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Class: IN (0x0001)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Answers</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        www.cs.umass.edu: type A, class IN, addr 128.119.240.84</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Request In: 56]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Time: 0.273371000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Q&amp;As:</p><ol start="7"><li>What is the destination port for the DNS query message? What is the source port of the DNS response message?</li></ol><p>53</p><ol start="8"><li>To what IP address is the DNS query message sent? Is this the IP address of your default local DNS server?</li></ol><p>fe80::1, yes.</p><ol start="9"><li>Examine the DNS query message. What “Type” of DNS query is it? Does the query message contain any “answers”?</li></ol><p>No.</p><ol start="10"><li>Examine the DNS response message to the query message. How many “questions” does this DNS response message contain? How many “answers”?</li></ol><p>Questions: 1
Answer RRs: 1</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="trace-dns-from-nslookup-with-ns-type-record">Trace DNS from nslookup with NS type record<a href="#trace-dns-from-nslookup-with-ns-type-record" class="hash-link" aria-label="Trace DNS from nslookup with NS type record的直接链接" title="Trace DNS from nslookup with NS type record的直接链接">​</a></h3><p>Operations:</p><ul><li>Clear DNS cache by 'ipconfig' command</li><li>Do an nslookup -type=NS umass.edu</li></ul><p>Captured packets:</p><table><thead><tr><th>No.</th><th>Time</th><th>Source</th><th>Destination</th><th>Protocol</th><th>Length</th><th>Info</th></tr></thead><tbody><tr><td>37</td><td>1.731935</td><td>fe80::604d:b1a2:55ef:5877</td><td>fe80::1</td><td>DNS</td><td>89</td><td>Standard query 0x0002 NS umass.edu</td></tr><tr><td>38</td><td>1.738860</td><td>fe80::1</td><td>fe80::604d:b1a2:55ef:5877</td><td>DNS</td><td>143</td><td>Standard query response 0x0002 NS umass.edu NS ns2.umass.edu NS ns1.umass.edu NS ns3.umass.edu</td></tr></tbody></table><p>Detail of packets:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 37: 89 bytes on wire (712 bits), 89 bytes captured (712 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Micro-St_06:62:ec (00:d8:61:06:62:ec), Dst: Fiberhom_35:92:b1 (74:5d:68:35:92:b1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 6, Src: fe80::604d:b1a2:55ef:5877, Dst: fe80::1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">User Datagram Protocol, Src Port: 56756, Dst Port: 53</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Domain Name System (query)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Transaction ID: 0x0002</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x0100 Standard query</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Questions: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Answer RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Authority RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Additional RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Queries</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        umass.edu: type NS, class IN</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Name: umass.edu</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            [Name Length: 9]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            [Label Count: 2]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Type: NS (authoritative Name Server) (2)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Class: IN (0x0001)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Response In: 38]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 38: 143 bytes on wire (1144 bits), 143 bytes captured (1144 bits) on interface \Device\NPF_{0A0B317B-E1D8-4D27-9D8A-9E3EC63057D4}, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Fiberhom_35:92:b1 (74:5d:68:35:92:b1), Dst: Micro-St_06:62:ec (00:d8:61:06:62:ec)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 6, Src: fe80::1, Dst: fe80::604d:b1a2:55ef:5877</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">User Datagram Protocol, Src Port: 53, Dst Port: 56756</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Domain Name System (response)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Transaction ID: 0x0002</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x8180 Standard query response, No error</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Questions: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Answer RRs: 3</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Authority RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Additional RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Queries</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        umass.edu: type NS, class IN</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Name: umass.edu</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            [Name Length: 9]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            [Label Count: 2]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Type: NS (authoritative Name Server) (2)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            Class: IN (0x0001)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Answers</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        umass.edu: type NS, class IN, ns ns2.umass.edu</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        umass.edu: type NS, class IN, ns ns1.umass.edu</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        umass.edu: type NS, class IN, ns ns3.umass.edu</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Request In: 37]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Time: 0.006925000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Q&amp;As:</p><ol start="11"><li>To what IP address is the DNS query message sent? Is this the IP address of your default local DNS server?</li></ol><p>fe80::1, yes.</p><ol start="12"><li>Examine the DNS query message. How many questions does the query have? Does the query message contain any “answers”?</li></ol><p>No.</p><ol start="13"><li>Examine the DNS response message.  How many answers does the response have?  What information is contained in the answers? </li></ol><p>3 answers, name servers of the name in query.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tcp">TCP<a href="#tcp" class="hash-link" aria-label="TCP的直接链接" title="TCP的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="upload-a-150-kb-file">Upload a 150+ KB file<a href="#upload-a-150-kb-file" class="hash-link" aria-label="Upload a 150+ KB file的直接链接" title="Upload a 150+ KB file的直接链接">​</a></h3><p>Captured data:</p><p>Answer the following questions , either from your own live trace, or by opening the Wireshark captured packet file tcp-wireshark-trace1-1 in  <a href="http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces-8.1.zip" target="_blank" rel="noopener noreferrer">http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces-8.1.zip</a>  </p><table><thead><tr><th>No.</th><th>Time</th><th>Source</th><th>Destination</th><th>Protocol</th><th>Length</th><th>Info</th></tr></thead><tbody><tr><td>1</td><td>0.000000</td><td>192.168.86.68</td><td>128.119.245.12</td><td>TCP</td><td>78</td><td>55639  &gt;  80 <!-- -->[SYN]<!-- --> Seq=0 Win=65535 Len=0 MSS=1460 WS=64 TSval=725607509 TSecr=0 SACK_PERM=1</td></tr><tr><td>2</td><td>0.022414</td><td>128.119.245.12</td><td>192.168.86.68</td><td>TCP</td><td>74</td><td>80  &gt;  55639 <!-- -->[SYN, ACK]<!-- --> Seq=0 Ack=1 Win=28960 Len=0 MSS=1460 SACK_PERM=1 TSval=3913851370 TSecr=725607509 WS=128</td></tr><tr><td>3</td><td>0.022505</td><td>192.168.86.68</td><td>128.119.245.12</td><td>TCP</td><td>66</td><td>55639  &gt;  80 <!-- -->[ACK]<!-- --> Seq=1 Ack=1 Win=131712 Len=0 TSval=725607531 TSecr=3913851370</td></tr><tr><td>4</td><td>0.024047</td><td>192.168.86.68</td><td>128.119.245.12</td><td>TCP</td><td>1514</td><td>55639  &gt;  80 <!-- -->[ACK]<!-- --> Seq=1 Ack=1 Win=131712 Len=1448 TSval=725607532 TSecr=3913851370 <!-- -->[TCP segment of a reassembled PDU]</td></tr><tr><td>5</td><td>0.024048</td><td>192.168.86.68</td><td>128.119.245.12</td><td>TCP</td><td>1514</td><td>55639  &gt;  80 <!-- -->[ACK]<!-- --> Seq=1449 Ack=1 Win=131712 Len=1448 TSval=725607532 TSecr=3913851370 <!-- -->[TCP segment of a reassembled PDU]</td></tr><tr><td>6</td><td>0.024049</td><td>192.168.86.68</td><td>128.119.245.12</td><td>TCP</td><td>1514</td><td>55639  &gt;  80 <!-- -->[ACK]<!-- --> Seq=2897 Ack=1 Win=131712 Len=1448 TSval=725607532 TSecr=3913851370 <!-- -->[TCP segment of a reassembled PDU]</td></tr><tr><td>7</td><td>0.052671</td><td>128.119.245.12</td><td>192.168.86.68</td><td>TCP</td><td>66</td><td>80  &gt;  55639 <!-- -->[ACK]<!-- --> Seq=1 Ack=1449 Win=31872 Len=0 TSval=3913851399 TSecr=725607532</td></tr><tr><td>8</td><td>0.052676</td><td>128.119.245.12</td><td>192.168.86.68</td><td>TCP</td><td>66</td><td>80  &gt;  55639 <!-- -->[ACK]<!-- --> Seq=1 Ack=2897 Win=34816 Len=0 TSval=3913851400 TSecr=725607532</td></tr><tr><td>9</td><td>0.052774</td><td>192.168.86.68</td><td>128.119.245.12</td><td>TCP</td><td>1514</td><td>55639  &gt;  80 <!-- -->[ACK]<!-- --> Seq=4345 Ack=1 Win=131712 Len=1448 TSval=725607560 TSecr=3913851399 <!-- -->[TCP segment of a reassembled PDU]</td></tr><tr><td>10</td><td>0.052775</td><td>192.168.86.68</td><td>128.119.245.12</td><td>TCP</td><td>1514</td><td>55639  &gt;  80 <!-- -->[ACK]<!-- --> Seq=5793 Ack=1 Win=131712 Len=1448 TSval=725607560 TSecr=3913851399 <!-- -->[TCP segment of a reassembled PDU]</td></tr><tr><td>11</td><td>0.052854</td><td>192.168.86.68</td><td>128.119.245.12</td><td>TCP</td><td>1514</td><td>55639  &gt;  80 <!-- -->[ACK]<!-- --> Seq=7241 Ack=1 Win=131712 Len=1448 TSval=725607560 TSecr=3913851400 <!-- -->[TCP segment of a reassembled PDU]</td></tr><tr><td>12</td><td>0.052855</td><td>192.168.86.68</td><td>128.119.245.12</td><td>TCP</td><td>1514</td><td>55639  &gt;  80 <!-- -->[ACK]<!-- --> Seq=8689 Ack=1 Win=131712 Len=1448 TSval=725607560 TSecr=3913851400 <!-- -->[TCP segment of a reassembled PDU]</td></tr><tr><td>13</td><td>0.053626</td><td>128.119.245.12</td><td>192.168.86.68</td><td>TCP</td><td>66</td><td>80  &gt;  55639 <!-- -->[ACK]<!-- --> Seq=1 Ack=4345 Win=37760 Len=0 TSval=3913851400 TSecr=725607532</td></tr><tr><td>14</td><td>0.053710</td><td>192.168.86.68</td><td>128.119.245.12</td><td>TCP</td><td>1514</td><td>55639  &gt;  80 <!-- -->[ACK]<!-- --> Seq=10137 Ack=1 Win=131712 Len=1448 TSval=725607560 TSecr=3913851400 <!-- -->[TCP segment of a reassembled PDU]</td></tr><tr><td>15</td><td>0.053711</td><td>192.168.86.68</td><td>128.119.245.12</td><td>TCP</td><td>1514</td><td>55639  &gt;  80 <!-- -->[ACK]<!-- --> Seq=11585 Ack=1 Win=131712 Len=1448 TSval=725607560 TSecr=3913851400 <!-- -->[TCP segment of a reassembled PDU]</td></tr><tr><td>16</td><td>0.080768</td><td>128.119.245.12</td><td>192.168.86.68</td><td>TCP</td><td>66</td><td>80  &gt;  55639 <!-- -->[ACK]<!-- --> Seq=1 Ack=5793 Win=40576 Len=0 TSval=3913851421 TSecr=725607560</td></tr><tr><td>17</td><td>0.080771</td><td>128.119.245.12</td><td>192.168.86.68</td><td>TCP</td><td>66</td><td>80  &gt;  55639 <!-- -->[ACK]<!-- --> Seq=1 Ack=7241 Win=43520 Len=0 TSval=3913851422 TSecr=725607560</td></tr><tr><td>18</td><td>0.080772</td><td>128.119.245.12</td><td>192.168.86.68</td><td>TCP</td><td>66</td><td>80  &gt;  55639 <!-- -->[ACK]<!-- --> Seq=1 Ack=8689 Win=46336 Len=0 TSval=3913851422 TSecr=725607560</td></tr><tr><td>19</td><td>0.080772</td><td>128.119.245.12</td><td>192.168.86.68</td><td>TCP</td><td>66</td><td>80  &gt;  55639 <!-- -->[ACK]<!-- --> Seq=1 Ack=10137 Win=49280 Len=0 TSval=3913851422 TSecr=725607560</td></tr><tr><td>20</td><td>0.080845</td><td>192.168.86.68</td><td>128.119.245.12</td><td>TCP</td><td>1514</td><td>55639  &gt;  80 <!-- -->[ACK]<!-- --> Seq=13033 Ack=1 Win=131712 Len=1448 TSval=725607588 TSecr=3913851421 <!-- -->[TCP segment of a reassembled PDU]</td></tr></tbody></table><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 1: 78 bytes on wire (624 bits), 78 bytes captured (624 bits) on interface en0, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Apple_98:d9:27 (78:4f:43:98:d9:27), Dst: Google_89:0e:c8 (3c:28:6d:89:0e:c8)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 192.168.86.68, Dst: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 55639, Dst Port: 80, Seq: 0, Len: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Source Port: 55639</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Destination Port: 80</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Stream index: 0]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [TCP Segment Len: 0]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Sequence Number: 0    (relative sequence number)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Sequence Number (raw): 4236649187</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Next Sequence Number: 1    (relative sequence number)]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Acknowledgment Number: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Acknowledgment number (raw): 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    1011 .... = Header Length: 44 bytes (11)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x002 (SYN)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Window: 65535</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Calculated window size: 65535]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Checksum: 0xa1e4 [unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Checksum Status: Unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Urgent Pointer: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Options: (24 bytes), Maximum segment size, No-Operation (NOP), Window scale, No-Operation (NOP), No-Operation (NOP), Timestamps, SACK permitted, End of Option List (EOL)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - Maximum segment size: 1460 bytes</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - No-Operation (NOP)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - Window scale: 6 (multiply by 64)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - No-Operation (NOP)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - No-Operation (NOP)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - Timestamps: TSval 725607509, TSecr 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - SACK permitted</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - End of Option List (EOL)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Timestamps]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 2: 74 bytes on wire (592 bits), 74 bytes captured (592 bits) on interface en0, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Google_89:0e:c8 (3c:28:6d:89:0e:c8), Dst: Apple_98:d9:27 (78:4f:43:98:d9:27)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 128.119.245.12, Dst: 192.168.86.68</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 80, Dst Port: 55639, Seq: 0, Ack: 1, Len: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Source Port: 80</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Destination Port: 55639</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Stream index: 0]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [TCP Segment Len: 0]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Sequence Number: 0    (relative sequence number)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Sequence Number (raw): 1068969752</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Next Sequence Number: 1    (relative sequence number)]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Acknowledgment Number: 1    (relative ack number)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Acknowledgment number (raw): 4236649188</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    1010 .... = Header Length: 40 bytes (10)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x012 (SYN, ACK)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Window: 28960</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Calculated window size: 28960]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Checksum: 0x47b4 [unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Checksum Status: Unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Urgent Pointer: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Options: (20 bytes), Maximum segment size, SACK permitted, Timestamps, No-Operation (NOP), Window scale</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - Maximum segment size: 1460 bytes</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - SACK permitted</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - Timestamps: TSval 3913851370, TSecr 725607509</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - No-Operation (NOP)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - Window scale: 7 (multiply by 128)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [SEQ/ACK analysis]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Timestamps]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Frame 4: 1514 bytes on wire (12112 bits), 1514 bytes captured (12112 bits) on interface en0, id 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Ethernet II, Src: Apple_98:d9:27 (78:4f:43:98:d9:27), Dst: Google_89:0e:c8 (3c:28:6d:89:0e:c8)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 192.168.86.68, Dst: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 55639, Dst Port: 80, Seq: 1, Ack: 1, Len: 1448</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Source Port: 55639</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Destination Port: 80</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Stream index: 0]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [TCP Segment Len: 1448]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Sequence Number: 1    (relative sequence number)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Sequence Number (raw): 4236649188</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Next Sequence Number: 1449    (relative sequence number)]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Acknowledgment Number: 1    (relative ack number)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Acknowledgment number (raw): 1068969753</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    1000 .... = Header Length: 32 bytes (8)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x010 (ACK)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Window: 2058</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Calculated window size: 131712]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Window size scaling factor: 64]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Checksum: 0xbd21 [unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Checksum Status: Unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Urgent Pointer: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Options: (12 bytes), No-Operation (NOP), No-Operation (NOP), Timestamps</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - No-Operation (NOP)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - No-Operation (NOP)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        TCP Option - Timestamps: TSval 725607532, TSecr 3913851370</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [SEQ/ACK analysis]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Timestamps]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    TCP payload (1448 bytes)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Reassembled PDU in frame: 153]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    TCP segment data (1448 bytes)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Q&amp;As:</p><ol><li>What is the sequence number of the TCP SYN segment that is used to initiate the TCP connection between the client computer and gaia.cs.umass.edu? (Note: this is the “raw” sequence number carried in the TCP segment itself; it is NOT the packet # in the “No.” column in the Wireshark window.  Remember there is no such thing as a “packet number” in TCP or UDP; as you know, there are sequence numbers in TCP and that’s what we’re after here.  Also note that this is not the relative sequence number with respect to the starting sequence number of this TCP session.). What is it in this TCP segment that identifies the segment as a SYN segment? Will the TCP receiver in this session be able to use Selective Acknowledgments (allowing TCP to function a bit more like a “selective repeat” receiver, see section 3.4.5 in the text)?</li></ol><p>Sequence Number (raw): 4236649187. </p><p>The 'Flags: 0x002 (SYN)' identifies the segment as a SYN segment.</p><p>Yes, there is an option 'SACK permitted'.</p><ol start="2"><li>What is the sequence number of the SYNACK segment sent by gaia.cs.umass.edu to the client computer in reply to the SYN? What is it in the segment that identifies the segment as a SYNACK segment? What is the value of the Acknowledgement field in the SYNACK segment? How did gaia.cs.umass.edu determine that value? </li></ol><p>Sequence Number (raw): 1068969752</p><p>Flags: 0x012 (SYN, ACK) identifies the segment as a SYNACK segment.</p><p>Acknowledgment number (raw): 4236649188</p><p>Ack = Seq<sub>(peer)</sub> + 1.</p><ol start="3"><li>What is the sequence number of the TCP segment containing the header of the HTTP POST command?  Note that in order to find the POST message header, you’ll need to dig into the packet content field at the bottom of the Wireshark window, looking for a segment with the ASCII text “POST” within its DATA field , .  How many bytes of data are contained in the payload (data) field of this TCP segment? Did all of the data in the transferred file alice.txt fit into this single segment?</li></ol><p>Sequence Number (raw): 4236649188. </p><p>TCP payload (1448 bytes).</p><p>No.</p><ol start="4"><li>Consider the TCP segment containing the HTTP “POST” as the first segment in the data transfer part of the TCP connection.<br>•	At what time was the first segment (the one containing the HTTP POST) in the
data-transfer part of the TCP connection sent?  </li></ol><p>0.024047s.</p><p>•	At what time was the ACK for this first data-containing segment received?  </p><p>0.052671s.</p><p>•	What is the RTT for this first data-containing segment? </p><p>[The RTT to ACK the segment was: 0.028624000 seconds]</p><p>•	What is the RTT value the second data-carrying TCP segment and its ACK? </p><p>[The RTT to ACK the segment was: 0.028628000 seconds]</p><p>•	What is the EstimatedRTT value (see Section 3.5.3, in the text) after the ACK for the second data-carrying segment is received? Assume that in making this calculation after the received of the ACK for the second segment, that the initial value of EstimatedRTT is equal to the measured RTT for the first segment, and then is computed using the EstimatedRTT equation on page 242, and a value of <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em"></span><span class="mord mathnormal" style="margin-right:0.0037em">α</span></span></span></span></span> = 0.125.
Note: Wireshark has a nice feature that allows you to plot the RTT for each of the TCP segments sent.  Select a TCP segment in the “listing of captured packets” window that is being sent from the client to the gaia.cs.umass.edu server.  Then select: Statistics-&gt;TCP Stream Graph-&gt;Round Trip Time Graph.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain"># mesured RTT for these two packets.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[The RTT to ACK the segment was: 0.028624000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[The RTT to ACK the segment was: 0.028628000 seconds]```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>EstimatedRTT = (1 – α) • EstimatedRTT + α • SampleRTT</p><p>So EstimatedRTT is <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.875</mn><mo>∗</mo><mn>0.028624000</mn><mo>+</mo><mn>0.125</mn><mo>∗</mo><mn>0.028628000</mn><mo>=</mo><mn>0.02862449</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">0.875*0.028624000 + 0.125*0.028628000 = 0.02862449s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">0.875</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em"></span><span class="mord">0.028624000</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">0.125</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">0.028628000</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">0.02862449</span><span class="mord mathnormal">s</span></span></span></span></span>.</p><ol start="5"><li>What is the length (header plus payload) of each of the first four data-carrying TCP segments? </li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Transmission Control Protocol, Src Port: 55639, Dst Port: 80, Seq: 1, Ack: 1, Len: 1448</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    TCP segment data (1448 bytes)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>1448 Bytes.</p><ol start="6"><li>What is the minimum amount of available buffer space advertised to the client by gaia.cs.umass.edu among these first four data-carrying TCP segments ?  Does the lack of receiver buffer space ever throttle the sender for these first four data-carrying segments?</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">[Calculated window size: 31872]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[Calculated window size: 34816]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[Calculated window size: 37760]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[Calculated window size: 40576]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The lack of receiver buffer space <strong>never</strong> throttle the sender for these first four data-carrying segments</p><ol start="7"><li><p>Are there any retransmitted segments in the trace file? What did you check for (in the trace) in order to answer this question?</p><p>In the TimeSequence-Graph (Stevens) of this trace (if it's a straight line, click the reset direction button), all sequence numbers are incresing monotonically.</p></li></ol><ol start="8"><li>How much data does the receiver typically acknowledge in an ACK among the first ten data-carrying segments sent from the client to gaia.cs.umass.edu?  Can you identify cases where the receiver is ACKing every other received segment (see Table 3.2 in the text) among these first ten data-carrying segments?</li></ol><p>1448 bytes, No.8 packet Ack=2897, and No.7 Ack=1449, it is Acking 1448 bytes.</p><ol start="9"><li>What is the throughput (bytes transferred per unit time) for the TCP connection?  Explain how you calculated this value.</li></ol><p>The last Ack is 153426, time is 0.191496s, and the first data carrying packet's time is 0.024047, so <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>=</mo><mn>153426</mn><mi>b</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>0.191496</mn><mi>s</mi><mo>−</mo><mn>0.024047</mn><mi>s</mi><mo stretchy="false">)</mo><mo>≈</mo><mn>916255</mn><mi>b</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi mathvariant="normal">/</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">bandwidth = 153426 byte / (0.191496s - 0.024047s) \approx 916255 byte/s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em"></span><span class="mord mathnormal">ban</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02691em">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord">153426</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em">y</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord">/</span><span class="mopen">(</span><span class="mord">0.191496</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord">0.024047</span><span class="mord mathnormal">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord">916255</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em">y</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord">/</span><span class="mord mathnormal">s</span></span></span></span></span></p><ol start="10"><li>Use the Time-Sequence-Graph(Stevens) plotting tool to view the sequence number versus time plot of segments being sent from the client to the gaia.cs.umass.edu server.  Consider the “fleets” of packets sent around t = 0.025, t = 0.053, t = 0.082 and t = 0.1. Comment on whether this looks as if TCP is in its slow start phase, congestion avoidance phase or some other phase. Figure 6 shows a slightly different view of this data.</li></ol><p>Yes, in <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mn>0.025</mn></mrow><annotation encoding="application/x-tex">t=0.025</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">0.025</span></span></span></span></span> about 4 packets received, <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mn>0.053</mn></mrow><annotation encoding="application/x-tex">t=0.053</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">0.053</span></span></span></span></span> about 6 packets received, <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mn>0.082</mn></mrow><annotation encoding="application/x-tex">t=0.082</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">0.082</span></span></span></span></span> about 12 packets received, <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mn>0.1</mn></mrow><annotation encoding="application/x-tex">t=0.1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">0.1</span></span></span></span></span> about 24 packets received, It is 'slow start' mechanism of TCP, the window size grows up exponentially.</p><ol start="11"><li>These “fleets” of segments appear to have some periodicity. What can you say about the period?</li></ol><p>The period is close to the RTT, because the TCP need a RTT time at averange to calculate the new Esitimated RTT and decides how many packets will be sent.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="udp">UDP<a href="#udp" class="hash-link" aria-label="UDP的直接链接" title="UDP的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="trigger-udp-packets-through-nslookup">Trigger UDP packets through nslookup<a href="#trigger-udp-packets-through-nslookup" class="hash-link" aria-label="Trigger UDP packets through nslookup的直接链接" title="Trigger UDP packets through nslookup的直接链接">​</a></h3><p>Captured data:</p><p>Answer the following questions , either from your own live trace, or by opening the Wireshark captured packet trace file dns-wireshark-trace1-1 in  <a href="http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces-8.1.zip" target="_blank" rel="noopener noreferrer">http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces-8.1.zip</a>  </p><ol><li>Select the first UDP segment in your trace. What is the packet number  of this segment in the trace file?  What type of application-layer payload or protocol message is being carried in this UDP segment?  Look at the details of this packet in Wireshark.  How many fields there are in the UDP header? (You shouldn’t look in the textbook! Answer these questions directly from what you observe in the packet trace.) What are the names of these fields? </li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">User Datagram Protocol, Src Port: 47931, Dst Port: 1900</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Source Port: 47931</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Destination Port: 1900</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Length: 283</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Checksum: 0xf7a8 [unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Checksum Status: Unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Stream index: 0]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Timestamps]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        [Time since first frame: 0.000000000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        [Time since previous frame: 0.000000000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    UDP payload (275 bytes)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>5th, SSDP(Simple Service Discovery Protocol), There are 4 fields in UDP Header: Source Port, Destination Port, Length, Checksum.</p><ol start="2"><li>By consulting the displayed information in Wireshark’s packet content field for this packet (or by consulting the textbook), what is the length (in bytes) of each of the UDP header fields?</li></ol><p>Through observation, length of each field is 2 bytes.</p><ol start="3"><li>The value in the Length field is the length of what? (You can consult the text for this answer). Verify your claim with your captured UDP packet. </li></ol><p>The value of the length field is 283, which is  (UDP payload (275 bytes) + Header length(8 bytes) ).</p><ol start="4"><li>What is the maximum number of bytes that can be included in a UDP payload?  (Hint: the answer to this question can be determined by your answer to 2. above)</li></ol><p>The Maximum value of length field is 0xFFFF(65535 in decimal), so maximum bytes of payload is <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>65535</mn><mo>−</mo><mn>8</mn><mo>=</mo><mn>65527</mn><mi>b</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">65535 - 8 = 65527bytes</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em"></span><span class="mord">65535</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em"></span><span class="mord">65527</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em">y</span><span class="mord mathnormal">t</span><span class="mord mathnormal">es</span></span></span></span></span>.</p><ol start="5"><li>What is the largest possible source port number? (Hint: see the hint in 4.)</li></ol><p>It is 65535.</p><ol start="6"><li>What is the protocol number for UDP? Give your answer in decimal notation. To answer this question, you’ll need to look into the Protocol field of the IP datagram containing this UDP segment (see Figure 4.13 in the text, and the discussion of IP header fields). </li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 10.0.0.254, Dst: 239.255.255.250</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    0100 .... = Version: 4</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    .... 0101 = Header Length: 20 bytes (5)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Total Length: 303</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Identification: 0xa1c3 (41411)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x40, Don't fragment</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Fragment Offset: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Time to Live: 4</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Protocol: UDP (17)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Header Checksum: 0xd902 [validation disabled]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Header checksum status: Unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Source Address: 10.0.0.254</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Destination Address: 239.255.255.250</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>It is 17.</p><ol start="7"><li>Examine the pair of UDP packets in which your host sends the first UDP packet and the second UDP packet is a reply to this first UDP packet. (Hint: for a second packet to be sent in response to a first packet, the sender of the first packet should be the destination of the second packet).  What is the packet number  of the first of these two UDP segments in the trace file?  What is the packet number  of the second of these two UDP segments in the trace file? Describe the relationship between the port numbers in the two packets. </li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">request:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">User Datagram Protocol, Src Port: 58350, Dst Port: 53</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Source Port: 58350</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Destination Port: 53</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Length: 43</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Checksum: 0xc31d [unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Checksum Status: Unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Stream index: 1]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Timestamps]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        [Time since first frame: 0.000000000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        [Time since previous frame: 0.000000000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    UDP payload (35 bytes)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">response:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">User Datagram Protocol, Src Port: 53, Dst Port: 58350</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Source Port: 53</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Destination Port: 58350</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Length: 59</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Checksum: 0x4af2 [unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Checksum Status: Unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Stream index: 1]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Timestamps]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        [Time since first frame: 0.023908000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        [Time since previous frame: 0.023908000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    UDP payload (51 bytes)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The destination port of the response packet is same as the request packet's source port, reverse is also true.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ip">IP<a href="#ip" class="hash-link" aria-label="IP的直接链接" title="IP的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="capturing-packets-from-an-execution-of-traceroute">Capturing packets from an execution of traceroute<a href="#capturing-packets-from-an-execution-of-traceroute" class="hash-link" aria-label="Capturing packets from an execution of traceroute的直接链接" title="Capturing packets from an execution of traceroute的直接链接">​</a></h3><p>Captured data:</p><p>Answer the following questions , either from your own live trace, or by opening the Wireshark captured packet trace file ip-wireshark-trace1-1.pcapng in  <a href="http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces-8.1.zip" target="_blank" rel="noopener noreferrer">http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces-8.1.zip</a>  </p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="part-1-basic-ipv4">Part 1: Basic IPv4<a href="#part-1-basic-ipv4" class="hash-link" aria-label="Part 1: Basic IPv4的直接链接" title="Part 1: Basic IPv4的直接链接">​</a></h4><ol><li>Select the first UDP segment sent by your computer via the traceroute command to gaia.cs.umass.edu. (Hint: this is 44th packet in the trace file in the ip-wireshark-trace1-1.pcapng file in footnote 2). Expand the Internet Protocol part of the packet in the packet details window.  What is the IP address of your computer?</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 192.168.86.61, Dst: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    0100 .... = Version: 4</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    .... 0101 = Header Length: 20 bytes (5)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Total Length: 56</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Identification: 0xfda1 (64929)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x00</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Fragment Offset: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Time to Live: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Protocol: UDP (17)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Header Checksum: 0x2faa [validation disabled]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Header checksum status: Unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Source Address: 192.168.86.61</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Destination Address: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>IP of local computer is 192.168.86.61 .</p><ol start="2"><li>What is the value in the time-to-live (TTL) field in this IPv4 datagram’s header?</li></ol><p>1 .</p><ol start="3"><li>What is the value in the upper layer protocol field in this IPv4 datagram’s header? <!-- -->[Note: the answers for Linux/MacOS differ from Windows here]<!-- -->.</li></ol><p>Protocol: UDP (17).</p><ol start="4"><li>How many bytes are in the IP header? </li></ol><p>.... 0101 = Header Length: 20 bytes (5).</p><ol start="5"><li>How many bytes are in the payload of the IP datagram?  Explain how you determined the number of payload bytes.</li></ol><p><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>a</mi><mi>y</mi><mi>l</mi><mi>o</mi><mi>a</mi><mi>d</mi><mi>L</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mo>=</mo><mi>T</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>L</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mo>−</mo><mi>H</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi><mi>L</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi><mo>=</mo><mn>56</mn><mo>−</mo><mn>20</mn><mo>=</mo><mn>36</mn><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">Payload Length = Total Length - Header Length = 56 - 20 = 36 Bytes</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em"></span><span class="mord mathnormal" style="margin-right:0.13889em">P</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em">y</span><span class="mord mathnormal" style="margin-right:0.01968em">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em">g</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em"></span><span class="mord mathnormal" style="margin-right:0.13889em">T</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em">l</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em">g</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em"></span><span class="mord mathnormal">He</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02778em">er</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em">g</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em"></span><span class="mord">56</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">20</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em"></span><span class="mord">36</span><span class="mord mathnormal" style="margin-right:0.05017em">B</span><span class="mord mathnormal" style="margin-right:0.03588em">y</span><span class="mord mathnormal">t</span><span class="mord mathnormal">es</span></span></span></span></span></p><ol start="6"><li>Has this IP datagram been fragmented?  Explain how you determined whether or not the datagram has been fragmented.</li></ol><p>No, if it is fragmented, the payload length of IP layer should be less than the Length of upper layer.</p><ol start="7"><li>Which fields in the IP datagram always change from one datagram to the next within this series of UDP segments sent by your computer destined to 128.119.245.12, via traceroute?  Why?</li></ol><p>TTL and destination port, because traceroute set the TTL to n to trigger a ICMP response packet (ttl exceeded) on the <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mrow><mi>t</mi><mi>h</mi></mrow></msub></mrow><annotation encoding="application/x-tex">n_{th}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span></span></span></span></span> hot of the route of the packet. destination port is used to track the coresponding response of each packet. </p><ol start="8"><li>Which fields in this sequence of IP datagrams (containing UDP segments) stay constant? Why?</li></ol><p>The destination IP and the source port/IP, because the function of traceroute is to trace the route between the source IP and a specific destination IP.</p><ol start="9"><li>Describe the pattern you see in the values in the Identification field of the IP datagrams being sent by your computer.</li></ol><p>Plus 1 after every packet sent.</p><ol start="10"><li>What is the upper layer protocol specified in the IP datagrams returned from the routers? <!-- -->[Note: the answers for Linux/MacOS differ from Windows here]<!-- -->.</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 192.168.86.1, Dst: 192.168.86.61</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    0100 .... = Version: 4</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    .... 0101 = Header Length: 20 bytes (5)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Differentiated Services Field: 0xc0 (DSCP: CS6, ECN: Not-ECT)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Total Length: 84</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Identification: 0x6889 (26761)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x00</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Fragment Offset: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Time to Live: 64</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Protocol: ICMP (1)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Header Checksum: 0xe3d0 [validation disabled]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Header checksum status: Unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Source Address: 192.168.86.1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Destination Address: 192.168.86.61</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Protocol: ICMP (1).</p><ol start="11"><li>Are the values in the Identification fields (across the sequence of all of ICMP packets from all of the routers) similar in behavior to your answer to question 9 above?</li></ol><p>Yes.</p><ol start="12"><li> Are the values of the TTL fields similar, across all of ICMP packets from all of the routers?</li></ol><p>All equals to 1.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="part-2-fragmentation">Part 2: Fragmentation<a href="#part-2-fragmentation" class="hash-link" aria-label="Part 2: Fragmentation的直接链接" title="Part 2: Fragmentation的直接链接">​</a></h4><ol start="14"><li>What information in the IP header indicates that this datagram been fragmented?  </li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 192.168.86.61, Dst: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    0100 .... = Version: 4</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    .... 0101 = Header Length: 20 bytes (5)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Total Length: 1500</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Identification: 0xfda2 (64930)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x20, More fragments</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        0... .... = Reserved bit: Not set</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        .0.. .... = Don't fragment: Not set</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        ..1. .... = More fragments: Set</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Fragment Offset: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Time to Live: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Protocol: UDP (17)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Header Checksum: 0x0a05 [validation disabled]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Header checksum status: Unverified]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Source Address: 192.168.86.61</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Destination Address: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Reassembled IPv4 in frame: 181]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Flags: 0x20, More fragments.</p><ol start="15"><li>What information in the IP header for this packet indicates whether this is the first fragment versus a latter fragment?  </li></ol><p>Fragment Offset: 0 indicates it is the first fragment, offset is non-zero value indicates it is a latter fragment.</p><ol start="16"><li>How many bytes are there in is this IP datagram (header plus payload)?</li></ol><p>Total Length: 1500.</p><ol start="17"><li>Now inspect the datagram containing the second fragment of the fragmented UDP segment. What information in the IP header indicates that this is not the first datagram fragment?  </li></ol><p>Fragment Offset: 1480.</p><ol start="18"><li>What fields change in the IP header between the first and second fragment?</li></ol><p>Fragment Offset and Header checksum.</p><ol start="19"><li>Now find the IP datagram containing the third fragment of the original UDP segment. What information in the IP header indicates that this is the last fragment of that segment?  </li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 4, Src: 192.168.86.61, Dst: 128.119.245.12</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    0100 .... = Version: 4</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    .... 0101 = Header Length: 20 bytes (5)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Total Length: 40</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Identification: 0xfda2 (64930)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x01</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        0... .... = Reserved bit: Not set</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        .0.. .... = Don't fragment: Not set</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        ..0. .... = More fragments: Not set</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Fragment Offset: 2960</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Flags: 0x01, ..0. .... = More fragments: Not set.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="capturing-ipv6-packets">Capturing IPV6 packets<a href="#capturing-ipv6-packets" class="hash-link" aria-label="Capturing IPV6 packets的直接链接" title="Capturing IPV6 packets的直接链接">​</a></h3><p>Captured data:</p><p>Answer the following questions , either from your own live trace, or by opening the Wireshark captured packet trace file  ip-wireshark-trace2-1.pcapng in  <a href="http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces-8.1.zip" target="_blank" rel="noopener noreferrer">http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces-8.1.zip</a>  </p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="part-3-ipv6">Part 3: IPv6<a href="#part-3-ipv6" class="hash-link" aria-label="Part 3: IPv6的直接链接" title="Part 3: IPv6的直接链接">​</a></h4><p>Let’s start by taking a closer look at the 20th packet in this trace, sent at t=3.814489.  This is a DNS request (contained in an IPv6 datagram) to an IPv6 DNS server for the IPv6 address of youtube.com.</p><ol start="20"><li>What is the IPv6 address of the computer making the DNS AAAA request?  This is the source address of the 20th packet in the trace. Give the IPv6 source address for this datagram in the exact same form as displayed in the Wireshark window .</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Internet Protocol Version 6, Src: 2601:193:8302:4620:215c:f5ae:8b40:a27a, Dst: 2001:558:feed::1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    0110 .... = Version: 6</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    .... 0000 0000 .... .... .... .... .... = Traffic Class: 0x00 (DSCP: CS0, ECN: Not-ECT)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    .... .... .... 0110 0011 1110 1101 0000 = Flow Label: 0x63ed0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Payload Length: 37</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Next Header: UDP (17)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Hop Limit: 255</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Source Address: 2601:193:8302:4620:215c:f5ae:8b40:a27a</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Destination Address: 2001:558:feed::1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>2601:193:8302:4620:215c:f5ae:8b40:a27a</p><ol start="21"><li>What is the IPv6 destination address for this datagram? Give this IPv6 address in the exact same form as displayed in the Wireshark window.  </li></ol><p>2001:558:feed::1</p><ol start="22"><li>What is the value of the flow label for this datagram?</li></ol><p>.... .... .... 0110 0011 1110 1101 0000 = Flow Label: 0x63ed0</p><ol start="23"><li>How much payload data is carried in this datagram?</li></ol><p>Payload Length: 37</p><ol start="24"><li>What is the upper layer protocol to which this datagram’s payload will be delivered at the destination?</li></ol><p>Next Header: UDP (17)</p><p>Lastly,  find the IPv6 DNS response to the IPv6 DNS AAAA request made in the 20th packet in this trace.  This DNS response contains IPv6 addresses for youtube.com.</p><ol start="25"><li>How many IPv6 addresses are returned in the response to this AAAA request?</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Domain Name System (response)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Transaction ID: 0x920d</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Flags: 0x8180 Standard query response, No error</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Questions: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Answer RRs: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Authority RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Additional RRs: 0</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Queries</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Answers</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        youtube.com: type AAAA, class IN, addr 2607:f8b0:4006:815::200e</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Request In: 20]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    [Time: 0.140916000 seconds]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Only one.</p><ol start="26"><li>What is the first of the IPv6 addresses returned by the DNS for youtube.com (in the ip-wireshark-trace2-1.pcapng trace file, this is also the address that is numerically the smallest)? Give this IPv6 address in the exact same shorthand form as displayed in the Wireshark window.</li></ol><p>2607:f8b0:4006:815::200e.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="nat">NAT<a href="#nat" class="hash-link" aria-label="NAT的直接链接" title="NAT的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="capturing-packets-from-an-execution-of-traceroute-1">Capturing packets from an execution of traceroute<a href="#capturing-packets-from-an-execution-of-traceroute-1" class="hash-link" aria-label="Capturing packets from an execution of traceroute的直接链接" title="Capturing packets from an execution of traceroute的直接链接">​</a></h3><p>Captured data:</p><p>Answer the following questions, either from your own live trace, or by opening the Wireshark captured packet trace file nat-inside-wireshark-trace1-1.pcapng and nat-outside-wireshark-trace1-1.pcapng in  <a href="http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces-8.1.zip" target="_blank" rel="noopener noreferrer">http://gaia.cs.umass.edu/wireshark-labs/wireshark-traces-8.1.zip</a>  </p><p>Let’s first take a look at what’s happening on the LAN side of the NAT router. Open the nat-inside-wireshark-trace1-1.pcapng trace file. In this file, you should see an HTTP GET request addressed to the external web server at IP address 138.76.29.8, as well as the subsequent HTTP response message (“200 OK”). Both of these messages in the trace file were captured on the LAN side of the router. </p><ol><li>What is the IP address of the client that sends the HTTP GET request in the nat-inside-wireshark-trace1-1.pcapng trace? What is the source port number of the TCP segment in this datagram containing the HTTP GET request? What is the destination IP address of this HTTP GET request? What is the destination port number of the TCP segment in this datagram containing the HTTP GET request?</li></ol><p>Internet Protocol Version 4, Src: 192.168.10.11, Dst: 138.76.29.8</p><p>Transmission Control Protocol, Src Port: 53924, Dst Port: 80, Seq: 1, Ack: 1, Len: 330</p><ol start="2"><li>At what time  is the corresponding HTTP 200 OK message from the webserver forwarded by the NAT router to the client on the router’s LAN side? </li></ol><p>[Time since first frame in this TCP stream: 0.030672101 seconds]<!-- -->
.</p><ol start="3"><li>What are the source and destination IP addresses and TCP source and destination ports on the IP datagram carrying this HTTP 200 OK message?</li></ol><p>Internet Protocol Version 4, Src: 138.76.29.8, Dst: 192.168.10.11</p><p>Transmission Control Protocol, Src Port: 80, Dst Port: 53924, Seq: 1, Ack: 331, Len: 547</p><p>In the following we’ll focus on these two HTTP messages (GET and 200 OK). Our goal below will be to locate these two HTTP messages in the trace file nat-outside-wireshark-trace1-1.pcapng, captured on the Internet-side link between the router and the ISP. Because the captured packets heading towards the server will have already been forwarded through the NAT router, some of the IP address and port numbers will have been changed as a result of NAT translation.</p><p>Open the trace file nat-outside-wireshark-trace1-1.pcapng. Note that the time stamps in this file and the nat-inside-wireshark-trace1-1.pcapng file are not necessarily synchronized. </p><p>In the nat-outside-wireshark-trace1-1.pcapng trace file, find the HTTP GET message that corresponds to the HTTP GET message that was sent from the client to the 138.76.29.8 server at time t=0.27362245, where t=0.27362245 is the time at which this message was sent, as recorded in the nat-inside-wireshark-trace1-1.pcapng trace file.<br>
<!-- -->4.	At what time does this HTTP GET message appear in the nat-outside-wireshark-trace1-1.pcapng trace file? </p><p>[Time since first frame in this TCP stream: 0.027356291 seconds]<!-- -->
.</p><ol start="5"><li>What are the source and destination IP addresses and TCP source and destination port numbers on the IP datagram carrying this HTTP GET (as recorded in the nat-outside-wireshark-trace1-1.pcapng trace file)? </li></ol><p>Internet Protocol Version 4, Src: 10.0.1.254, Dst: 138.76.29.8
Transmission Control Protocol, Src Port: 53924, Dst Port: 80, Seq: 1, Ack: 1, Len: 330</p><ol start="6"><li>Which of these four fields are different than in your answer to question 1 above?</li></ol><p>The source IP changed.</p><ol start="7"><li>Are any fields in the HTTP GET message changed? </li></ol><p>None.</p><ol start="8"><li>Which of the following fields in the IP datagram carrying the HTTP GET are changed from the datagram received on the local area network (inside) to the corresponding datagram forwarded on the Internet side (outside) of the NAT router: Version, Header Length, Flags, Checksum?</li></ol><p>Checksum changed.</p><p>Let’s continue to look at the nat-outside-wireshark-trace1-1.pcapng trace file. Find the HTTP reply containing the “200 OK” message that was received in response to the HTTP GET request you just examined in questions 4-8 above.</p><ol start="9"><li>At what time does this message appear in the nat-outside-wireshark-trace1-1.pcapng trace file? </li></ol><p>[Time since first frame in this TCP stream: 0.030625966 seconds]<!-- -->
.</p><ol start="10"><li>What are the source and destination IP addresses and TCP source and destination port numbers on the IP datagram carrying this HTTP reply (“200 OK”) message (as recorded in the nat-outside-wireshark-trace1-1.pcapng trace file)? </li></ol><p>Internet Protocol Version 4, Src: 138.76.29.8, Dst: 10.0.1.254</p><p>Transmission Control Protocol, Src Port: 80, Dst Port: 53924, Seq: 1, Ack: 331, Len: 547</p><p>Lastly, let’s consider what happens when the NAT router receives this datagram that you examined in questions 9 and 10, performs NAT translation, and finally forwards that datagram to the destination host on the LAN side. Based on your answers to questions 1 through 10 above and your knowledge of how NAT works, you should be able to answer the following question without actually looking at the nat-inside-wireshark-trace1-1.pcapng trace file:</p><ol start="11"><li>What are the source and destination IP addresses and TCP source and destination port numbers on the IP datagram carrying the HTTP reply (“200 OK”) that is forwarded from the router to the destination host in the right of Figure 1?</li></ol><p>Internet Protocol Version 4, Src: 138.76.29.8, Dst: 192.168.10.11</p><p>Transmission Control Protocol, Src Port: 80, Dst Port: 53924</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dhcp">DHCP<a href="#dhcp" class="hash-link" aria-label="DHCP的直接链接" title="DHCP的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="icmp">ICMP<a href="#icmp" class="hash-link" aria-label="ICMP的直接链接" title="ICMP的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ethernet-and-arp">Ethernet and ARP<a href="#ethernet-and-arp" class="hash-link" aria-label="Ethernet and ARP的直接链接" title="Ethernet and ARP的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="80211-wifi">802.11 WiFi<a href="#80211-wifi" class="hash-link" aria-label="802.11 WiFi的直接链接" title="802.11 WiFi的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ssl-currently-being-updated-to-tls">SSL (currently being updated to TLS)<a href="#ssl-currently-being-updated-to-tls" class="hash-link" aria-label="SSL (currently being updated to TLS)的直接链接" title="SSL (currently being updated to TLS)的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ip-1">IP<a href="#ip-1" class="hash-link" aria-label="IP的直接链接" title="IP的直接链接">​</a></h2><h1>Refs</h1><div id="refer-anchor-1"></div>- [1] [Umass Wireshark labs](https://gaia.cs.umass.edu/kurose_ross/wireshark.php)]]></content:encoded>
            <category>Computer Network</category>
        </item>
        <item>
            <title><![CDATA[群组测试：毒药谜题]]></title>
            <link>https://xigou.github.io/blog/2019/04/28/Group-testing</link>
            <guid>https://xigou.github.io/blog/2019/04/28/Group-testing</guid>
            <pubDate>Sun, 28 Apr 2019 17:53:41 GMT</pubDate>
            <description><![CDATA[问题背景]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题背景">问题背景<a href="#问题背景" class="hash-link" aria-label="问题背景的直接链接" title="问题背景的直接链接">​</a></h2><p>这个问题在统计学和组合数学领域被称为群组测试问题(Group testing),问题源于二战时期，美国需要通过血样检测美军是否携带梅毒，但是血液检测耗时耗钱，将每个士兵的血液都检查一遍效率很低。考虑到携带梅毒的总归是少数，Rosenblatt和Dorfman提出将全部待检测士兵的血样分组混合后再检测，如果混合后的血样没有病毒，可以推定整个组都没有病毒，如此便能够减少不必要的检测。</p><p>  将以上问题标准化描述如下：</p><ul><li>给定集合<strong>N</strong>，其中有<strong>n</strong>个个体，每个个体要么是正例(Positive)要么是负例(Negative)，记其中正例个数为<strong>d</strong>。</li><li>目标：通过尽量少的测试次数，找出所有的负例。</li><li>群组测试(Group testing)：在<strong>N</strong> 的一个子集上测试（与在每个个体上测试相对）。</li></ul><p>这样做有一个前提：<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>&lt;</mo><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">d &lt;&lt; n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">&lt;&lt;</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.4306em"></span><span class="mord mathnormal">n</span></span></span></span></span>；可以设想，如果一个集合N当中大多数都是正例，那你随便找个子集，大概率都是含有正例的， 那么就不能达到排除一个子集的效果，这个方法就失去意义了。</p><p>Katona在1976年介绍了一种矩阵表示法，只需要 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em"><span style="top:-2.4559em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span></span></span> 次测试即可检测出n个样本中的一个正例，并且证明的其最优性。这个方法就是被各个互联网公司面试题疯狂引用的1000瓶药中有一瓶有毒，要求用最少的小白鼠检测出这一瓶毒药的题目。我也刷过，但是不得不吐槽，起码对我来讲，倘若没见过这个题目的解法，要想自己独立思考出来，可以说是难如登天，即使有些人能够写下解法，但是这个“最优”一词，可能很少有人能说上来其中的原因。反正大加面试题抄来抄去，也没有认真想过为什么要出这么个面试题，可能面试官觉得自己已经背过了，不出给别人觉得浪费。</p><p>吐槽完了还是简单说说这个题目的解法，就免得部分同学再点到其他网页游览一圈了。将1000只老鼠用二进制的 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><msub><mo stretchy="false">)</mo><mn>10</mn></msub></mrow><annotation encoding="application/x-tex">(1) _{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span></span></span></span></span> 到 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1000</mn><msub><mo stretchy="false">)</mo><mn>10</mn></msub></mrow><annotation encoding="application/x-tex">(1000) _{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mopen">(</span><span class="mord">1000</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em"><span></span></span></span></span></span></span></span></span></span></span>编上序号，需要10位二进制码，然后把序号第1位为1的药混合在一起喂给老鼠1，....然后把序号第10位为1的药混合在一起喂给老鼠10。假设老鼠i死掉了，那么可以推定毒药的编号的第i位是1，把每只老鼠的实验结果综合起来，就能得到毒药编号的每一位，毒药就找出来了。另外，前述的此法所需测试次数 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em"><span style="top:-2.4559em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span></span></span> 实际上就是所需二进制编码的位数。</p><p>一般，对上述从n个样本中寻找一个正例的问题，很容易能想到的就是采用二分法去寻找，把样本分成两份，分别进行群组测试，那么只有一个能包含正例，所以，排除一半，对另一半进行检测····使用此法也能在 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em"><span style="top:-2.4559em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span></span></span> 次检测结束后找到解。不过此法与Katona的方法区别在于，此法是多阶段的决策(adaptive Algorithm)，比如第二次对哪一拨进行测试，要根据第一次的测试结果来确定。但是Katona方法则不同，其在测试开始前即可确定全部的测试群组的划分(non-adaptive Algorithm)。</p><hr><p>以上的只是一些老生常谈的问题，可能大家都看过无数遍了，我为甚么又要提起这个问题，还要谁个博文呢？主要是我昨天参加了IGG的线上笔试题，这个公司不走寻常路，出了一个这个问题的加强版，也就是在n个样本中寻找d个正例。这种题一下子就触及到我这样的刷题党的知识盲区了，因为之前没见过，要现场想出个解法太难了。</p><p>但是当时我还是大致写了个方法，不过不严密，当时也想的比较混乱。大致思想如下，既然已知其中有d个正例，我直接把样本随机分为d份，然后分别进行群组测试，按照鸽笼原理和统计学常识，这些正例恰好每组一个的概率是不太大的，所以能够淘汰掉一些群组。一直重复这个过程就能够排除掉很多负例。但是达到一定程度(在剩余样本里正例占比很大的时候)，就不能再采用分组测试了，应该采用单独测试。后来我去查阅文献，发现这个思想和文章<!-- -->[1]<!-- -->类似。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="信息论下界">信息论下界<a href="#信息论下界" class="hash-link" aria-label="信息论下界的直接链接" title="信息论下界的直接链接">​</a></h2><p>从信息论讲，这个问题(仅有一个正例)一定有一个下界。因为每次测试只有两个输出信息---正例or负例，因此进行k次测试最多表示 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em"><span style="top:-3.063em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em">k</span></span></span></span></span></span></span></span></span></span></span></span> 种信息状态，因此，至少要 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em"><span style="top:-2.4559em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span></span></span> 次测试才能获得足够的信息，因此，下界为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em"><span style="top:-2.4559em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span></span></span>。
同理，对于d个正例的情况，下界为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mrow><mo fence="true">(</mo><mfrac linethickness="0px"><mi>n</mi><mi>d</mi></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\log_2{n \choose d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em"><span style="top:-2.4559em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord"><span class="mord"><span class="mopen delimcenter" style="top:0em"><span class="delimsizing size1">(</span></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7454em"><span style="top:-2.355em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span style="top:-3.144em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em"><span class="delimsizing size1">)</span></span></span></span></span></span></span></span>。当然，下界一般而言是难以达到的。</p><p>解法1：可以简单地想到一种解法，利用二分法去解决，首先把n个样本分成两份进行检测，有毒（正例）的群组继续检测，没毒的部分排除，一直重复这个过程直到剩下的样本总数等于d，就找到所有的正例了。这个方法实际上就是算法中常用的剪枝的思想，剪枝越早，效率越高，假设你运气好，没走几步就只剩下d个可疑样本了，那就直接求出结果了。再来看看它的复杂度，由于其中只有d个样本是正例，那么在二叉搜索树的某一个层上最多只有d个节点能被检测出正例，而二叉树的深度是<span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em"><span style="top:-2.4559em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span></span></span>，所以复杂度为 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d \log_2{n} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord mathnormal" style="margin-right:0.02778em">O</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.1667em"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em"><span style="top:-2.4559em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mclose">)</span></span></span></span></span>。而哪个IGG笔试的题目实际上就是要求这个复杂度，只能说考试总是这样，交卷了思维才会清晰起来，呵呵。</p><p>但是这个方法也不是没有问题，因为它是adaptive的，需要的时间复杂度是 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em"><span style="top:-2.4559em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span></span></span> ，也就是要进行至多 <span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em"><span style="top:-2.4559em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span></span></span> 次的试验。如果题目要求一次就测出来，那么就还需要一个提前决定测试分组的编码方案，并且在测试结果出来之后能够解码得出到底哪些是正例。由于我对类问题兴趣不大，所以暂时不想深究,有兴趣的可以去文献<!-- -->[3]<!-- -->尝试寻找答案。</p><p><em>最近比较忙，倘若日后有空再去看这个问题，如果你有了自己的见解欢迎分享给我，万分感谢。</em></p><p>//TODO</p><p>[1]<!-- -->: Li, Chou Hsiung (June 1962). "A sequential method for screening experimental variables". Journal of the American Statistical Association. 57 (298): 455–477. doi:10.1080/01621459.1962.10480672</p><p>[2]<!-- -->: Group_testing: <a href="https://en.wikipedia.org/wiki/Group_testing" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Group_testing</a></p><p>[3]<!-- -->:Ding-Zhu, Du; Hwang, Frank K. (1993). Combinatorial group testing and its applications. Singapore: World Scientific. ISBN 978-9810212933.</p>]]></content:encoded>
            <category>面试题</category>
        </item>
        <item>
            <title><![CDATA[各种排序算法的介绍与实现]]></title>
            <link>https://xigou.github.io/blog/2017/06/5/sort_agrithon</link>
            <guid>https://xigou.github.io/blog/2017/06/5/sort_agrithon</guid>
            <pubDate>Mon, 05 Jun 2017 01:14:31 GMT</pubDate>
            <description><![CDATA[写在前边：这篇文章又臭又长，纯属个人无聊总结之作。]]></description>
            <content:encoded><![CDATA[<p><strong>写在前边</strong>：这篇文章又臭又长，纯属个人无聊总结之作。</p><p>[TOC]</p><p>{% centerquote %}
排序算法在计算机界是很基础，很重要的，对人类也是至关重要的，没有排序算法，就难以把人类分成三六九等区别对待了，那样的世界真是无法想象啊。
{% endcenterquote %}</p><p>为了演示方便，此文排序的对象都是一个int类型的vector，其中交换两个元素，采用了位运算，至于为什么，第一是我恰好会，第二是，我认为这三行写在一起有一种独特的美感。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p> (看起来似乎有点画蛇添足了，还不如。sort()......)。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1菜鸟排序">1.菜鸟排序<a href="#1菜鸟排序" class="hash-link" aria-label="1.菜鸟排序的直接链接" title="1.菜鸟排序的直接链接">​</a></h2><p>这个排序算法，是所有学生最开始接触编程的时候碰到的一个算法，其地位就像是&gt;hello world！&lt;在IT界的地位一般，所以必须放在开头。</p><p>其思想相当接近大多数常人的思维，从前向后，对每个位置，都从当前位置开始，向后面扫描，如果发现一个元素比当前位置的值大，就把它，交换过来。</p><p>这个算法，大约进行（n到1求和）次比较操作，所以复杂度是O(n^2)。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">noob sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">noob_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token plain">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&gt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-选择排序selected-sort">2. 选择排序（selected sort）<a href="#2-选择排序selected-sort" class="hash-link" aria-label="2. 选择排序（selected sort）的直接链接" title="2. 选择排序（selected sort）的直接链接">​</a></h2><p>一般同学们学到了上面那个算法，老师们就会指出，其中的很多交换是不必要的，如果我们先找出当前元素后面最大或者最小的元素，就能只用一次交换将一个元素放到正确的位置。于是就有了如下算法，用一个变量存储，后边的元素中最大或最小的元素下标，在遍历完之后才进行交换操作，减少了交换的次数，提高了效率。</p><p>不过它的复杂度依然是O(n^2)，因为这种优化带来的效果是操作次数常数倍的减少，决定这个算法效率的关键是比较的次数，这一类依赖于比较的算法，可以严格证明它们的复杂度是有下限的，稍后将会看到这样的算法。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">selected sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">selected_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     k</span><span class="token operator">=</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token plain">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&gt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            k</span><span class="token operator">=</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-冒泡排序bubble-sort">3. 冒泡排序（bubble sort）<a href="#3-冒泡排序bubble-sort" class="hash-link" aria-label="3. 冒泡排序（bubble sort）的直接链接" title="3. 冒泡排序（bubble sort）的直接链接">​</a></h2><p>这个算法的思想是从左往右去遍历数组，每次比较相邻两个元素的大小，如果其大小和你需要的大小关系相反（假设需要从大到小排序，那么你需要的排序结果左边的元素一定大于等于右边的元素），就交换两个元素的位置，这样一次从左到右的遍历，就能把最小的元素放到最后面去，这个最小的元素也就走到了它该去的地方，完成了历史的使命。第二次遍历的时候也就不用考虑这个元素了，具体来讲就是遍历范围的右边界减去1.</p><p>这个过程类似于每次把一个比较轻的泡泡冒出水面，所以这个算法叫做冒泡法。对于一个长度为n的数组，这个算法第i趟的时候需要比较n-i次，所以算法的复杂度依然是O(n^2)。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">bubble sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">bubble_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&gt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-鸡尾酒排序cocktail-sort">3. 鸡尾酒排序（cocktail sort）<a href="#3-鸡尾酒排序cocktail-sort" class="hash-link" aria-label="3. 鸡尾酒排序（cocktail sort）的直接链接" title="3. 鸡尾酒排序（cocktail sort）的直接链接">​</a></h2><p>这个算法是冒泡排序的一个变种，它的具体做法就是来回冒泡，每次把一个泡泡冒到右边，然后把一个石子沉到水底，代码实现方面，用两个变量存储遍历的左右边界，每次从左向右遍历到头就将右边界减一后向左遍历，如此，直到左右边界重合，排序就完成了。这个算法相比于冒泡排序，性能上没有优化，复杂度依然是n^2只是过程显得更加酷炫狂拽，估计也就因此得名鸡尾酒，如果是中国人发明的估计应该命名洗剪吹算法。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">cocktail sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">cocktail_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">&gt;</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">=</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">&lt;=</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        j</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">&gt;</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">=</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">&gt;=</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-插入排序insertion-sort">4. 插入排序（insertion sort）<a href="#4-插入排序insertion-sort" class="hash-link" aria-label="4. 插入排序（insertion sort）的直接链接" title="4. 插入排序（insertion sort）的直接链接">​</a></h2><p>这个算法的思想依次选取待排数组中间的元素，插入到已经有序的数组内合适的位置，最终得到的元素序列就是有序的。初始的时候，我们从待排数组左边选择一个元素当作是已经有序的数组。</p><p>分析它的复杂度我们主要看发生的比较的次数，插入的时候我们是有序数列的从一侧向另一侧遍历，如果运气好，比较一次就找到了它应该在的位置，如果数组本身是反序的，你每次都要从左到右把已经有序的部分比较完才能找到其应该的位置。所以这个算法的复杂度和以上几个有了不一样的地方，有最好的和最坏的情况，这种情形用复杂度的期望来衡量复杂度是比较自然而然的做法。</p><p>总共需要插入n次，第i次插入操作平均会比较（i-1）2次，所以他的期望的复杂度为O（n^2/2）==O(n^2).</p><p>插入排序实际上可以优化到O(nlog(n),插入的时候采用二分法插入即可。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">insertion sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">insertion_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&gt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-堆排序heap-sort">5. 堆排序（heap sort）<a href="#5-堆排序heap-sort" class="hash-link" aria-label="5. 堆排序（heap sort）的直接链接" title="5. 堆排序（heap sort）的直接链接">​</a></h2><p>堆排序是利用了堆的特性，根据大根堆的定义，堆的根就是整个堆当中最大的一个元素，那么我们不断的去取出这个根（由于取出后会重建堆，导致新的根被选出来），那么得到的数列就是有序的了。</p><p>所以说这个算法关键在建一个堆，此处采用线性存储结构，直接用数组存储堆，为了原地排序，我们取出堆的根之后，重建堆，这样尾端就会空出一个位置，把取出的元素放到这个位置，等堆的元素个数为1的时候，数组就有序了。</p><p>若我们不看堆的操作，这个算法就需要n-1次操作就能完成任务啦，现实是我们必须考虑每次取出堆头后堆的重建。由于堆是完全二叉树，所以这个树的深度最多log(n)+1,根据堆调整过程，最多log(n)次的比较交换就能完成调整。所以算法复杂度为O（n*log(n)），这个数字就是比较类算法的复杂度的下限，可见它是一种很快的算法。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)"> heap sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">rebuild_heap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> largest</span><span class="token operator">=</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">&gt;</span><span class="token plain">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">&lt;=</span><span class="token plain">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                largest</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> largest</span><span class="token operator">=</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span><span class="token plain">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&gt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">largest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    largest</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">largest</span><span class="token operator">!=</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">largest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">largest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">largest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">largest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">rebuild_heap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">largest</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">build_heap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">rebuild_heap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">heap_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    size</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/*build  heap*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">build_heap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token plain">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">/*1和size位置的值交换*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        size</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">rebuild_heap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="桶排序-bucket-sort">桶排序（ bucket sort）<a href="#桶排序-bucket-sort" class="hash-link" aria-label="桶排序（ bucket sort）的直接链接" title="桶排序（ bucket sort）的直接链接">​</a></h2><p>这个算法的思想是，给出一列有顺序的桶，每个桶编上号，从待排数列中取出一个元素，放到对应标号的桶里，这个操作在程序实现的时候极其方便，用数组的下标作为桶号，只需要一个赋值语句即可，对应桶的位置上的数字，用来标记桶号在待排数组内出现的次数。</p><p>输出的时候，按顺序扫描桶，若桶是空的，就跳过，若不空就根据桶中的数字输出相应个数的元素。</p><p>根据原理，很显然，只需要一次遍历就能把元素放进桶内，再一次便利桶即可输出有序的元素，为保证每个元素都能找到属于自己的桶，桶的个数需要包含待排数组的最小和最大值中间的所以情况。倘若待排数组长度n，桶个数m，那么算法的空间复杂度就是O(m)，时间复杂度就是O(n+m).</p><p>这似乎打破了前述的nlog(n)的复杂度下限，其实不然，之前说的复杂度下限，是直的基于比较的排序算法，而桶排序是不需要比较的。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)"> bucket sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">bucket_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token plain"> bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/*造桶*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="proxmap-sort">proxmap sort<a href="#proxmap-sort" class="hash-link" aria-label="proxmap sort的直接链接" title="proxmap sort的直接链接">​</a></h2><p>这东西没找着中文翻译，据我猜测 proximal是近似的意思，map是映射，它的中文应该是近似映射排序吧。</p><p>这是桶排序的升级版，桶排序最大的缺点就是浪费空间，因为桶排序中，大部分的桶都是空着的，所以有人提出每个桶装某个范围内的元素，所以它直接指定定一个桶的范围，然后在入桶的时候采用插入排序，最后遍历桶输出。 </p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">proxmap sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">proxmap_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vector</span><span class="token operator">&lt;</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/*造桶*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token operator">*</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token operator">*</span><span class="token plain"> m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">//入桶</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;=</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token operator">*</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">=</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    m</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    n</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">=</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">^</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token operator">*</span><span class="token plain">m</span><span class="token operator">=</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">^</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">=</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">^</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">//出桶</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">pop_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="基数排序radix-sort">基数排序（radix sort）<a href="#基数排序radix-sort" class="hash-link" aria-label="基数排序（radix sort）的直接链接" title="基数排序（radix sort）的直接链接">​</a></h2><p>这个基数也就是数学中各种进制数字表示法的基数，由于我们用的是十进制，在此处，基数就是10。</p><p>这个算法分配十个桶，标号0到9，先按照个位数入桶，然后从左到右遍历桶，将元素取出，按照十位数字入桶，以此类推。</p><p>分析一下这个操作，就知道，按照个位数入桶的时候，个位数小的第二轮会先入桶，也就是说，第二轮完毕之后，每个桶内十位数相同，但是个位数小的被压在下面。继续分析，到百位数入桶的时候，每个桶十位数小的被压在下面，那这些被压在下边的十位数相同的一组，他们的个位数是否有序呢？显然是有的，其大小方向，取决于我们上一层的桶的取出方式为保持小的压在下面的性质，出桶应该采用先进先出的方式。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">radix sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">radix_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">temp</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vector</span><span class="token operator">&lt;</span><span class="token plain"> vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/*造桶*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">pop_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">pop_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="耐心排序patience-sort">耐心排序（patience sort）<a href="#耐心排序patience-sort" class="hash-link" aria-label="耐心排序（patience sort）的直接链接" title="耐心排序（patience sort）的直接链接">​</a></h2><p>这个排序的思想是依次取出待排数组元素，从左往右查找桶，只有小于桶底元素才能入桶，如果没有桶或者元素不小于任何一个桶的桶底元素，就新建一个桶，把这个元素放到桶底部。</p><p>这一边操作结束的结果就是，把待排数组分成了很多段，在每个桶分别插入排序就能得到有序数组。</p><p>插入排序的最坏情况是在反序的时候出现的，这个算法相比插入排序，将那些反序得太离谱的元素进行了调整，减小了问题规模。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">patience sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">patience_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vector</span><span class="token operator">&lt;</span><span class="token plain"> vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">cur_bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">len</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        cur_bucket</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&gt;=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                cur_bucket</span><span class="token operator">=</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">cur_bucket</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">new</span><span class="token plain"> vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">cur_bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">&lt;</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">pop_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">//插入排序</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">&lt;</span><span class="token plain">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="闪电排序flash-sort">闪电排序（flash sort）<a href="#闪电排序flash-sort" class="hash-link" aria-label="闪电排序（flash sort）的直接链接" title="闪电排序（flash sort）的直接链接">​</a></h2><p>这也是proximap排序的一种升级算法，对于长度为n的桶，它把数组最大值和最小值之间分成n个区间，落在同个区间的放进同一个桶，入桶的时候进行插入排序，最后按顺序遍历桶，得到的数组就是有序的。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)"> flash sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">flash_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vector</span><span class="token operator">&lt;</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/*造桶*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">max</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">min</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token operator">*</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token operator">*</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&gt;</span><span class="token plain">max</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">max</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">min</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">min</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        j</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">-</span><span class="token plain">min</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">/</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">max</span><span class="token operator">-</span><span class="token plain">min</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">=</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            m</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            n</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">=</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">^</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token operator">*</span><span class="token plain">m</span><span class="token operator">=</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">^</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">=</span><span class="token operator">*</span><span class="token plain">n</span><span class="token operator">^</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">pop_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="计数排序-counting-sort">计数排序（ counting sort）<a href="#计数排序-counting-sort" class="hash-link" aria-label="计数排序（ counting sort）的直接链接" title="计数排序（ counting sort）的直接链接">​</a></h2><p>这个算法的核心思想是，如果待排数组中比一个元素小的有k个，那么这个元素就该放在第k+1个位置上。</p><p>当然对待重复的元素，需要特殊处理，假设有m个元素都发现数组中有k个元素比自己小，他们肯定不能全部挤在k+1号坑，显然，它们应该占据k+1到k+m这m个坑。</p><p>由于对每个元素，我们都需要遍历整个数组来统计比它小的元素个数，所以这个算法复杂度应该为O(n^2).</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)"> counting sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">counting_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token plain"> bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/*造桶*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        count</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">!=</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                count</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">!=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            count</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token operator">=</span><span class="token plain">bucket</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="圈排序-cycle-sort">圈排序（ cycle sort）<a href="#圈排序-cycle-sort" class="hash-link" aria-label="圈排序（ cycle sort）的直接链接" title="圈排序（ cycle sort）的直接链接">​</a></h2><p>如果你看懂了计数排序，你也许会想到，它并不是原地算法，因为通过对某个元素计数之后，你知道了这个元素应该去的位置，但是在原地那个位置上还占着一个不知该放在哪里的元素。所以我们的做法是建立一个新的数组来安放排好序的元素，最后赋值给原数组。当然为了节约能源，你也可以建一个数组用于保存每个位置应该放的元素的标号（因为实际排序不可能只排关键字，必然有数据域），最后再根据标号去让各个元素归位，不过这样操作依然不是最理想的。</p><p>圈排序解决了这个问题，把计数排序升级成了原地排序。</p><p>它的思想是这样的：当你找到一个a元素应该放在1号位，而1号位被另一个元素b占着，你就把b元素取出，然后把a放到1号位，给a本来的位置放一个空标记。接着寻找b应该放在哪里。最终你一定会找到一个元素应该放在a原来的位置，由于这个位置是空的，直接把元素放在此处就结束了，这样的一系列操作构成一个圈，每个元素移动一次，就能让一个圈上所有元素归位。</p><p>这里有个confused的地方，就是，你为什么知道能够找到这样的圈？</p><p>这背后是有数学原理的，这种排序前和排序之后的映射关系在抽象代数中称作置换，而上述的圈称作轮换，就是一个集合到自身的映射，可以严格证明，每个置换都能写成几个不相交的轮换乘积形式，此处只摆出结论，不做证明。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">cycle sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">cycle_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/*造桶*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> i</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        temp </span><span class="token operator">=</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            count </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> j</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">temp </span><span class="token operator">&amp;&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j </span><span class="token operator">!=</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    count</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">count </span><span class="token operator">==</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                count</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            temp </span><span class="token operator">=</span><span class="token plain"> temp</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> temp</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            temp </span><span class="token operator">=</span><span class="token plain"> temp</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i </span><span class="token operator">==</span><span class="token plain"> count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="地精-排序gnome-sort">地精 排序（gnome sort）<a href="#地精-排序gnome-sort" class="hash-link" aria-label="地精 排序（gnome sort）的直接链接" title="地精 排序（gnome sort）的直接链接">​</a></h2><p>这个算法我认为跟他的名字很搭调，地精就是生活在花园里的一种精灵，他们喜欢在土里钻来钻去。</p><p>这个算法具体操作概括为，先从左往右进行相邻元素比较，当发现一个元素不满足需要的大小关系的时候，就交换他们然后调转方向向左边冒泡，直到相邻元素满足大小关系的时候，停止冒泡。</p><p>按照这个过程，左边的一部分元素总是有序的，每次地精抓住一个元素把它插入到有序的序列内，所以这其实是插入排序的低配版，因为插入排序实际上在插入操作的时候可以优化到O(log(n),也就是二分法插入。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)"> gnome sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">gnome_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            i</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="珠排序bead-sort">珠排序（bead sort）<a href="#珠排序bead-sort" class="hash-link" aria-label="珠排序（bead sort）的直接链接" title="珠排序（bead sort）的直接链接">​</a></h2><p>这个算法有种让人眼前一亮的感觉，<a href="https://zh.wikipedia.org/wiki/%E7%8F%A0%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener noreferrer">维基百科页面</a>
讲的会更加清楚，这个算法按照理论，只需要把珠子穿在一系列棍子上，在‘duang’的一敲，排序就完成了。不过现实很骨感，它只能排整数列，并且在编程的时候，复杂度也是n^2级别，但是这种想法的确让人惊叹，发明这个算法的人真的是天才。</p><p>这个算法实际上基本是不可用的，不过我还是写了一个实现。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">bead sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">bead_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token plain"> temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/*下落*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> i</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">&gt;=</span><span class="token plain"> i </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> i</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">&gt;=</span><span class="token plain"> i </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>##　快速排序（quick sort）
这个算法采用的是分治法的思想，选取一个元素，然后遍历整个数组，小于等于这个元素的都放在这个元素左边，其余的放在它右边。这样数组就被分为三部分，这个元素本身已经处于正确的位置上，不需要再移动，而左右两部分都是无序的，但是左边部分的元素的正确位置只可能在左边，所以只要将左右两边分别排序，整个数组都有序了。</p><p>实现的时候，数组头尾各放一个指针（抽象意义的），左边指针向右移动直到有大于指定元素的时候停下来，右边指针也类似，等两边指针都停下来了，就进行一次交换，最终两个指针相遇的时候,再中间放上之前指定的那个元素，就完成了数组的分片操作。</p><p>递归的调用这个过程，最终得到的数组就是有序的。</p><p>由于这个算法递归深度为log（n）到n之间，它的复杂度也在n^2到nlogn之间，实际上他的平均复杂度是O（nlogn），既然他的名字叫做快速排序它总不能打自己脸来个n^2复杂度吧。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">quick sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">quick_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token operator">=</span><span class="token plain">left</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token operator">=</span><span class="token plain">right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">left</span><span class="token operator">&gt;=</span><span class="token plain">right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    temp</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&gt;=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">==</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">==</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            j</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">quick_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">i</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">quick_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="归并排序merge-sort">归并排序（merge sort）<a href="#归并排序merge-sort" class="hash-link" aria-label="归并排序（merge sort）的直接链接" title="归并排序（merge sort）的直接链接">​</a></h2><p>归并排序的思想也是挺直观的，对于已经有序的两个（或者n个）数列，我们只需要比较队列头部两个元素就能找出最终合并后数列的最大or最小元素。</p><p>假设我们需要从大到小排列，每次比较后把两个队头中大的那个放到新的队列，然后从待排队列中剔除它，直到其中一个列没有元素之后，就把另一列全部接到已经排序好的数列后边。</p><p>算法实现上，通过设置两个队头指针（抽象意义），用移动指针来表示元素的剔除，实现原地操作（当然就增加了时间复杂度）。</p><p>同时也用了分治法，先归并排序左半个数列，再归并排序右半边数列，最后归并排序整个数列。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">merge sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">merge_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> l</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> h</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">l</span><span class="token operator">&gt;=</span><span class="token plain">h</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    i</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">h</span><span class="token operator">-</span><span class="token plain">l</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    j</span><span class="token operator">=</span><span class="token plain">h</span><span class="token operator">-</span><span class="token plain">l</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    m</span><span class="token operator">=</span><span class="token plain">l</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    n</span><span class="token operator">=</span><span class="token plain">l</span><span class="token operator">+</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">merge_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">l</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">l</span><span class="token operator">+</span><span class="token plain">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">merge_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">l</span><span class="token operator">+</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">h</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">m</span><span class="token operator">&lt;</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">n</span><span class="token operator">&lt;=</span><span class="token plain">h</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&gt;=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            m</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">=</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">&gt;</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            n</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            m</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="strand-sort">strand sort<a href="#strand-sort" class="hash-link" aria-label="strand sort的直接链接" title="strand sort的直接链接">​</a></h2><p>这个算法首先给出一个有序数组（实际上选取待排数组中的第一个，就是一个有序数组了），然后遍历数组中余下的部分找到一个有序子列，具体做法是选一个元素作为子列开头，往后遍历若找到一个元素小于子列的尾部元素（这里是指的从大到小排列的情形），就从待排数组剔除这个元素，然后将它接到子列尾部。</p><p>最后将有序数组和子列归并排序，直到待排数组为空。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">strand sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">strand_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token plain"> temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token comment" style="color:rgb(98, 114, 164)">//'有序列'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">erase</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">begin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation" style="color:rgb(248, 248, 242)">::</span><span class="token plain">iterator i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        n</span><span class="token operator">=</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">begin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">!=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">end</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">==</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">begin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">continue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">i</span><span class="token operator">&lt;=</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                i</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">erase</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">n</span><span class="token operator">==</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">erase</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">begin</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        m </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">m</span><span class="token operator">&lt;</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">n</span><span class="token operator">&lt;=</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&gt;=</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                m</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">=</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">&gt;</span><span class="token plain">m</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                n</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                m</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec </span><span class="token operator">=</span><span class="token plain"> temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="希尔排序shell-sort">希尔排序（shell sort）<a href="#希尔排序shell-sort" class="hash-link" aria-label="希尔排序（shell sort）的直接链接" title="希尔排序（shell sort）的直接链接">​</a></h2><p>希尔排序是选择一系列的间隔，对每个间隔把元素等距离的分为若干组，每组分别进行插入排序。</p><p>这个间隔序列的选取应该是递减的，并且最后一个间隔是1.这个算法相比于插入排序，优势在于当间隔不为1的时候进行的排序，实际上相当于在整个数列中，让元素跨过多元素进行移动，这样解决了逆序带来的复杂度的提升。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">shell sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">shell_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> interval</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">len</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">cur_len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">interval</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">interval</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            cur_len</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">len</span><span class="token operator">/</span><span class="token plain">interval</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">+</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">len</span><span class="token operator">%</span><span class="token plain">interval</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">cur_len</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">&lt;</span><span class="token plain">cur_len</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        interval</span><span class="token operator">=</span><span class="token plain">interval</span><span class="token operator">/</span><span class="token number">1.3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="梳子排序comb-sort">梳子排序（comb sort）<a href="#梳子排序comb-sort" class="hash-link" aria-label="梳子排序（comb sort）的直接链接" title="梳子排序（comb sort）的直接链接">​</a></h2><p>这个算法就是希尔排序的冒泡版本，因为他按照等距离的方法把元素分为很多组，分别冒泡排序，就像梳子的齿一样，所以得名comb sort。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">comb sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">comb_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> interval</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">len</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">cur_len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">interval</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">interval</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            cur_len</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">len</span><span class="token operator">/</span><span class="token plain">interval</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">+</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">len</span><span class="token operator">%</span><span class="token plain">interval</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">cur_len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">=</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">k</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token operator">+</span><span class="token plain">interval</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">k</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        interval</span><span class="token operator">=</span><span class="token plain">interval</span><span class="token operator">/</span><span class="token number">1.3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="奇偶排序odd_even-sort">奇偶排序（odd_even sort）<a href="#奇偶排序odd_even-sort" class="hash-link" aria-label="奇偶排序（odd_even sort）的直接链接" title="奇偶排序（odd_even sort）的直接链接">​</a></h2><p>这个算法将元素按照下标的奇偶分为两组，首先在第一组进行相邻两个元素的比较，然后在第二组进行相邻两个元素比较（相邻的定义要一致，可以都用后一个相邻，也可以都用前一个乡邻，绝对不能一个前一个后），如此循环。直到某一次进行完检查后，第一组和第二组都没有改动，这时候就说明元素已经有序了。</p><p>这个算法一看就知道只是花拳绣腿，改变一下冒泡排序的顺序而已，性能没有任何变化。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">odd_even sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">odd_even_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> odd_len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">even_len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">flag</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    len</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    odd_len</span><span class="token operator">=</span><span class="token plain">len</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">len</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    even_len</span><span class="token operator">=</span><span class="token plain">len</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">len</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">flag</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        flag</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">even_len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                flag</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain">           </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&lt;</span><span class="token plain">odd_len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">=</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">^</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                flag</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain">           </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="图书馆排序library-sort">图书馆排序（library sort）<a href="#图书馆排序library-sort" class="hash-link" aria-label="图书馆排序（library sort）的直接链接" title="图书馆排序（library sort）的直接链接">​</a></h2><p>这个算法是二十一世纪才提出的，由此便看出计算机科学的活力，在数学上，那些让你觉得深不可测的东西，你一看年代，往往在几百年前就被大师上课的时候在草稿纸上解决了，等你学到21世纪的数学，你就是大师了。</p><p>这个算法灵感源于在图书馆放书的时候在书之间留下空隙，当你需要插入一本书的时候就不必移动整个架子的书。</p><p>所以我们在数组元素间留一些空隙，插入的时候就能够减少对其他元素的移动。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">library sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">library_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">const</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> empty_flag </span><span class="token operator">=</span><span class="token plain"> </span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token plain"> temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">empty_flag</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">l</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> indicator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">&lt;</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">j</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">&gt;=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">j</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"> j </span><span class="token operator">==</span><span class="token plain"> </span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">&gt;=</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">&amp;&amp;</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">!=</span><span class="token plain"> empty_flag</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                indicator </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">l</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">l</span><span class="token operator">&gt;</span><span class="token plain">j</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain">l</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">l</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">!=</span><span class="token plain"> empty_flag</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        indicator </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">indicator </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">!=</span><span class="token plain"> empty_flag</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        k </span><span class="token operator">=</span><span class="token plain"> j </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">!=</span><span class="token plain"> empty_flag</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                            k</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> k </span><span class="token operator">&gt;</span><span class="token plain"> j </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> k</span><span class="token operator">--</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                            temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k </span><span class="token operator">-</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">k</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">j </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resize</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> i </span><span class="token operator">&lt;</span><span class="token plain"> temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">!=</span><span class="token plain"> empty_flag</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">push_back</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">temp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bogo-sort">bogo sort<a href="#bogo-sort" class="hash-link" aria-label="bogo sort的直接链接" title="bogo sort的直接链接">​</a></h2><p>这个算法也没有中文翻译，不过我把它作为压轴算法，它必然有过人之处，它的过人之处就是，超级慢。</p><p>这个算法思想类似于把一副牌扔向空中，掉到地上后去看看它是不是有序的，如果不是，再扔一次。</p><p>它的复杂度是O（n!）,这个东西和n^n是同阶的。可见其相当恐怖。</p><p>数学说起来太抽象，假设排十个数需要时间t，那么排20个就需要2^20<!-- -->*<!-- -->10^10<!-- -->*<!-- -->t，也就是大约2<!-- -->*<!-- -->10^16<!-- -->*<!-- -->t，我实测了一下，半分钟才能排11个数字。</p><p>这个算法存在的意义估计是挑战运算的极限吧，等有朝一日，这个算法能用于生产生活，人类文明估计就会进入新纪元了。</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/*</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">bogo sort</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">bogo_sort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vector</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">int</span><span class="token plain"> randa</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> randb</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">count</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain">flag</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            randa </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token function" style="color:rgb(80, 250, 123)">time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token constant" style="color:rgb(189, 147, 249)">NULL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">+</span><span class="token function" style="color:rgb(80, 250, 123)">rand</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">%</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            randb </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token function" style="color:rgb(80, 250, 123)">time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token constant" style="color:rgb(189, 147, 249)">NULL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">+</span><span class="token function" style="color:rgb(80, 250, 123)">rand</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">%</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">randb </span><span class="token operator">!=</span><span class="token plain"> randa</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">randa</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">randa</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">^</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">randb</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">randb</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">randa</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">^</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">randb</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">randa</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">randa</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">^</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">randb</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        count</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">count </span><span class="token operator">&gt;=</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            count </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            flag </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"> i </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> i </span><span class="token operator">&lt;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">size</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"> i</span><span class="token operator">++</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token plain"> vec</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">i </span><span class="token operator">+</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    flag </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">flag </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[江胡秘技-气象操控之术]]></title>
            <link>https://xigou.github.io/blog/2017/04/10/jzm_and_weather</link>
            <guid>https://xigou.github.io/blog/2017/04/10/jzm_and_weather</guid>
            <pubDate>Mon, 10 Apr 2017 00:00:00 GMT</pubDate>
            <description><![CDATA[气象学是一门极其困难的科学，究其原因，主要是气象学模型复杂，扰动条件相当多，导致时常有不符合模型的情况出现，这在专业上称作‘奇点’。]]></description>
            <content:encoded><![CDATA[<p>气象学是一门极其困难的科学，究其原因，主要是气象学模型复杂，扰动条件相当多，导致时常有不符合模型的情况出现，这在专业上称作‘奇点’。
今天我们讲讲中国气象学上几个著名的奇点。</p><p>1985年5月，戈尔巴乔夫访华，国家主席杨尚昆和未来的总书记江先生一同接见了这位苏共总书记。
江主席亲切的说：“由于您的到来，上海的天气好转了。”戈尔巴乔夫回应：“特别令人高兴的是，中苏关系好转了”</p><p><img loading="lazy" src="https://i.imgur.com/Wjyl0b5.png" alt="戈尔巴乔夫访华" class="img_ev3q"></p><p>2009年，江主席视察旧部国机二院。会议中，中国著名气象专家徐嘉诰笑着说：“天气预报本来说今天有雨，结果江主席一来，天气晴朗”。</p><p><img loading="lazy" src="https://i.imgur.com/XEjuXps.png" alt="二院天气变化" class="img_ev3q"></p><p>科学研究需要敏锐的嗅觉，通过对以上两个案例的分析，很多人发现两个事件中共同点就是有他在场，于是便草率做出结论：他拥有“气象操控术”这样一种失传已久的秘技，上一次这个秘技展示在众人眼前，还是东汉末年。</p><p>斗转星移，到了2017年，我看到这样一篇新闻报道：</p><blockquote><p>中新社记者 孙宇挺
中国国家副主席习近平15日到访美国艾奥瓦州东部小镇马斯卡廷，与27年前的老友聚面。<br>
<!-- -->习近平当日下午抵达马斯卡廷兰迪夫人家门口时，阴雨天气短暂放晴。今天的老友聚会将在兰迪家举行。14名当地高中生用中文向习近平致意。<br>
<!-- -->“我喜欢你的笑容。”兰迪夫人对走进屋子的习近平说。她今天穿了一袭中国红的中式上衣。<br>
<!-- -->兰迪家今天打扮得有点中国风，墙上挂起了中国书法，角落摆着中国瓷器，甚至桌上餐巾纸也是印着孔雀的图案。<br>
<!-- -->习近平在起居室火炉边的沙发上落座，左右两侧坐着兰迪夫妇俩。习近平落座以后，双手放在膝盖上。他的身后和面前围坐着当年的那些老友，有些人甚至站着。<br>
<!-- -->当兰迪夫人开场白结束后，习近平站到火炉前，面对左右两侧的老朋友们开始发言。</p></blockquote><p><img loading="lazy" src="https://imgur.com/xKEHF89.png" alt="习近平主席在马斯卡廷兰迪夫人家" class="img_ev3q"></p><p>之前网友盛传他拥有秘技的谣言不攻自破，倘若真是秘技重现江湖，就目前的情形来看，他并不是唯一掌握这种秘技的人，至少他那位超凡的继任者也拥有同样的能力。
历史的脉搏是这么的有力，在波澜壮阔的长河里一次又一次不紧不慢的展示出自己的迷人之处。</p><p>无论真相如何，我们作为芸芸众生中微不足道的一员，只能感叹一句：历史就像是抽着兰州的董小姐，她不是一个没有故事的女同学，虽然她嘴上一笔带过，心里却一直重复。</p>]]></content:encoded>
            <category>joke</category>
        </item>
    </channel>
</rss>